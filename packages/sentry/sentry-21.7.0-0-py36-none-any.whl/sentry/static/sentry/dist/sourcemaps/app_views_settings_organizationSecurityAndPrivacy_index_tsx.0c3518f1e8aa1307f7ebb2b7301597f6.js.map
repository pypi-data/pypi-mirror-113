{"version":3,"sources":["webpack:///./app/data/forms/organizationSecurityAndPrivacyGroups.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationSecurityAndPrivacy/index.tsx"],"names":["route","title","t","fields","name","type","label","help","confirm","true","false","visible","features","has","placeholder","value","formatStoreCrashReports","choices","getStoreCrashReportsValues","SettingScope","map","hasSsoEnabled","multiline","autosize","maxRows","rows","extraHelp","getValue","val","extractMultilineFields","setValue","convertMultilineFieldValue","AsyncView","this","getTitle","renderComponent","AsyncComponent","OrganizationSecurityAndPrivacyContent","data","updateOrganization","orgId","props","params","organization","initialData","endpoint","access","Set","relayPiiConfig","authProvider","state","Fragment","orgSlug","slug","apiMethod","apiEndpoint","additionalFieldProps","onSubmitSuccess","handleUpdateOrganization","onSubmitError","addErrorMessage","saveOnBlur","allowUndo","forms","organizationSecurityAndPrivacyGroups","disabled","additionalContext","withOrganization"],"mappings":"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","file":"chunks/app_views_settings_organizationSecurityAndPrivacy_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {t} from 'app/locale';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'app/utils';\nimport {\n  formatStoreCrashReports,\n  getStoreCrashReportsValues,\n  SettingScope,\n} from 'app/utils/crashReports';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/security-and-privacy/';\nexport default [\n  {\n    title: t('Security & Privacy'),\n    fields: [\n      {\n        name: 'require2FA',\n        type: 'boolean',\n        label: t('Require Two-Factor Authentication'),\n        help: t('Require and enforce two-factor authentication for all members'),\n        confirm: {\n          true: t(\n            'This will remove all members without two-factor authentication' +\n              ' from your organization. It will also send them an email to setup 2FA' +\n              ' and reinstate their access and settings. Do you want to continue?'\n          ),\n          false: t(\n            'Are you sure you want to allow users to access your organization without having two-factor authentication enabled?'\n          ),\n        },\n      },\n      {\n        name: 'requireEmailVerification',\n        type: 'boolean',\n        label: t('Require Email Verification'),\n        help: t('Require and enforce email address verification for all members'),\n        visible: ({features}) => features.has('required-email-verification'),\n        confirm: {\n          true: t(\n            'This will remove all members whose email addresses are not verified' +\n              ' from your organization. It will also send them an email to verify their address' +\n              ' and reinstate their access and settings. Do you want to continue?'\n          ),\n          false: t(\n            'Are you sure you want to allow users to access your organization without verifying their email address?'\n          ),\n        },\n      },\n      {\n        name: 'allowSharedIssues',\n        type: 'boolean',\n\n        label: t('Allow Shared Issues'),\n        help: t('Enable sharing of limited details on issues to anonymous users'),\n        confirm: {\n          true: t('Are you sure you want to allow sharing issues to anonymous users?'),\n        },\n      },\n      {\n        name: 'enhancedPrivacy',\n        type: 'boolean',\n\n        label: t('Enhanced Privacy'),\n        help: t(\n          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'scrapeJavaScript',\n        type: 'boolean',\n        confirm: {\n          false: t(\n            \"Are you sure you want to disable sourcecode fetching for JavaScript events? This will affect Sentry's ability to aggregate issues if you're not already uploading sourcemaps as artifacts.\"\n          ),\n        },\n        label: t('Allow JavaScript Source Fetching'),\n        help: t('Allow Sentry to scrape missing JavaScript source context when possible'),\n      },\n      {\n        name: 'storeCrashReports',\n        type: 'select',\n        label: t('Store Native Crash Reports'),\n        help: t(\n          'Store native crash reports such as Minidumps for improved processing and download in issue details'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n        // HACK: some organization can have limit of stored crash reports a number that's not in the options (legacy reasons),\n        // we therefore display it in a placeholder\n        placeholder: ({value}) => formatStoreCrashReports(value),\n        choices: () =>\n          getStoreCrashReportsValues(SettingScope.Organization).map(value => [\n            value,\n            formatStoreCrashReports(value),\n          ]),\n      },\n      {\n        name: 'allowJoinRequests',\n        type: 'boolean',\n\n        label: t('Allow Join Requests'),\n        help: t('Allow users to request to join your organization'),\n        confirm: {\n          true: t(\n            'Are you sure you want to allow users to request to join your organization?'\n          ),\n        },\n        visible: ({hasSsoEnabled}) => !hasSsoEnabled,\n      },\n    ],\n  },\n  {\n    title: t('Data Scrubbing'),\n    fields: [\n      {\n        name: 'dataScrubber',\n        type: 'boolean',\n        label: t('Require Data Scrubber'),\n        help: t('Require server-side data scrubbing be enabled for all projects'),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'dataScrubberDefaults',\n        type: 'boolean',\n        label: t('Require Using Default Scrubbers'),\n        help: t(\n          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'sensitiveFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        rows: 1,\n        placeholder: 'e.g. email',\n        label: t('Global Sensitive Fields'),\n        help: t(\n          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'\n        ),\n        extraHelp: t(\n          'Note: These fields will be used in addition to project specific fields.'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'safeFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        rows: 1,\n        placeholder: t('e.g. business-email'),\n        label: t('Global Safe Fields'),\n        help: t(\n          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'\n        ),\n        extraHelp: t(\n          'Note: These fields will be used in addition to project specific fields'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'scrubIPAddresses',\n        type: 'boolean',\n        label: t('Prevent Storing of IP Addresses'),\n        help: t(\n          'Preventing IP addresses from being stored for new events on all projects'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n    ],\n  },\n] as JsonFormObject[];\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {updateOrganization} from 'app/actionCreators/organizations';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport organizationSecurityAndPrivacyGroups from 'app/data/forms/organizationSecurityAndPrivacyGroups';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport DataScrubbing from '../components/dataScrubbing';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n};\n\nclass OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId} = this.props.params;\n    return [['authProvider', `/organizations/${orgId}/auth-provider/`]];\n  }\n\n  handleUpdateOrganization = (data: Organization) => {\n    // This will update OrganizationStore (as well as OrganizationsStore\n    // which is slightly incorrect because it has summaries vs a detailed org)\n    updateOrganization(data);\n  };\n\n  renderBody() {\n    const {organization} = this.props;\n    const {orgId} = this.props.params;\n    const initialData = organization;\n    const endpoint = `/organizations/${orgId}/`;\n    const access = new Set(organization.access);\n    const features = new Set(organization.features);\n    const relayPiiConfig = organization.relayPiiConfig;\n    const {authProvider} = this.state;\n    const title = t('Security & Privacy');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} orgSlug={organization.slug} />\n        <SettingsPageHeader title={title} />\n        <Form\n          data-test-id=\"organization-settings-security-and-privacy\"\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          additionalFieldProps={{hasSsoEnabled: !!authProvider}}\n          onSubmitSuccess={this.handleUpdateOrganization}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          saveOnBlur\n          allowUndo\n        >\n          <JsonForm\n            features={features}\n            forms={organizationSecurityAndPrivacyGroups}\n            disabled={!access.has('org:write')}\n          />\n        </Form>\n        <DataScrubbing\n          additionalContext={t('These rules can be configured for each project.')}\n          endpoint={endpoint}\n          relayPiiConfig={relayPiiConfig}\n          disabled={!access.has('org:write')}\n          organization={organization}\n          onSubmitSuccess={this.handleUpdateOrganization}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSecurityAndPrivacyContent);\n"],"sourceRoot":""}