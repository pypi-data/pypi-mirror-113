import json
from . import ENUM_TYPE as ENUM_TYPE
from .type_primitive import TypePrimitive as TypePrimitive
from enum import Enum
from typing import Any, Callable, Dict, Type
from vtelem.enums.primitive import get_size as get_size
from vtelem.names import class_to_snake as class_to_snake, to_snake as to_snake

class UserEnum:
    enum: Any
    name: Any
    strings: Any
    default_val: Any
    def __init__(self, name: str, values: Dict[int, str], default: str = ...): ...
    def get_str(self, val: int) -> str: ...
    def get_value(self, val: str) -> int: ...
    def default(self) -> str: ...
    def get_primitive(self, value: str, changed_cb: Callable = ...) -> TypePrimitive: ...
    def describe(self, indented: bool = ...) -> str: ...

class UserEnumEncoder(json.JSONEncoder):
    def default(self, o) -> dict: ...

def from_enum(enum_class: Type[Enum]) -> UserEnum: ...
