{"version":3,"sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationMembers/organizationMembersWrapper.tsx"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","OrganizationMembersWrapper","id","setState","state","requestList","filter","request","inviteRequests","data","inviteIndex","findIndex","orgId","props","params","routeTitleGen","t","location","pathname","includes","organization","access","hasWriteAccess","length","showInviteRequests","count","toString","children","action","priority","size","onClick","openInviteMembersModal","source","icon","Fragment","showNavTabs","underlined","to","isActive","onRequestsTab","trackAnalyticsEvent","eventKey","eventName","organization_id","requestCount","StyledBadge","text","cloneElement","onRemoveInviteRequest","removeInviteRequest","onUpdateInviteRequest","updateInviteRequest","onRemoveAccessRequest","removeAccessRequest","Badge","p","theme","breakpoints","withOrganization"],"mappings":"6OAYA,IAZA,SACEA,EACAC,GAGQ,IAFRC,IAEQ,yDADRC,EACQ,uCACFC,EAAW,GAAH,OAAMJ,EAAN,cAAqBC,GAC7BI,EAAOF,EAAc,GAAH,OAAMC,EAAN,cAAoBD,GAAgBC,EAE5D,OAAOF,EAAa,GAAH,OAAMG,EAAN,aAAwBA,I,muBCDtBC,E,0iBAInB,WACE,MAAO,K,oBAGT,WACE,IAAMC,EAAQC,KAAKC,WACnB,OACE,QAAC,IAAD,CAAeF,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGC,KAAKE,wB,GATJC,KAHWL,E,srFCmBfM,E,uoBAmDkB,SAACC,GAAD,OACpB,EAAKC,UAAS,SAAAC,GAAK,MAAK,CACtBC,YAAaD,EAAMC,YAAYC,QAAO,SAAAC,GAAO,OAAIA,EAAQL,KAAOA,a,yCAG9C,SAACA,GAAD,OACpB,EAAKC,UAAS,SAAAC,GAAK,MAAK,CACtBI,eAAgBJ,EAAMI,eAAeF,QAAO,SAAAC,GAAO,OAAIA,EAAQL,KAAOA,a,yCAGpD,SAACA,EAAYO,GAAb,OACpB,EAAKN,UAAS,SAAAC,GACZ,IAAMI,GAAiB,OAAIJ,EAAMI,gBAC3BE,EAAcF,EAAeG,WAAU,SAAAJ,GAAO,OAAIA,EAAQL,KAAOA,KAIvE,OAFAM,EAAeE,GAAf,OAAkCF,EAAeE,IAAiBD,GAE3D,CAACD,wB,6CAnEZ,WACE,IAAOI,EAASf,KAAKgB,MAAMC,OAApBF,MAEP,MAAO,CACL,CAAC,iBAAD,yBAAqCA,EAArC,sBACA,CAAC,cAAD,yBAAkCA,EAAlC,yB,sBAIJ,WACE,IAAOA,EAASf,KAAKgB,MAAMC,OAApBF,MACP,OAAOG,QAAcC,OAAE,WAAYJ,GAAO,K,yBAG5C,WACE,OAAOK,SAASC,SAASC,SAAS,gB,0BAGpC,WACE,IAAOC,EAAgBvB,KAAKgB,MAArBO,aACP,SAAKA,IAAiBA,EAAaC,SAG5BD,EAAaC,OAAOF,SAAS,kB,8BAGtC,WACE,OAAOtB,KAAKyB,iB,uBAGd,WACE,IAAOjB,EAAeR,KAAKO,MAApBC,YAIP,OAAQA,GAAeA,EAAYkB,OAAS,GAAM1B,KAAK2B,qB,wBAGzD,WACE,MAAsC3B,KAAKO,MAApCC,EAAP,EAAOA,YAAaG,EAApB,EAAoBA,eAChBiB,EAAQpB,EAAYkB,OAOxB,OAHI1B,KAAK2B,qBACPC,GAASjB,EAAee,QAEnBE,EAAQA,EAAMC,WAAa,O,wBAuBpC,WAAa,WACX,EAII7B,KAAKgB,MAHPc,EADF,EACEA,SACAP,EAFF,EAEEA,aACSR,EAHX,EAGEE,OAASF,MAEX,EAAsCf,KAAKO,MAApCC,EAAP,EAAOA,YAAaG,EAApB,EAAoBA,eAEdoB,GACJ,QAAC,KAAD,CACEC,SAAS,UACTC,KAAK,QACLC,QAAS,kBAAMC,4BAAuB,CAACC,OAAQ,sBAC/C,eAAa,eACbC,MAAM,QAAC,IAAD,IALR,UAOGlB,OAAE,oBAIP,OACE,QAAC,EAAAmB,SAAD,YACE,QAAC,IAAD,CAAoBvC,MAAM,UAAUgC,OAAQA,IAE3C/B,KAAKuC,cACJ,QAAC,IAAD,CAASC,YAAU,EAAnB,WACE,QAAC,IAAD,CACEC,GAAE,oBAAe1B,EAAf,aACF2B,SAAU,kBAAO,EAAKC,eACtB,eAAa,cAHf,UAKGxB,OAAE,cAEL,QAAC,IAAD,CACEsB,GAAE,oBAAe1B,EAAf,sBACF2B,SAAU,kBAAM,EAAKC,eACrB,eAAa,eACbT,QAAS,WACP,EAAKP,qBACHiB,QAAoB,CAClBC,SAAU,6BACVC,UAAW,6BACXC,gBAAiBxB,EAAalB,MATtC,UAaGc,OAAE,cAEJnB,KAAKgD,eAAgB,QAACC,EAAD,CAAaC,KAAMlD,KAAKgD,kBAIjDlB,IACCqB,kBAAarB,EAAU,CACrBtB,cACAG,iBACAyC,sBAAuBpD,KAAKqD,oBAC5BC,sBAAuBtD,KAAKuD,oBAC5BC,sBAAuBxD,KAAKyD,oBAC5B9B,mBAAoB3B,KAAK2B,4B,GAlII7B,KAyInCmD,GAAc,OAAOS,IAAP,sBAAH,yCAGM,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,YAAY,KAH/B,wBAQjB,WAAeC,OAAiB1D","file":"chunks/app_views_settings_organizationMembers_organizationMembersWrapper_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {cloneElement, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {openInviteMembersModal} from 'app/actionCreators/modal';\nimport Badge from 'app/components/badge';\nimport Button from 'app/components/button';\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport {IconMail} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Member, Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype Props = {\n  children?: any;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  inviteRequests: Member[];\n};\n\nclass OrganizationMembersWrapper extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId} = this.props.params;\n\n    return [\n      ['inviteRequests', `/organizations/${orgId}/invite-requests/`],\n      ['requestList', `/organizations/${orgId}/access-requests/`],\n    ];\n  }\n\n  getTitle() {\n    const {orgId} = this.props.params;\n    return routeTitleGen(t('Members'), orgId, false);\n  }\n\n  get onRequestsTab() {\n    return location.pathname.includes('/requests/');\n  }\n\n  get hasWriteAccess() {\n    const {organization} = this.props;\n    if (!organization || !organization.access) {\n      return false;\n    }\n    return organization.access.includes('member:write');\n  }\n\n  get showInviteRequests() {\n    return this.hasWriteAccess;\n  }\n\n  get showNavTabs() {\n    const {requestList} = this.state;\n\n    // show the requests tab if there are pending team requests,\n    // or if the user has access to approve or deny invite requests\n    return (requestList && requestList.length > 0) || this.showInviteRequests;\n  }\n\n  get requestCount() {\n    const {requestList, inviteRequests} = this.state;\n    let count = requestList.length;\n\n    // if the user can't see the invite requests panel,\n    // exclude those requests from the total count\n    if (this.showInviteRequests) {\n      count += inviteRequests.length;\n    }\n    return count ? count.toString() : null;\n  }\n\n  removeAccessRequest = (id: string) =>\n    this.setState(state => ({\n      requestList: state.requestList.filter(request => request.id !== id),\n    }));\n\n  removeInviteRequest = (id: string) =>\n    this.setState(state => ({\n      inviteRequests: state.inviteRequests.filter(request => request.id !== id),\n    }));\n\n  updateInviteRequest = (id: string, data: Partial<Member>) =>\n    this.setState(state => {\n      const inviteRequests = [...state.inviteRequests];\n      const inviteIndex = inviteRequests.findIndex(request => request.id === id);\n\n      inviteRequests[inviteIndex] = {...inviteRequests[inviteIndex], ...data};\n\n      return {inviteRequests};\n    });\n\n  renderBody() {\n    const {\n      children,\n      organization,\n      params: {orgId},\n    } = this.props;\n    const {requestList, inviteRequests} = this.state;\n\n    const action = (\n      <Button\n        priority=\"primary\"\n        size=\"small\"\n        onClick={() => openInviteMembersModal({source: 'members_settings'})}\n        data-test-id=\"email-invite\"\n        icon={<IconMail />}\n      >\n        {t('Invite Members')}\n      </Button>\n    );\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Members\" action={action} />\n\n        {this.showNavTabs && (\n          <NavTabs underlined>\n            <ListLink\n              to={`/settings/${orgId}/members/`}\n              isActive={() => !this.onRequestsTab}\n              data-test-id=\"members-tab\"\n            >\n              {t('Members')}\n            </ListLink>\n            <ListLink\n              to={`/settings/${orgId}/members/requests/`}\n              isActive={() => this.onRequestsTab}\n              data-test-id=\"requests-tab\"\n              onClick={() => {\n                this.showInviteRequests &&\n                  trackAnalyticsEvent({\n                    eventKey: 'invite_request.tab_clicked',\n                    eventName: 'Invite Request Tab Clicked',\n                    organization_id: organization.id,\n                  });\n              }}\n            >\n              {t('Requests')}\n            </ListLink>\n            {this.requestCount && <StyledBadge text={this.requestCount} />}\n          </NavTabs>\n        )}\n\n        {children &&\n          cloneElement(children, {\n            requestList,\n            inviteRequests,\n            onRemoveInviteRequest: this.removeInviteRequest,\n            onUpdateInviteRequest: this.updateInviteRequest,\n            onRemoveAccessRequest: this.removeAccessRequest,\n            showInviteRequests: this.showInviteRequests,\n          })}\n      </Fragment>\n    );\n  }\n}\n\nconst StyledBadge = styled(Badge)`\n  margin-left: -12px;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin-left: -6px;\n  }\n`;\n\nexport default withOrganization(OrganizationMembersWrapper);\n"],"sourceRoot":""}