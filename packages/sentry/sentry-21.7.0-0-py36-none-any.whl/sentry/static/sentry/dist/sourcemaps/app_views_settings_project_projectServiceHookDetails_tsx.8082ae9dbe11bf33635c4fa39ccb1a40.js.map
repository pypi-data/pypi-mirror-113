{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/booleanField.tsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/views/settings/project/projectServiceHookDetails.tsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","BooleanField","value","onChange","onBlur","e","newValue","coerceValue","props","confirm","fieldProps","resetOnError","field","disabled","handleChange","bind","switchProps","size","isActive","isDisabled","toggle","renderMessage","toString","onConfirm","open","React","TextField","type","HookStats","until","Math","floor","Date","getTime","since","params","hookId","orgId","projectId","query","resolution","stats","state","emptyStats","series","seriesName","t","data","map","p","total","name","ts","withPadding","description","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","height","ProjectServiceHookDetails","addLoadingMessage","api","request","method","success","clearIndicators","browserHistory","error","addErrorMessage","hook","Fragment","initialData","status","icon","label","flexibleControlStateSize","inline","help","getDynamicText","secret","fixed","priority","onClick","onDelete","EVENT_CHOICES","ServiceHookSettingsForm","endpoint","apiMethod","apiEndpoint","onSubmitSuccess","footerStyle","marginTop","paddingRight","submitLabel","required","choices","Component"],"mappings":"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","file":"chunks/app_views_settings_project_projectServiceHookDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport Switch from 'app/components/switchButton';\nimport InputField, {onEvent} from 'app/views/settings/components/forms/inputField';\n\ntype Props = {\n  confirm?: {\n    true?: React.ReactNode;\n    false?: React.ReactNode;\n  };\n} & InputField['props'];\n\nexport default class BooleanField extends React.Component<Props> {\n  coerceValue(value: any) {\n    return !!value;\n  }\n\n  handleChange = (\n    value: any,\n    onChange: onEvent,\n    onBlur: onEvent,\n    e: React.FormEvent<HTMLInputElement>\n  ) => {\n    // We need to toggle current value because Switch is not an input\n    const newValue = this.coerceValue(!value);\n    onChange(newValue, e);\n    onBlur(newValue, e);\n  };\n\n  render() {\n    const {confirm, ...fieldProps} = this.props;\n\n    return (\n      <InputField\n        {...fieldProps}\n        resetOnError\n        field={({\n          onChange,\n          onBlur,\n          value,\n          disabled,\n          ...props\n        }: {\n          onChange: onEvent;\n          onBlur: onEvent;\n          value: any;\n          disabled: boolean;\n        }) => {\n          // Create a function with required args bound\n          const handleChange = this.handleChange.bind(this, value, onChange, onBlur);\n\n          const switchProps = {\n            ...props,\n            size: 'lg' as React.ComponentProps<typeof Switch>['size'],\n            isActive: !!value,\n            isDisabled: disabled,\n            toggle: handleChange,\n          };\n\n          if (confirm) {\n            return (\n              <Confirm\n                renderMessage={() => confirm[(!value).toString()]}\n                onConfirm={() => handleChange({})}\n              >\n                {({open}) => (\n                  <Switch\n                    {...switchProps}\n                    toggle={(e: React.MouseEvent) => {\n                      // If we have a `confirm` prop and enabling switch\n                      // Then show confirm dialog, otherwise propagate change as normal\n                      if (confirm[(!value).toString()]) {\n                        // Open confirm modal\n                        open();\n                        return;\n                      }\n\n                      handleChange(e);\n                    }}\n                  />\n                )}\n              </Confirm>\n            );\n          }\n\n          return <Switch {...switchProps} />;\n        }}\n      />\n    );\n  }\n}\n","import InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n","import {Fragment} from 'react';\nimport {browserHistory, WithRouterProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport MiniBarChart from 'app/components/charts/miniBarChart';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconFlag} from 'app/icons';\nimport {t} from 'app/locale';\nimport {ServiceHook} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport ServiceHookSettingsForm from 'app/views/settings/project/serviceHookSettingsForm';\n\ntype Params = {orgId: string; projectId: string; hookId: string};\n\ntype StatsProps = {\n  params: Params;\n};\n\ntype StatsState = {\n  stats: {ts: number; total: number}[] | null;\n} & AsyncComponent['state'];\n\nclass HookStats extends AsyncComponent<StatsProps, StatsState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 30;\n    const {hookId, orgId, projectId} = this.props.params;\n    return [\n      [\n        'stats',\n        `/projects/${orgId}/${projectId}/hooks/${hookId}/stats/`,\n        {\n          query: {\n            since,\n            until,\n            resolution: '1d',\n          },\n        },\n      ],\n    ];\n  }\n\n  renderBody() {\n    const {stats} = this.state;\n    if (stats === null) {\n      return null;\n    }\n    let emptyStats = true;\n\n    const series = {\n      seriesName: t('Events'),\n      data: stats.map(p => {\n        if (p.total) {\n          emptyStats = false;\n        }\n        return {\n          name: p.ts * 1000,\n          value: p.total,\n        };\n      }),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Events in the last 30 days (by day)')}</PanelHeader>\n        <PanelBody withPadding>\n          {!emptyStats ? (\n            <MiniBarChart\n              isGroupedByDate\n              showTimeInTooltip\n              labelYAxisExtents\n              series={[series]}\n              height={150}\n            />\n          ) : (\n            <EmptyMessage\n              title={t('Nothing recorded in the last 30 days.')}\n              description={t('Total webhooks fired for this configuration.')}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\ntype Props = WithRouterProps<Params, {}>;\ntype State = {\n  hook: ServiceHook | null;\n} & AsyncView['state'];\n\nexport default class ProjectServiceHookDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, projectId, hookId} = this.props.params;\n    return [['hook', `/projects/${orgId}/${projectId}/hooks/${hookId}/`]];\n  }\n\n  onDelete = () => {\n    const {orgId, projectId, hookId} = this.props.params;\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hookId}/`, {\n      method: 'DELETE',\n      success: () => {\n        clearIndicators();\n        browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderBody() {\n    const {orgId, projectId, hookId} = this.props.params;\n    const {hook} = this.state;\n    if (!hook) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Service Hook Details')} />\n\n        <ErrorBoundary>\n          <HookStats params={this.props.params} />\n        </ErrorBoundary>\n\n        <ServiceHookSettingsForm\n          orgId={orgId}\n          projectId={projectId}\n          hookId={hookId}\n          initialData={{\n            ...hook,\n            isActive: hook.status !== 'disabled',\n          }}\n        />\n        <Panel>\n          <PanelHeader>{t('Event Validation')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\" icon={<IconFlag size=\"md\" />}>\n              Sentry will send the <code>X-ServiceHook-Signature</code> header built using{' '}\n              <code>HMAC(SHA256, [secret], [payload])</code>. You should always verify\n              this signature before trusting the information provided in the webhook.\n            </PanelAlert>\n            <Field\n              label={t('Secret')}\n              flexibleControlStateSize\n              inline={false}\n              help={t('The shared secret used for generating event HMAC signatures.')}\n            >\n              <TextCopyInput>\n                {getDynamicText({\n                  value: hook.secret,\n                  fixed: 'a dynamic secret value',\n                })}\n              </TextCopyInput>\n            </Field>\n          </PanelBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>{t('Delete Hook')}</PanelHeader>\n          <PanelBody>\n            <Field\n              label={t('Delete Hook')}\n              help={t('Removing this hook is immediate and permanent.')}\n            >\n              <div>\n                <Button priority=\"danger\" onClick={this.onDelete}>\n                  {t('Delete Hook')}\n                </Button>\n              </div>\n            </Field>\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {Choices, ServiceHook} from 'app/types';\nimport ApiForm from 'app/views/settings/components/forms/apiForm';\nimport BooleanField from 'app/views/settings/components/forms/booleanField';\nimport MultipleCheckbox from 'app/views/settings/components/forms/controls/multipleCheckbox';\nimport FormField from 'app/views/settings/components/forms/formField';\nimport TextField from 'app/views/settings/components/forms/textField';\n\nconst EVENT_CHOICES: Choices = ['event.alert', 'event.created'].map(e => [e, e]);\n\ntype Props = {\n  orgId: string;\n  projectId: string;\n  initialData: Partial<ServiceHook> & {isActive: boolean};\n  hookId?: string;\n};\n\nexport default class ServiceHookSettingsForm extends Component<Props> {\n  onSubmitSuccess = () => {\n    const {orgId, projectId} = this.props;\n    browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n  };\n\n  render() {\n    const {initialData, orgId, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`\n      : `/projects/${orgId}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({value, onChange}) => (\n                <MultipleCheckbox\n                  onChange={onChange}\n                  value={value}\n                  choices={EVENT_CHOICES}\n                />\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n"],"sourceRoot":""}