{"version":3,"sources":["webpack:///./app/components/links/linkWithConfirmation.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationApiKeys/organizationApiKeysList.tsx","webpack:///./app/views/settings/organizationApiKeys/index.tsx"],"names":["LinkWithConfirmation","this","props","className","disabled","title","children","otherProps","href","classNames","React","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","getTitle","renderComponent","AsyncComponent","OrganizationApiKeysList","keys","busy","loading","onAddApiKey","onRemove","hasKeys","length","action","priority","size","icon","isCircled","onClick","t","tct","api","tokens","isLoading","isEmpty","emptyMessage","headers","id","key","label","apiDetailsUrl","Fragment","Cell","AutoSelectTextInput","readOnly","onConfirm","message","css","AutoSelectText","p","inputStyles","OrganizationApiKeys","oldKeys","state","setState","filter","requestPromise","orgId","method","data","addErrorMessage","browserHistory","addSuccessMessage","routeTitleGen","organization","slug","renderBody","handleRemove","handleAddApiKey","withOrganization"],"mappings":"q7DAkBMA,E,wiBACJ,WACE,MAA8DC,KAAKC,MAA5DC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,SAAaC,GAAhD,YACA,OACE,QAAC,IAAD,OAAaA,GAAb,IAAyBH,SAAUA,EAAnC,UACE,aAAGI,KAAK,IAAIL,UAAWM,IAAWN,GAAa,GAAI,CAACC,aAAYC,MAAOA,EAAvE,SACGC,W,GANwBI,iBAA7BV,E,mCAaN,O,8gBCFe,SAASW,EACtBC,EACAC,GACQ,QAGJC,EACAC,EAHGC,EAAsCH,EAAtCG,OAAQC,EAA8BJ,EAA9BI,OAAQC,EAAsBL,EAAtBK,SAAUC,EAAYN,EAAZM,SAC3BC,EAAQJ,EAAOK,KAAI,qBAAEC,MAAkB,MAK3B,iBAAPV,GACTG,EAAaC,EAAOO,QAAQX,GAAM,EAClCE,EAAgBU,IAAcJ,EAAMK,MAAM,EAAGV,IAAa,SAAAO,GAAI,MAAgB,MAAZA,EAAK,OAEvER,EAAgBU,IAAcJ,GAAO,SAAAE,GAAI,MAAgB,MAAZA,EAAK,MAGpD,IAAII,EAAYN,EAAMK,MAAMX,EAAeC,QAEnB,IAAbI,IACTO,EAAYA,EAAUD,MAAM,EAAGN,IAGjC,IAAMQ,EAAM,UAAGT,aAAH,EAAGA,EAAUS,cAAb,QAAuB,GAC7BC,EAAI,UAAGV,aAAH,EAAGA,EAAUU,YAAb,QAAqB,GAEzBC,EAAY,GAAH,OAAMH,EAAUI,KAAK,KAArB,OACC,iBAAPlB,EAAkB,GAAKA,GADjB,OAEZe,GAFY,OAEHC,GAEZ,OAAOG,OAAoBF,EAAWZ,K,kHC/CxC,IAZA,SACEe,EACAC,GAGQ,IAFRC,IAEQ,yDADRC,EACQ,uCACFC,EAAW,GAAH,OAAMJ,EAAN,cAAqBC,GAC7BI,EAAOF,EAAc,GAAH,OAAMC,EAAN,cAAoBD,GAAgBC,EAE5D,OAAOF,EAAa,GAAH,OAAMG,EAAN,aAAwBA,I,muBCDtBC,E,0iBAInB,WACE,MAAO,K,oBAGT,WACE,IAAMjC,EAAQJ,KAAKsC,WACnB,OACE,QAAC,IAAD,CAAelC,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGJ,KAAKuC,wB,GATJC,KAHWH,E,6iFCmCrB,SAASI,EAAT,GAQU,IAPRzB,EAOQ,EAPRA,OACAD,EAMQ,EANRA,OACA2B,EAKQ,EALRA,KACAC,EAIQ,EAJRA,KACAC,EAGQ,EAHRA,QACAC,EAEQ,EAFRA,YACAC,EACQ,EADRA,SAEMC,EAAUL,GAAQA,EAAKM,OAEvBC,GACJ,QAAC,KAAD,CACEC,SAAS,UACTC,KAAK,QACLC,MAAM,QAAC,KAAD,CAASD,KAAK,KAAKE,WAAS,IAClCV,KAAMA,EACNxC,SAAUwC,EACVW,QAAST,EANX,UAQGU,OAAE,iBAIP,OACE,0BACE,QAAC,IAAD,CAAoBnD,OAAOmD,OAAE,YAAaN,OAAQA,KAElD,QAAC,IAAD,WACGO,QAAI,oMAIH,CACEC,KAAK,QAAC,IAAD,CAAclD,KAAK,qCAK9B,QAAC,IAAD,CAAWI,GAAG,qCAAqCuC,SAAS,OAA5D,UACGM,QACC,+FACA,CACEE,QAAQ,qBAKd,QAAC,KAAD,CACEC,UAAWf,EACXgB,SAAUb,EACVc,cAAcN,OAAE,qCAChBO,QAAS,EAACP,OAAE,SAASA,OAAE,QAAQA,OAAE,YAJnC,SAMGb,GACCA,EAAKtB,KAAI,YAAsB,IAApB2C,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MACZC,GAAgBxD,OAAc,GAAD,OAAIqD,EAAJ,KAAW,CAC5C/C,SACAD,WAGF,OACE,QAAC,EAAAoD,SAAD,YACE,QAACC,EAAD,WACE,QAAC,IAAD,CAAMzD,GAAIuD,EAAV,SAA0BD,OAG5B,yBACE,QAACI,EAAD,CAAqBC,UAAQ,EAA7B,SAA+BN,OAGjC,QAACI,EAAD,WACE,QAAC,IAAD,CACE,cAAYb,OAAE,kBACdrD,UAAU,yBACVqE,UAAW,kBAAMzB,EAASiB,IAC1BS,SAASjB,OAAE,iDACXnD,OAAOmD,OAAE,mBALX,UAOE,QAAC,KAAD,CAAYJ,KAAK,KAAKsB,IAAG,UAjBhBT,WA9DpBvB,E,sCA0FT,IAAM2B,GAAO,OAAO,MAAP,qBAAH,0DAKJC,GAAsB,OAAOK,IAAP,sBACxB,SAAAC,GAAC,OAAIC,OAAYD,KADI,KAIzB,I,kOClHME,E,kqBASW,WAAOd,GAAP,8EACPe,GADO,OACO,EAAKC,MAAMrC,MAE/B,EAAKsC,UAAS,SAAAD,GAAK,MAAK,CACtBrC,KAAMqC,EAAMrC,KAAKuC,QAAO,qBAAElB,KAAmCA,SAJlD,kBAQL,EAAKN,IAAIyB,eAAT,yBACc,EAAKjF,MAAMe,OAAOmE,MADhC,qBACkDpB,EADlD,KAEJ,CACEqB,OAAQ,SACRC,KAAM,KAZC,uDAgBX,EAAKL,SAAS,CAACtC,KAAMoC,EAASnC,MAAM,KACpC2C,SAAgB/B,OAAE,uBAjBP,yD,8GAqBG,2FAChB,EAAKyB,SAAS,CACZrC,MAAM,IAFQ,kBAMK,EAAKc,IAAIyB,eAAT,yBACC,EAAKjF,MAAMe,OAAOmE,MADnB,cAEjB,CACEC,OAAQ,OACRC,KAAM,KAVI,QAMRA,EANQ,UAeZ,EAAKL,SAAS,CAACrC,MAAM,IACrB4C,uBACE7E,OAAc,GAAD,OAAI2E,EAAKtB,GAAT,KAAgB,CAC3B/C,OAAQ,EAAKf,MAAMe,OACnBD,OAAQ,EAAKd,MAAMc,WAGvByE,SAAkBjC,OAAE,0BAAD,OAA2B8B,EAAKpB,MAAhC,QAtBP,gDAyBd,EAAKe,SAAS,CAACrC,MAAM,IAzBP,0D,6CA7BlB,WACE,MAAO,CAAC,CAAC,OAAD,yBAA2B3C,KAAKC,MAAMe,OAAOmE,MAA7C,kB,sBAGV,WACE,OAAOM,QAAclC,OAAE,YAAavD,KAAKC,MAAMyF,aAAaC,MAAM,K,2BAqDpE,WACE,OAAO3F,KAAK4F,e,wBAGd,WACE,OACE,QAAC,E,qWAAD,EACEhD,QAAS5C,KAAK+E,MAAMnC,QACpBD,KAAM3C,KAAK+E,MAAMpC,KACjBD,KAAM1C,KAAK+E,MAAMrC,KACjBI,SAAU9C,KAAK6F,aACfhD,YAAa7C,KAAK8F,iBACd9F,KAAKC,Y,GAvEiBoC,KA6ElC,GAAe0D,OAAiBlB","file":"chunks/app_views_settings_organizationApiKeys_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\n\ntype Props = {\n  message: React.ReactNode;\n  title: string;\n  onConfirm: () => void;\n  disabled?: boolean;\n  className?: string;\n  priority?: React.ComponentProps<typeof Button>['priority'];\n};\n\n/**\n * <Confirm> is a more generic version of this component\n */\nclass LinkWithConfirmation extends React.PureComponent<Props> {\n  render() {\n    const {className, disabled, title, children, ...otherProps} = this.props;\n    return (\n      <Confirm {...otherProps} disabled={disabled}>\n        <a href=\"#\" className={classNames(className || '', {disabled})} title={title}>\n          {children}\n        </a>\n      </Confirm>\n    );\n  }\n}\n\nexport default LinkWithConfirmation;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport styled from '@emotion/styled';\n\nimport AlertLink from 'app/components/alertLink';\nimport AutoSelectText from 'app/components/autoSelectText';\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport LinkWithConfirmation from 'app/components/links/linkWithConfirmation';\nimport {PanelTable} from 'app/components/panels';\nimport {IconAdd, IconDelete} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {inputStyles} from 'app/styles/input';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport {DeprecatedApiKey} from './types';\n\ntype RouteParams = {\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  routes: PlainRoute[];\n  keys: DeprecatedApiKey[];\n\n  /**\n   * Loading refers to fetching the API Keys\n   */\n  loading: boolean;\n\n  /**\n   * Busy differs from loading in that busy is a result of an action like removing\n   */\n  busy: boolean;\n\n  onRemove: (id: DeprecatedApiKey['id']) => {};\n  onAddApiKey: () => {};\n};\n\nfunction OrganizationApiKeysList({\n  params,\n  routes,\n  keys,\n  busy,\n  loading,\n  onAddApiKey,\n  onRemove,\n}: Props) {\n  const hasKeys = keys && keys.length;\n\n  const action = (\n    <Button\n      priority=\"primary\"\n      size=\"small\"\n      icon={<IconAdd size=\"xs\" isCircled />}\n      busy={busy}\n      disabled={busy}\n      onClick={onAddApiKey}\n    >\n      {t('New API Key')}\n    </Button>\n  );\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('API Keys')} action={action} />\n\n      <TextBlock>\n        {tct(\n          `API keys grant access to the [api:developer web API].\n          If you're looking to configure a Sentry client, you'll need a\n          client key which is available in your project settings.`,\n          {\n            api: <ExternalLink href=\"https://docs.sentry.io/api/\" />,\n          }\n        )}\n      </TextBlock>\n\n      <AlertLink to=\"/settings/account/api/auth-tokens/\" priority=\"info\">\n        {tct(\n          'Until Sentry supports OAuth, you might want to switch to using [tokens:Auth Tokens] instead.',\n          {\n            tokens: <u />,\n          }\n        )}\n      </AlertLink>\n\n      <PanelTable\n        isLoading={loading}\n        isEmpty={!hasKeys}\n        emptyMessage={t('No API keys for this organization')}\n        headers={[t('Name'), t('Key'), t('Actions')]}\n      >\n        {keys &&\n          keys.map(({id, key, label}) => {\n            const apiDetailsUrl = recreateRoute(`${id}/`, {\n              params,\n              routes,\n            });\n\n            return (\n              <Fragment key={key}>\n                <Cell>\n                  <Link to={apiDetailsUrl}>{label}</Link>\n                </Cell>\n\n                <div>\n                  <AutoSelectTextInput readOnly>{key}</AutoSelectTextInput>\n                </div>\n\n                <Cell>\n                  <LinkWithConfirmation\n                    aria-label={t('Remove API Key')}\n                    className=\"btn btn-default btn-sm\"\n                    onConfirm={() => onRemove(id)}\n                    message={t('Are you sure you want to remove this API key?')}\n                    title={t('Remove API Key?')}\n                  >\n                    <IconDelete size=\"xs\" css={{position: 'relative', top: '2px'}} />\n                  </LinkWithConfirmation>\n                </Cell>\n              </Fragment>\n            );\n          })}\n      </PanelTable>\n    </div>\n  );\n}\n\nconst Cell = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AutoSelectTextInput = styled(AutoSelectText)<{readOnly: boolean}>`\n  ${p => inputStyles(p)}\n`;\n\nexport default OrganizationApiKeysList;\n","import {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\n\nimport OrganizationApiKeysList from './organizationApiKeysList';\nimport {DeprecatedApiKey} from './types';\n\ntype RouteParams = {\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  keys: DeprecatedApiKey[];\n} & AsyncView['state'];\n\n/**\n * API Keys are deprecated, but there may be some legacy customers that still use it\n */\nclass OrganizationApiKeys extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['keys', `/organizations/${this.props.params.orgId}/api-keys/`]];\n  }\n\n  getTitle() {\n    return routeTitleGen(t('API Keys'), this.props.organization.slug, false);\n  }\n\n  handleRemove = async (id: string) => {\n    const oldKeys = [...this.state.keys];\n\n    this.setState(state => ({\n      keys: state.keys.filter(({id: existingId}) => existingId !== id),\n    }));\n\n    try {\n      await this.api.requestPromise(\n        `/organizations/${this.props.params.orgId}/api-keys/${id}/`,\n        {\n          method: 'DELETE',\n          data: {},\n        }\n      );\n    } catch {\n      this.setState({keys: oldKeys, busy: false});\n      addErrorMessage(t('Error removing key'));\n    }\n  };\n\n  handleAddApiKey = async () => {\n    this.setState({\n      busy: true,\n    });\n\n    try {\n      const data = await this.api.requestPromise(\n        `/organizations/${this.props.params.orgId}/api-keys/`,\n        {\n          method: 'POST',\n          data: {},\n        }\n      );\n\n      if (data) {\n        this.setState({busy: false});\n        browserHistory.push(\n          recreateRoute(`${data.id}/`, {\n            params: this.props.params,\n            routes: this.props.routes,\n          })\n        );\n        addSuccessMessage(t(`Created a new API key \"${data.label}\"`));\n      }\n    } catch {\n      this.setState({busy: false});\n    }\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    return (\n      <OrganizationApiKeysList\n        loading={this.state.loading}\n        busy={this.state.busy}\n        keys={this.state.keys}\n        onRemove={this.handleRemove}\n        onAddApiKey={this.handleAddApiKey}\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(OrganizationApiKeys);\n"],"sourceRoot":""}