{"version":3,"sources":["webpack:///./app/views/admin/adminOverview/apiChart.tsx","webpack:///./app/views/admin/adminOverview/eventChart.tsx","webpack:///./app/views/admin/adminOverview/index.tsx"],"names":["initialState","error","loading","rawData","ApiChart","forEach","statName","props","api","request","method","data","since","resolution","key","success","setState","prevState","requestFinished","state","this","fetchData","nextProps","series","map","item","name","value","seriesName","processRawSeries","color","theme","onRetry","getChartSeries","colors","height","stacked","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","Component","withApi","stats","received","rejected","EventChart","processOrgData","sReceived","sRejected","aReceived","point","idx","dReceived","dRejected","ts","undefined","Object","keys","parseInt","accepted","t","AdminOverview","Date","getTime","title","Fragment","withPadding"],"mappings":"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","file":"chunks/app_views_admin_adminOverview_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'app/api';\nimport MiniBarChart from 'app/components/charts/miniBarChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {TimeseriesValue} from 'app/types';\nimport theme from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\n\nconst initialState = {\n  error: false,\n  loading: true,\n  rawData: {\n    'client-api.all-versions.responses.2xx': [],\n    'client-api.all-versions.responses.4xx': [],\n    'client-api.all-versions.responses.5xx': [],\n  },\n};\n\ntype Props = {\n  api: Client;\n  since: number;\n  resolution: string;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  rawData: Record<string, TimeseriesValue[]>;\n};\n\nclass ApiChart extends Component<Props, State> {\n  state: State = initialState;\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.since !== nextProps.since) {\n      this.setState(initialState, this.fetchData);\n    }\n  }\n\n  fetchData = () => {\n    const statNameList = [\n      'client-api.all-versions.responses.2xx',\n      'client-api.all-versions.responses.4xx',\n      'client-api.all-versions.responses.5xx',\n    ];\n\n    statNameList.forEach(statName => {\n      this.props.api.request('/internal/stats/', {\n        method: 'GET',\n        data: {\n          since: this.props.since,\n          resolution: this.props.resolution,\n          key: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawData = prevState.rawData;\n            rawData[statName] = data;\n            return {\n              rawData,\n            };\n          }, this.requestFinished);\n        },\n        error: () => {\n          this.setState({\n            error: true,\n          });\n        },\n      });\n    });\n  };\n\n  requestFinished = () => {\n    const {rawData} = this.state;\n    if (\n      rawData['client-api.all-versions.responses.2xx'] &&\n      rawData['client-api.all-versions.responses.4xx'] &&\n      rawData['client-api.all-versions.responses.5xx']\n    ) {\n      this.setState({\n        loading: false,\n      });\n    }\n  };\n\n  processRawSeries(series: TimeseriesValue[]) {\n    return series.map(item => ({name: item[0] * 1000, value: item[1]}));\n  }\n\n  getChartSeries() {\n    const {rawData} = this.state;\n    return [\n      {\n        seriesName: '2xx',\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.2xx']),\n        color: theme.green200,\n      },\n      {\n        seriesName: '4xx',\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.4xx']),\n        color: theme.blue300,\n      },\n      {\n        seriesName: '5xx',\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.5xx']),\n        color: theme.red200,\n      },\n    ];\n  }\n\n  render() {\n    const {loading, error} = this.state;\n    if (loading) {\n      return <LoadingIndicator />;\n    } else if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = this.getChartSeries();\n    const colors = series.map(({color}) => color);\n    return (\n      <MiniBarChart\n        series={series}\n        colors={colors}\n        height={110}\n        stacked\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(ApiChart);\n","import {Component} from 'react';\n\nimport {Client} from 'app/api';\nimport MiniBarChart from 'app/components/charts/miniBarChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport {TimeseriesValue} from 'app/types';\nimport {SeriesDataUnit} from 'app/types/echarts';\nimport theme from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  since: number;\n  resolution: string;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  rawData: Record<string, TimeseriesValue[]>;\n  stats: Record<string, SeriesDataUnit[]>;\n};\n\nconst initialState: State = {\n  error: false,\n  loading: true,\n  rawData: {\n    'events.total': [],\n    'events.dropped': [],\n  },\n  stats: {received: [], rejected: []},\n};\n\nclass EventChart extends Component<Props, State> {\n  state: State = initialState;\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.since !== nextProps.since) {\n      this.setState(initialState, this.fetchData);\n    }\n  }\n\n  fetchData = () => {\n    const statNameList = ['events.total', 'events.dropped'];\n\n    statNameList.forEach(statName => {\n      // query the organization stats via a separate call as its possible the project stats\n      // are too heavy\n      this.props.api.request('/internal/stats/', {\n        method: 'GET',\n        data: {\n          since: this.props.since,\n          resolution: this.props.resolution,\n          key: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawData = prevState.rawData;\n            rawData[statName] = data;\n            return {\n              rawData,\n            };\n          }, this.requestFinished);\n        },\n        error: () => {\n          this.setState({\n            error: true,\n          });\n        },\n      });\n    });\n  };\n\n  requestFinished() {\n    const {rawData} = this.state;\n    if (rawData['events.total'] && rawData['events.dropped']) {\n      this.processOrgData();\n    }\n  }\n\n  processOrgData() {\n    const {rawData} = this.state;\n    const sReceived: Record<string, number> = {};\n    const sRejected: Record<string, number> = {};\n    const aReceived = [0, 0]; // received, points\n\n    rawData['events.total'].forEach((point, idx) => {\n      const dReceived = point[1];\n      const dRejected = rawData['events.dropped'][idx]?.[1];\n      const ts = point[0];\n      if (sReceived[ts] === undefined) {\n        sReceived[ts] = dReceived;\n        sRejected[ts] = dRejected;\n      } else {\n        sReceived[ts] += dReceived;\n        sRejected[ts] += dRejected;\n      }\n      if (dReceived > 0) {\n        aReceived[0] += dReceived;\n        aReceived[1] += 1;\n      }\n    });\n\n    this.setState({\n      stats: {\n        rejected: Object.keys(sRejected).map(ts => ({\n          name: parseInt(ts, 10) * 1000,\n          value: sRejected[ts] || 0,\n        })),\n        accepted: Object.keys(sReceived).map(ts =>\n          // total number of events accepted (received - rejected)\n          ({name: parseInt(ts, 10) * 1000, value: sReceived[ts] - sRejected[ts]})\n        ),\n      },\n      loading: false,\n    });\n  }\n\n  getChartSeries() {\n    const {stats} = this.state;\n\n    return [\n      {\n        seriesName: t('Accepted'),\n        data: stats.accepted,\n        color: theme.blue300,\n      },\n      {\n        seriesName: t('Dropped'),\n        data: stats.rejected,\n        color: theme.red200,\n      },\n    ];\n  }\n\n  render() {\n    const {loading, error} = this.state;\n    if (loading) {\n      return <LoadingIndicator />;\n    } else if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n    const series = this.getChartSeries();\n    const colors = series.map(({color}) => color);\n    return (\n      <MiniBarChart\n        series={series}\n        colors={colors}\n        height={110}\n        stacked\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(EventChart);\n","import {Fragment} from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\n\nimport ApiChart from './apiChart';\nimport EventChart from './eventChart';\n\nconst AdminOverview = () => {\n  const resolution = '1h';\n  const since = new Date().getTime() / 1000 - 3600 * 24 * 7;\n\n  return (\n    <DocumentTitle title=\"Admin Overview - Sentry\">\n      <Fragment>\n        <h3>{t('System Overview')}</h3>\n\n        <Panel key=\"events\">\n          <PanelHeader>{t('Event Throughput')}</PanelHeader>\n          <PanelBody withPadding>\n            <EventChart since={since} resolution={resolution} />\n          </PanelBody>\n        </Panel>\n\n        <Panel key=\"api\">\n          <PanelHeader>{t('API Responses')}</PanelHeader>\n          <PanelBody withPadding>\n            <ApiChart since={since} resolution={resolution} />\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    </DocumentTitle>\n  );\n};\n\nexport default AdminOverview;\n"],"sourceRoot":""}