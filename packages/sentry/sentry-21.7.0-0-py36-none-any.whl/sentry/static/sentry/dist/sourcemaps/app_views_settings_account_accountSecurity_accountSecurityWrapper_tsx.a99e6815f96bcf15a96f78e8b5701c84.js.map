{"version":3,"sources":["webpack:///./app/views/settings/account/accountSecurity/accountSecurityWrapper.tsx"],"names":["ENDPOINT","AccountSecurityWrapper","auth","authId","setState","loading","api","requestPromise","method","remountComponent","addErrorMessage","t","name","props","params","fetchData","children","this","state","authenticators","organizations","emails","countEnrolled","filter","isEnrolled","isBackupInterface","length","orgsRequire2fa","org","require2FA","deleteDisabled","hasVerifiedEmail","find","isVerified","defined","React","onDisable","handleDisable","onRegenerateBackupCodes","handleRegenerateBackupCodes","handleRefresh","AsyncComponent"],"mappings":"oyCASA,IAAMA,EAAW,4BAaXC,E,mqBASY,WAAOC,GAAP,oEACTA,GAASA,EAAKC,OADL,wDAKd,EAAKC,SAAS,CAACC,SAAS,IALV,kBAQN,EAAKC,IAAIC,eAAT,UAA2BP,GAA3B,OAAsCE,EAAKC,OAA3C,KAAsD,CAACK,OAAQ,WARzD,OASZ,EAAKC,mBATO,gDAWZ,EAAKL,SAAS,CAACC,SAAS,KACxBK,SAAgBC,OAAE,qBAAsBT,EAAKU,OAZjC,yD,0HAgBc,qFAC5B,EAAKR,SAAS,CAACC,SAAS,IADI,kBAIpB,EAAKC,IAAIC,eAAT,UAA2BP,GAA3B,OAAsC,EAAKa,MAAMC,OAAOX,OAAxD,KAAmE,CACvEK,OAAQ,QALgB,OAO1B,EAAKC,mBAPqB,gDAS1B,EAAKL,SAAS,CAACC,SAAS,KACxBK,SAAgBC,OAAE,oCAVQ,2D,mCAad,WACd,EAAKI,e,6CAtCP,WACE,MAAO,CACL,CAAC,iBAAkBf,GACnB,CAAC,gBAAiB,mBAClB,CAAC,SAAU,wB,wBAqCf,WACE,IAAOgB,EAAYC,KAAKJ,MAAjBG,SACP,EAAgDC,KAAKC,MAA9CC,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,cAAeC,EAAtC,EAAsCA,OAGhCC,IADJH,aAAA,EAAAA,EAAgBI,QAAO,SAAArB,GAAI,OAAIA,EAAKsB,aAAetB,EAAKuB,uBAAsB,IACjDC,OACzBC,GAAiBP,aAAA,EAAAA,EAAeG,QAAO,SAAAK,GAAG,OAAIA,EAAIC,gBAAe,GACjEC,EAAiBH,EAAeD,OAAS,GAAuB,IAAlBJ,EAC9CS,IAAqBV,YAAQW,MAAK,qBAAEC,eAK1C,OAAKC,QAAQlB,GAINmB,eAAmBlB,KAAKJ,MAAMG,SAAU,CAC7CoB,UAAWnB,KAAKoB,cAChBC,wBAAyBrB,KAAKsB,4BAC9BpB,iBACAW,iBACAH,iBACAL,gBACAS,mBACAS,cAAevB,KAAKuB,gBAXb,S,GAxDwBC,KAwErC","file":"chunks/app_views_settings_account_accountSecurity_accountSecurityWrapper_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport {t} from 'app/locale';\nimport {Authenticator, OrganizationSummary, UserEmail} from 'app/types';\nimport {defined} from 'app/utils';\n\nconst ENDPOINT = '/users/me/authenticators/';\n\ntype Props = {\n  children: React.ReactElement;\n} & RouteComponentProps<{authId: string}, {}> &\n  AsyncComponent['props'];\n\ntype State = {\n  authenticators?: Authenticator[] | null;\n  organizations?: OrganizationSummary[];\n  emails: UserEmail[];\n} & AsyncComponent['state'];\n\nclass AccountSecurityWrapper extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [\n      ['authenticators', ENDPOINT],\n      ['organizations', '/organizations/'],\n      ['emails', '/users/me/emails/'],\n    ];\n  }\n\n  handleDisable = async (auth: Authenticator) => {\n    if (!auth || !auth.authId) {\n      return;\n    }\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(`${ENDPOINT}${auth.authId}/`, {method: 'DELETE'});\n      this.remountComponent();\n    } catch (_err) {\n      this.setState({loading: false});\n      addErrorMessage(t('Error disabling %s', auth.name));\n    }\n  };\n\n  handleRegenerateBackupCodes = async () => {\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(`${ENDPOINT}${this.props.params.authId}/`, {\n        method: 'PUT',\n      });\n      this.remountComponent();\n    } catch (_err) {\n      this.setState({loading: false});\n      addErrorMessage(t('Error regenerating backup codes'));\n    }\n  };\n  handleRefresh = () => {\n    this.fetchData();\n  };\n\n  renderBody() {\n    const {children} = this.props;\n    const {authenticators, organizations, emails} = this.state;\n    const enrolled =\n      authenticators?.filter(auth => auth.isEnrolled && !auth.isBackupInterface) || [];\n    const countEnrolled = enrolled.length;\n    const orgsRequire2fa = organizations?.filter(org => org.require2FA) || [];\n    const deleteDisabled = orgsRequire2fa.length > 0 && countEnrolled === 1;\n    const hasVerifiedEmail = !!emails?.find(({isVerified}) => isVerified);\n\n    // This happens when you switch between children views and the next child\n    // view is lazy loaded, it can potentially be `null` while the code split\n    // package is being fetched\n    if (!defined(children)) {\n      return null;\n    }\n\n    return React.cloneElement(this.props.children, {\n      onDisable: this.handleDisable,\n      onRegenerateBackupCodes: this.handleRegenerateBackupCodes,\n      authenticators,\n      deleteDisabled,\n      orgsRequire2fa,\n      countEnrolled,\n      hasVerifiedEmail,\n      handleRefresh: this.handleRefresh,\n    });\n  }\n}\n\nexport default AccountSecurityWrapper;\n"],"sourceRoot":""}