{"version":3,"sources":["webpack:///./app/components/modals/featureTourModal.tsx"],"names":["defaultProps","doneText","t","FeatureTourModal","openedAt","current","duration","setState","callIfFunction","props","onAdvance","Date","now","modalProps","steps","handleAdvance","state","doneUrl","openModal","deps","ModalContents","onClose","handleClose","onCloseModal","children","this","showModal","handleShow","React","prevState","Body","closeModal","step","undefined","length","hasNext","CloseButton","borderless","size","onClick","icon","TourContent","image","TourHeader","title","body","TourButtonBar","gap","actions","priority","external","href","StepCounter","Button","space","ButtonBar","p","theme","fontSizeSmall","gray300","TourText","TourImage"],"mappings":"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","file":"chunks/app_components_modals_featureTourModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps, openModal} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport {IconClose} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {callIfFunction} from 'app/utils/callIfFunction';\n\nexport type TourStep = {\n  title: string;\n  body: React.ReactNode;\n  actions?: React.ReactNode;\n  image?: React.ReactNode;\n};\n\ntype ChildProps = {\n  showModal: () => void;\n};\n\ntype Props = {\n  children: (props: ChildProps) => React.ReactNode;\n  /**\n   * The list of tour steps.\n   * The FeatureTourModal will manage state on the active step.\n   */\n  steps: TourStep[];\n  /**\n   * Triggered when the tour is advanced.\n   */\n  onAdvance?: (currentIndex: number, durationOpen: number) => void;\n  /**\n   * Triggered when the tour is closed by completion or IconClose\n   */\n  onCloseModal?: (currentIndex: number, durationOpen: number) => void;\n  /**\n   * Customize the text shown on the done button.\n   */\n  doneText?: string;\n  /**\n   * Provide a URL for the done state to open in a new tab.\n   */\n  doneUrl?: string;\n};\n\ntype State = {\n  /**\n   * The timestamp when the modal was shown.\n   * Used to calculate how long the modal was open\n   */\n  openedAt: number;\n\n  /**\n   * The last known step\n   */\n  current: number;\n};\n\nconst defaultProps = {\n  doneText: t('Done'),\n};\n\n/**\n * Provide a showModal action to the child function that lets\n * a tour be triggered.\n *\n * Once active this component will track when the tour was started and keep\n * a last known step state. Ideally the state would live entirely in this component.\n * However, once the modal has been opened state changes in this component don't\n * trigger re-renders in the modal contents. This requires a bit of duplicate state\n * to be managed around the current step.\n */\nclass FeatureTourModal extends React.Component<Props, State> {\n  static defaultProps = defaultProps;\n\n  state: State = {\n    openedAt: 0,\n    current: 0,\n  };\n\n  // Record the step change and call the callback this component was given.\n  handleAdvance = (current: number, duration: number) => {\n    this.setState({current});\n    callIfFunction(this.props.onAdvance, current, duration);\n  };\n\n  handleShow = () => {\n    this.setState({openedAt: Date.now()}, () => {\n      const modalProps = {\n        steps: this.props.steps,\n        onAdvance: this.handleAdvance,\n        openedAt: this.state.openedAt,\n        doneText: this.props.doneText,\n        doneUrl: this.props.doneUrl,\n      };\n      openModal(deps => <ModalContents {...deps} {...modalProps} />, {\n        onClose: this.handleClose,\n      });\n    });\n  };\n\n  handleClose = () => {\n    // The bootstrap modal and modal store both call this callback.\n    // We use the state flag to deduplicate actions to upstream components.\n    if (this.state.openedAt === 0) {\n      return;\n    }\n    const {onCloseModal} = this.props;\n\n    const duration = Date.now() - this.state.openedAt;\n    callIfFunction(onCloseModal, this.state.current, duration);\n\n    // Reset the state now that the modal is closed, used to deduplicate close actions.\n    this.setState({openedAt: 0, current: 0});\n  };\n\n  render() {\n    const {children} = this.props;\n    return <React.Fragment>{children({showModal: this.handleShow})}</React.Fragment>;\n  }\n}\n\nexport default FeatureTourModal;\n\ntype ContentsProps = ModalRenderProps &\n  Pick<Props, 'steps' | 'doneText' | 'doneUrl' | 'onAdvance'> &\n  Pick<State, 'openedAt'>;\n\ntype ContentsState = {\n  current: number;\n  openedAt: number;\n};\n\nclass ModalContents extends React.Component<ContentsProps, ContentsState> {\n  static defaultProps = defaultProps;\n\n  state: ContentsState = {\n    current: 0,\n    openedAt: Date.now(),\n  };\n\n  handleAdvance = () => {\n    const {onAdvance, openedAt} = this.props;\n    this.setState(\n      prevState => ({current: prevState.current + 1}),\n      () => {\n        const duration = Date.now() - openedAt;\n        callIfFunction(onAdvance, this.state.current, duration);\n      }\n    );\n  };\n\n  render() {\n    const {Body, steps, doneText, doneUrl, closeModal} = this.props;\n    const {current} = this.state;\n\n    const step = steps[current] !== undefined ? steps[current] : steps[steps.length - 1];\n    const hasNext = steps[current + 1] !== undefined;\n\n    return (\n      <Body>\n        <CloseButton borderless size=\"zero\" onClick={closeModal} icon={<IconClose />} />\n        <TourContent>\n          {step.image}\n          <TourHeader>{step.title}</TourHeader>\n          {step.body}\n          <TourButtonBar gap={1}>\n            {step.actions && step.actions}\n            {hasNext && (\n              <Button\n                data-test-id=\"next-step\"\n                priority=\"primary\"\n                onClick={this.handleAdvance}\n              >\n                {t('Next')}\n              </Button>\n            )}\n            {!hasNext && (\n              <Button\n                external\n                href={doneUrl}\n                data-test-id=\"complete-tour\"\n                onClick={closeModal}\n                priority=\"primary\"\n              >\n                {doneText}\n              </Button>\n            )}\n          </TourButtonBar>\n          <StepCounter>{t('%s of %s', current + 1, steps.length)}</StepCounter>\n        </TourContent>\n      </Body>\n    );\n  }\n}\n\nconst CloseButton = styled(Button)`\n  position: absolute;\n  top: -${space(2)};\n  right: -${space(1)};\n`;\n\nconst TourContent = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: ${space(3)} ${space(4)} ${space(1)} ${space(4)};\n`;\n\nconst TourHeader = styled('h4')`\n  margin-bottom: ${space(1)};\n`;\n\nconst TourButtonBar = styled(ButtonBar)`\n  margin-bottom: ${space(3)};\n`;\n\nconst StepCounter = styled('div')`\n  text-transform: uppercase;\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: bold;\n  color: ${p => p.theme.gray300};\n`;\n\n// Styled components that can be used to build tour content.\nexport const TourText = styled('p')`\n  text-align: center;\n  margin-bottom: ${space(4)};\n`;\n\nexport const TourImage = styled('img')`\n  height: 200px;\n  margin-bottom: ${space(4)};\n\n  /** override styles in less files */\n  max-width: 380px !important;\n  box-shadow: none !important;\n  border: 0 !important;\n  border-radius: 0 !important;\n`;\n"],"sourceRoot":""}