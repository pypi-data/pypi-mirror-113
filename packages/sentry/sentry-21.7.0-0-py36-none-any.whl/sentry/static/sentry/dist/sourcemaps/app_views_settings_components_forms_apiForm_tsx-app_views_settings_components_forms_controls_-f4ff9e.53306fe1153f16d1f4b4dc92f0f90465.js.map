{"version":3,"sources":["webpack:///./app/views/settings/components/forms/apiForm.tsx","webpack:///./app/views/settings/components/forms/controls/multipleCheckbox.tsx"],"names":["ApiForm","Client","data","onSuccess","onError","props","onSubmit","addLoadingMessage","t","api","request","apiEndpoint","method","apiMethod","success","response","clearIndicators","error","this","clear","otherProps","Component","MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","selectedValue","e","value","onChange","target","checked","filter","v","disabled","choices","map","choiceValue","choiceLabel","LabelContainer","type","bind","defined","indexOf","React","p","theme","breakpoints"],"mappings":"i9DAaqBA,E,snBAKL,IAAIC,O,8BAEP,SACTC,EACAC,EACAC,GAEA,EAAKC,MAAMC,UAAY,EAAKD,MAAMC,SAASJ,IAC3CK,SAAkBC,OAAE,oBACpB,EAAKC,IAAIC,QAAQ,EAAKL,MAAMM,YAAa,CACvCC,OAAQ,EAAKP,MAAMQ,UACnBX,OACAY,QAAS,SAAAC,IACPC,UACAb,EAAUY,IAEZE,MAAO,SAAF,oGAAE,WAAAA,IACLD,UACAZ,EAAQa,W,qDAtBd,WACEC,KAAKT,IAAIU,U,oBA0BX,WACE,MAKID,KAAKb,MADJe,GAJL,EACEd,SADF,EAEEO,UAFF,EAGEF,aAHF,aAOA,OAAO,QAAC,I,qWAAD,EAAML,SAAUY,KAAKZ,UAAcc,Q,GApCTC,aAAhBrB,E,ksCCPrB,IAAMsB,GAA0B,OAAO,MAAP,sBAAH,sDAKvBC,GAAQ,OAAO,QAAP,sBAAH,gHAQLC,GAAgB,OAAO,OAAP,sBAAH,2CAabC,E,4nBACO,SAACC,EAAgCC,GAC1C,MAA0B,EAAKtB,MAAxBuB,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAGU,mBAAbA,GAUXA,EANIF,EAAEG,OAAOC,QACAH,EAAQ,GAAH,eAAOA,GAAP,CAAcF,IAAiB,CAACE,GAErCA,EAAMI,QAAO,SAAAC,GAAC,OAAIA,IAAMP,KAGlBC,M,uCAGrB,WAAS,WACP,EAAmCT,KAAKb,MAAjC6B,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,QAASP,EAA1B,EAA0BA,MAE1B,OACE,QAACN,EAAD,UACGa,EAAQC,KAAI,+BAAEC,EAAF,KAAeC,EAAf,YACX,QAACC,EAAD,WACE,QAAChB,EAAD,YACE,iBACEiB,KAAK,WACLZ,MAAOS,EACPR,SAAU,EAAKA,SAASY,KAAK,EAAMJ,GACnCH,SAAUA,EACVH,SAASW,QAAQd,KAA0C,IAAhCA,EAAMe,QAAQN,MAE3C,QAACb,EAAD,UAAgBc,QATCD,Y,GAxBAO,aAAzBnB,E,+BA0CN,MAEA,IAAMc,GAAiB,OAAO,MAAP,sBAAH,kCAGG,SAAAM,GAAC,OAAIA,EAAEC,MAAMC,YAAY,KAH5B,oCAMG,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,YAAY,KAN5B,wCASG,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,YAAY,KAT5B","file":"chunks/app_views_settings_components_forms_apiForm_tsx-app_views_settings_components_forms_controls_-f4ff9e.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Component} from 'react';\n\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport Form from 'app/views/settings/components/forms/form';\n\ntype Props = Form['props'] & {\n  onSubmit?: (data: Record<string, any>) => void;\n  apiMethod: string;\n  apiEndpoint: string;\n};\n\nexport default class ApiForm extends Component<Props> {\n  componentWillUnmount() {\n    this.api.clear();\n  }\n\n  api: Client = new Client();\n\n  onSubmit = (\n    data: Record<string, any>,\n    onSuccess: (response: Record<string, any>) => void,\n    onError: (error: any) => void\n  ) => {\n    this.props.onSubmit && this.props.onSubmit(data);\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(this.props.apiEndpoint, {\n      method: this.props.apiMethod,\n      data,\n      success: response => {\n        clearIndicators();\n        onSuccess(response);\n      },\n      error: error => {\n        clearIndicators();\n        onError(error);\n      },\n    });\n  };\n\n  render() {\n    const {\n      onSubmit: _onSubmit,\n      apiMethod: _apiMethod,\n      apiEndpoint: _apiEndpoint,\n      ...otherProps\n    } = this.props;\n\n    return <Form onSubmit={this.onSubmit} {...otherProps} />;\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Choices} from 'app/types';\nimport {defined} from 'app/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\ntype SelectedValue = (string | number)[];\n\ntype Props = {\n  value: (string | number)[];\n  choices: Choices;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n};\n\nclass MultipleCheckbox extends React.Component<Props> {\n  onChange = (selectedValue: string | number, e: React.ChangeEvent<HTMLInputElement>) => {\n    const {value, onChange} = this.props;\n    let newValue: SelectedValue = [];\n\n    if (typeof onChange !== 'function') {\n      return;\n    }\n\n    if (e.target.checked) {\n      newValue = value ? [...value, selectedValue] : [value];\n    } else {\n      newValue = value.filter(v => v !== selectedValue);\n    }\n\n    onChange(newValue, e);\n  };\n\n  render() {\n    const {disabled, choices, value} = this.props;\n\n    return (\n      <MultipleCheckboxWrapper>\n        {choices.map(([choiceValue, choiceLabel]) => (\n          <LabelContainer key={choiceValue}>\n            <Label>\n              <input\n                type=\"checkbox\"\n                value={choiceValue}\n                onChange={this.onChange.bind(this, choiceValue)}\n                disabled={disabled}\n                checked={defined(value) && value.indexOf(choiceValue) !== -1}\n              />\n              <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n            </Label>\n          </LabelContainer>\n        ))}\n      </MultipleCheckboxWrapper>\n    );\n  }\n}\n\nexport default MultipleCheckbox;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    width: 25%;\n  }\n`;\n"],"sourceRoot":""}