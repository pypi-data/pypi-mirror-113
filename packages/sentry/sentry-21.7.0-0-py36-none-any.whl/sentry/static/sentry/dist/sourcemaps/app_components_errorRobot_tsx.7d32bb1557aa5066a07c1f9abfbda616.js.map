{"version":3,"sources":["webpack:///./app/components/errorRobot.tsx","webpack:///./app/views/onboarding/createSampleEventButton.tsx"],"names":["ErrorRobot","error","loading","sampleIssueId","props","this","fetchData","org","project","state","defined","url","slug","setState","api","requestPromise","method","data","limit","length","id","responseJSON","detail","gradient","sampleLink","Link","to","t","priority","source","disabled","title","undefined","ErrorRobotWrapper","className","Robot","Eye","MessageContainer","tct","strike","Strikethrough","platform","Component","withApi","p","theme","fontSizeExtraLarge","space","breakpoints","robotBackground","EVENT_POLL_INTERVAL","latestEventAvailable","groupID","retries","eventCreated","Promise","resolve","setTimeout","CreateSampleEventButton","creating","organization","trackAdvancedAnalyticsEvent","addLoadingMessage","duration","EVENT_POLL_RETRIES","eventData","Sentry","scope","setExtra","Error","clearIndicators","addErrorMessage","t0","performance","now","t1","Math","ceil","recordAnalytics","setTag","toString","setLevel","browserHistory","trackAdhocEvent","eventKey","org_id","project_id","eventName","trackAnalyticsEvent","organization_id","interval","onClick","createSampleGroup","React","withOrganization"],"mappings":"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","file":"chunks/app_components_errorRobot_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Component} from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport robotBackground from 'sentry-images/spot/sentry-robot.png';\n\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {LightWeightOrganization, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport withApi from 'app/utils/withApi';\nimport CreateSampleEventButton from 'app/views/onboarding/createSampleEventButton';\n\ntype Props = {\n  api: Client;\n  org: LightWeightOrganization;\n  project?: Project;\n  gradient: boolean;\n  /**\n   * sampleIssueId can have 3 values:\n   * - empty string to indicate it doesn't exist (render \"create sample event\")\n   * - non-empty string to indicate it exists (render \"see sample event\")\n   * - undefined to indicate the project API should be consulted to find out\n   */\n  sampleIssueId?: string;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  sampleIssueId?: string;\n};\n\nclass ErrorRobot extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: false,\n    sampleIssueId: this.props.sampleIssueId,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    const {org, project} = this.props;\n    const {sampleIssueId} = this.state;\n\n    if (!project) {\n      return;\n    }\n\n    if (defined(sampleIssueId)) {\n      return;\n    }\n\n    const url = `/projects/${org.slug}/${project.slug}/issues/`;\n\n    this.setState({loading: true});\n\n    try {\n      const data = await this.props.api.requestPromise(url, {\n        method: 'GET',\n        data: {limit: 1},\n      });\n      this.setState({sampleIssueId: (data.length > 0 && data[0].id) || ''});\n    } catch (err) {\n      const error = err?.responseJSON?.detail ?? true;\n      this.setState({error});\n    }\n\n    this.setState({loading: false});\n  }\n\n  render() {\n    const {loading, error, sampleIssueId} = this.state;\n    const {org, project, gradient} = this.props;\n\n    const sampleLink =\n      project && (loading || error ? null : sampleIssueId) ? (\n        <p>\n          <Link to={`/${org.slug}/${project.slug}/issues/${sampleIssueId}/?sample`}>\n            {t('Or see your sample event')}\n          </Link>\n        </p>\n      ) : (\n        <p>\n          <CreateSampleEventButton\n            priority=\"link\"\n            project={project}\n            source=\"issues_list\"\n            disabled={!project}\n            title={!project ? t('Select a project to create a sample event') : undefined}\n          >\n            {t('Create a sample event')}\n          </CreateSampleEventButton>\n        </p>\n      );\n\n    return (\n      <ErrorRobotWrapper\n        data-test-id=\"awaiting-events\"\n        className=\"awaiting-events\"\n        gradient={gradient}\n      >\n        <Robot aria-hidden>\n          <Eye />\n        </Robot>\n        <MessageContainer>\n          <h3>{t('Waiting for eventsâ€¦')}</h3>\n          <p>\n            {tct(\n              'Our error robot is waiting to [strike:devour] receive your first event.',\n              {\n                strike: <Strikethrough />,\n              }\n            )}\n          </p>\n          <p>\n            {project && (\n              <Button\n                data-test-id=\"install-instructions\"\n                priority=\"primary\"\n                to={`/${org.slug}/${project.slug}/getting-started/${\n                  project.platform || ''\n                }`}\n              >\n                {t('Installation Instructions')}\n              </Button>\n            )}\n          </p>\n          {sampleLink}\n        </MessageContainer>\n      </ErrorRobotWrapper>\n    );\n  }\n}\n\nexport {ErrorRobot};\n\nexport default withApi(ErrorRobot);\n\nconst ErrorRobotWrapper = styled('div')<{gradient: boolean}>`\n  display: flex;\n  justify-content: center;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.08);\n  border-radius: 0 0 3px 3px;\n  padding: 40px ${space(3)} ${space(3)};\n  min-height: 260px;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    flex-direction: column;\n    align-items: center;\n    padding: ${space(3)};\n    text-align: center;\n  }\n`;\n\nconst Robot = styled('div')`\n  display: block;\n  position: relative;\n  width: 220px;\n  height: 260px;\n  background: url(${robotBackground});\n  background-size: cover;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: 110px;\n    height: 130px;\n  }\n`;\n\nconst Eye = styled('span')`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  top: 70px;\n  left: 81px;\n  transform: translateZ(0);\n  animation: blink-eye 0.6s infinite;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: 6px;\n    height: 6px;\n    top: 35px;\n    left: 41px;\n  }\n\n  @keyframes blink-eye {\n    0% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n\n    50% {\n      background: #4a4d67;\n      box-shadow: none;\n    }\n\n    100% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n  }\n`;\n\nconst MessageContainer = styled('div')`\n  align-self: center;\n  max-width: 480px;\n  margin-left: 40px;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin: 0;\n  }\n`;\n\nconst Strikethrough = styled('span')`\n  text-decoration: line-through;\n`;\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport {trackAdvancedAnalyticsEvent} from 'app/utils/advancedAnalytics';\nimport {trackAdhocEvent, trackAnalyticsEvent} from 'app/utils/analytics';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = React.ComponentProps<typeof Button> & {\n  api: Client;\n  organization: Organization;\n  project?: Project;\n  source: string;\n};\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 15;\nconst EVENT_POLL_INTERVAL = 1000;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n    await new Promise(resolve => setTimeout(resolve, EVENT_POLL_INTERVAL));\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends React.Component<Props, State> {\n  state: State = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdhocEvent({\n      eventKey: 'sample_event.button_viewed',\n      org_id: organization.id,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}`;\n    const eventName = `Sample Event ${eventCreated ? 'Created' : 'Failed'}`;\n\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent(\n      'growth.onboarding_view_sample_event',\n      {platform: project.platform},\n      organization\n    );\n\n    addLoadingMessage(t('Processing sample event...'), {\n      duration: EVENT_POLL_RETRIES * EVENT_POLL_INTERVAL,\n    });\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      clearIndicators();\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel(Sentry.Severity.Warning);\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    browserHistory.push(\n      `/organizations/${organization.slug}/issues/${eventData.groupID}/`\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        data-test-id=\"create-sample-event\"\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n"],"sourceRoot":""}