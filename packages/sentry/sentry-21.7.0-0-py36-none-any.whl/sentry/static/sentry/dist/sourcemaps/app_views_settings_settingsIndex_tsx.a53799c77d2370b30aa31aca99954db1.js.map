{"version":3,"sources":["webpack:///./app/views/settings/settingsIndex.tsx"],"names":["LINKS","flexCenter","SettingsIndex","prevProps","organization","this","props","access","fetchOrganizationDetails","slug","setActive","loadProjects","user","ConfigStore","isOnPremise","organizationSettingsUrl","supportLinkProps","href","to","supportText","t","title","GridLayout","GridPanel","HomePanelHeader","HomeLinkIcon","AvatarContainer","size","HomePanelBody","HomeLink","overlay","hideSpinner","HomeIcon","color","OrganizationName","ExternalHomeLink","isCentered","SupportLinkComponent","React","withLatestContext","PanelHeader","p","theme","background","PanelBody","gray200","white","Link","purple300","omit","overflowEllipsis","Panel"],"mappings":"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","file":"chunks/app_views_settings_settingsIndex_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\nimport {RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport {fetchOrganizationDetails} from 'app/actionCreators/organizations';\nimport DemoModeGate from 'app/components/acl/demoModeGate';\nimport OrganizationAvatar from 'app/components/avatar/organizationAvatar';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconDocs, IconLock, IconStack, IconSupport} from 'app/icons';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport {Organization} from 'app/types';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\n\nconst LINKS = {\n  DOCUMENTATION: 'https://docs.sentry.io/',\n  DOCUMENTATION_PLATFORMS: 'https://docs.sentry.io/clients/',\n  DOCUMENTATION_QUICKSTART: 'https://docs.sentry.io/platform-redirect/?next=/',\n  DOCUMENTATION_CLI: 'https://docs.sentry.io/product/cli/',\n  DOCUMENTATION_API: 'https://docs.sentry.io/api/',\n  API: '/settings/account/api/',\n  MANAGE: '/manage/',\n  FORUM: 'https://forum.sentry.io/',\n  GITHUB_ISSUES: 'https://github.com/getsentry/sentry/issues',\n  SERVICE_STATUS: 'https://status.sentry.io/',\n};\n\nconst HOME_ICON_SIZE = 56;\n\nconst flexCenter = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{}, {}>;\n\nclass SettingsIndex extends React.Component<Props> {\n  componentDidUpdate(prevProps: Props) {\n    const {organization} = this.props;\n    if (prevProps.organization === organization) {\n      return;\n    }\n\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }\n\n  render() {\n    const {organization} = this.props;\n    const user = ConfigStore.get('user');\n    const isOnPremise = ConfigStore.get('isOnPremise');\n\n    const organizationSettingsUrl =\n      (organization && `/settings/${organization.slug}/`) || '';\n\n    const supportLinkProps = {\n      isOnPremise,\n      href: LINKS.FORUM,\n      to: `${organizationSettingsUrl}support`,\n    };\n    const supportText = isOnPremise ? t('Community Forums') : t('Contact Support');\n\n    return (\n      <DocumentTitle title={organization ? `${organization.slug} Settings` : 'Settings'}>\n        <SettingsLayout {...this.props}>\n          <GridLayout>\n            <DemoModeGate>\n              <GridPanel>\n                <HomePanelHeader>\n                  <HomeLinkIcon to=\"/settings/account/\">\n                    <AvatarContainer>\n                      <UserAvatar user={user} size={HOME_ICON_SIZE} />\n                    </AvatarContainer>\n                    {t('My Account')}\n                  </HomeLinkIcon>\n                </HomePanelHeader>\n\n                <HomePanelBody>\n                  <h3>{t('Quick links')}:</h3>\n                  <ul>\n                    <li>\n                      <HomeLink to=\"/settings/account/security/\">\n                        {t('Change my password')}\n                      </HomeLink>\n                    </li>\n                    <li>\n                      <HomeLink to=\"/settings/account/notifications/\">\n                        {t('Notification Preferences')}\n                      </HomeLink>\n                    </li>\n                    <li>\n                      <HomeLink to=\"/settings/account/\">{t('Change my avatar')}</HomeLink>\n                    </li>\n                  </ul>\n                </HomePanelBody>\n              </GridPanel>\n            </DemoModeGate>\n\n            {/* if admin */}\n            <GridPanel>\n              {!organization && <LoadingIndicator overlay hideSpinner />}\n              <HomePanelHeader>\n                <HomeLinkIcon to={organizationSettingsUrl}>\n                  {organization ? (\n                    <AvatarContainer>\n                      <OrganizationAvatar\n                        organization={organization}\n                        size={HOME_ICON_SIZE}\n                      />\n                    </AvatarContainer>\n                  ) : (\n                    <HomeIcon color=\"green300\">\n                      <IconStack size=\"lg\" />\n                    </HomeIcon>\n                  )}\n                  <OrganizationName>\n                    {organization ? organization.slug : t('No Organization')}\n                  </OrganizationName>\n                </HomeLinkIcon>\n              </HomePanelHeader>\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}projects/`}>\n                      {t('Projects')}\n                    </HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}teams/`}>\n                      {t('Teams')}\n                    </HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}members/`}>\n                      {t('Members')}\n                    </HomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <GridPanel>\n              <HomePanelHeader>\n                <ExternalHomeLink isCentered href={LINKS.DOCUMENTATION}>\n                  <HomeIcon color=\"orange400\">\n                    <IconDocs size=\"lg\" />\n                  </HomeIcon>\n                </ExternalHomeLink>\n                <ExternalHomeLink href={LINKS.DOCUMENTATION}>\n                  {t('Documentation')}\n                </ExternalHomeLink>\n              </HomePanelHeader>\n\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_QUICKSTART}>\n                      {t('Quickstart Guide')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_PLATFORMS}>\n                      {t('Platforms & Frameworks')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_CLI}>\n                      {t('Sentry CLI')}\n                    </ExternalHomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <GridPanel>\n              <HomePanelHeader>\n                <SupportLinkComponent isCentered {...supportLinkProps}>\n                  <HomeIcon color=\"purple300\">\n                    <IconSupport size=\"lg\" />\n                  </HomeIcon>\n                  {t('Support')}\n                </SupportLinkComponent>\n              </HomePanelHeader>\n\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <SupportLinkComponent {...supportLinkProps}>\n                      {supportText}\n                    </SupportLinkComponent>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.GITHUB_ISSUES}>\n                      {t('Sentry on GitHub')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.SERVICE_STATUS}>\n                      {t('Service Status')}\n                    </ExternalHomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <DemoModeGate>\n              <GridPanel>\n                <HomePanelHeader>\n                  <HomeLinkIcon to={LINKS.API}>\n                    <HomeIcon>\n                      <IconLock size=\"lg\" />\n                    </HomeIcon>\n                    {t('API Keys')}\n                  </HomeLinkIcon>\n                </HomePanelHeader>\n\n                <HomePanelBody>\n                  <h3>{t('Quick links')}:</h3>\n                  <ul>\n                    <li>\n                      <HomeLink to={LINKS.API}>{t('Auth Tokens')}</HomeLink>\n                    </li>\n                    <li>\n                      <HomeLink to={`${organizationSettingsUrl}developer-settings/`}>\n                        {t('Your Integrations')}\n                      </HomeLink>\n                    </li>\n                    <li>\n                      <ExternalHomeLink href={LINKS.DOCUMENTATION_API}>\n                        {t('Documentation')}\n                      </ExternalHomeLink>\n                    </li>\n                  </ul>\n                </HomePanelBody>\n              </GridPanel>\n            </DemoModeGate>\n          </GridLayout>\n        </SettingsLayout>\n      </DocumentTitle>\n    );\n  }\n}\n\nexport {SettingsIndex};\nexport default withLatestContext(SettingsIndex);\n\nconst HomePanelHeader = styled(PanelHeader)`\n  background: ${p => p.theme.background};\n  flex-direction: column;\n  text-align: center;\n  justify-content: center;\n  font-size: 18px;\n  text-transform: unset;\n  padding: 35px 30px;\n`;\n\nconst HomePanelBody = styled(PanelBody)`\n  padding: 30px;\n\n  h3 {\n    font-size: 14px;\n  }\n\n  ul {\n    margin: 0;\n    li {\n      line-height: 1.6;\n      /* Bullet color */\n      color: ${p => p.theme.gray200};\n    }\n  }\n`;\n\nconst HomeIcon = styled('div')<{color?: string}>`\n  background: ${p => p.theme[p.color || 'gray300']};\n  color: ${p => p.theme.white};\n  width: ${HOME_ICON_SIZE}px;\n  height: ${HOME_ICON_SIZE}px;\n  border-radius: ${HOME_ICON_SIZE}px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst HomeLink = styled(Link)`\n  color: ${p => p.theme.purple300};\n\n  &:hover {\n    color: ${p => p.theme.purple300};\n  }\n`;\n\nconst HomeLinkIcon = styled(HomeLink)`\n  overflow: hidden;\n  width: 100%;\n  ${flexCenter};\n`;\n\ntype CenterableProps = {\n  isCentered?: boolean;\n};\n\nconst ExternalHomeLink = styled(\n  (props: CenterableProps & React.ComponentPropsWithRef<typeof ExternalLink>) => (\n    <ExternalLink {...omit(props, 'isCentered')} />\n  )\n)<CenterableProps>`\n  color: ${p => p.theme.purple300};\n\n  &:hover {\n    color: ${p => p.theme.purple300};\n  }\n\n  ${p => p.isCentered && flexCenter};\n`;\n\ntype SupportLinkProps<T extends boolean> = {\n  isOnPremise: T;\n  href: string;\n  to: string;\n  isCentered?: boolean;\n} & React.ComponentPropsWithoutRef<\n  T extends true ? typeof ExternalLink : typeof HomeLink\n>;\n\nconst SupportLinkComponent = <T extends boolean>({\n  isCentered,\n  isOnPremise,\n  href,\n  to,\n  ...props\n}: SupportLinkProps<T>) =>\n  isOnPremise ? (\n    <ExternalHomeLink isCentered={isCentered} href={href} {...props} />\n  ) : (\n    <HomeLink to={to} {...props} />\n  );\n\nconst AvatarContainer = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst OrganizationName = styled('div')`\n  line-height: 1.1em;\n\n  ${overflowEllipsis};\n`;\n\nconst GridLayout = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 16px;\n`;\n\nconst GridPanel = styled(Panel)`\n  margin-bottom: 0;\n`;\n"],"sourceRoot":""}