{"version":3,"sources":["webpack:///./app/views/admin/adminEnvironment.tsx","webpack:///./app/views/asyncView.tsx"],"names":["AdminEnvironment","data","this","state","environment","config","pythonVersion","version","ConfigStore","t","className","VersionLabel","upgradeAvailable","title","latest","priority","href","icon","size","external","current","moment","start_date","toNow","tct","configPath","map","key","value","Fragment","AsyncView","space","getTitle","renderComponent","AsyncComponent"],"mappings":"wqCAsBqBA,E,8iBACnB,WACE,MAAO,CAAC,CAAC,OAAQ,6B,wBAGnB,WACE,IAAOC,EAAQC,KAAKC,MAAbF,KACAG,EAAsCH,EAAtCG,YAAaC,EAAyBJ,EAAzBI,OAAQC,EAAiBL,EAAjBK,cAErBC,EAAWC,gBAAXD,QAEP,OACE,0BACE,wBAAKE,OAAE,iBAENL,GACC,cAAIM,UAAU,OAAd,WACE,QAACC,EAAD,YACGF,OAAE,kBACFF,EAAQK,mBACP,QAAC,KAAD,CACEC,OAAOJ,OACL,yEACAF,EAAQO,QAEVC,SAAS,OACTC,KAAK,+CACLC,MAAM,QAAC,KAAD,CAAcC,KAAK,OACzBA,KAAK,QACLC,UAAQ,QAId,wBACE,eAAKT,UAAU,MAAf,SAAsBH,EAAQa,aAGhC,wBAAKX,OAAE,qBACP,wBACE,eAAKC,UAAU,MAAf,SAAsBJ,OAExB,wBAAKG,OAAE,yBACP,wBACE,eAAKC,UAAU,MAAf,SAAsBN,EAAYC,YAEpC,wBAAKI,OAAE,aACP,wBACE,eAAKC,UAAU,MAAf,UACGW,IAAOjB,EAAYkB,YAAYC,OAAM,GADxC,UACsD,IACnDnB,EAAYkB,WAFf,aAOJ,uBACGb,OAAE,2EAIP,wBACGe,QAAI,6BAA8B,CACjCC,WAAYrB,EAAYC,SAAU,0BAAQD,EAAYC,cAI1D,cAAIK,UAAU,OAAd,SACGL,EAAOqB,KAAI,+BAAEC,EAAF,KAAOC,EAAP,YACV,QAAC,EAAAC,SAAD,YACE,uBAAKF,KACL,wBACE,eAAKjB,UAAU,MAAf,SAAsBkB,QAHXD,e,GAnEmBG,KAgFxCnB,GAAe,OAAO,KAAP,qBAAH,uDAGJoB,OAAM,GAHF,yB,muBC9FGD,E,0iBAInB,WACE,MAAO,K,oBAGT,WACE,IAAMjB,EAAQX,KAAK8B,WACnB,OACE,QAAC,IAAD,CAAenB,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGX,KAAK+B,wB,GATJC,KAHWJ,E","file":"chunks/app_views_admin_adminEnvironment_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport Button from 'app/components/button';\nimport {IconQuestion} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport space from 'app/styles/space';\nimport AsyncView from 'app/views/asyncView';\n\ntype Data = {\n  environment: {\n    config: string;\n    start_date: string;\n  };\n  config: [key: string, value: string][];\n  pythonVersion: string;\n};\n\ntype State = AsyncView['state'] & {data: Data};\n\nexport default class AdminEnvironment extends AsyncView<{}, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['data', '/internal/environment/']];\n  }\n\n  renderBody() {\n    const {data} = this.state;\n    const {environment, config, pythonVersion} = data;\n\n    const {version} = ConfigStore.getConfig();\n\n    return (\n      <div>\n        <h3>{t('Environment')}</h3>\n\n        {environment ? (\n          <dl className=\"vars\">\n            <VersionLabel>\n              {t('Server Version')}\n              {version.upgradeAvailable && (\n                <Button\n                  title={t(\n                    \"You're running an old version of Sentry, did you know %s is available?\",\n                    version.latest\n                  )}\n                  priority=\"link\"\n                  href=\"https://github.com/getsentry/sentry/releases\"\n                  icon={<IconQuestion size=\"sm\" />}\n                  size=\"small\"\n                  external\n                />\n              )}\n            </VersionLabel>\n            <dd>\n              <pre className=\"val\">{version.current}</pre>\n            </dd>\n\n            <dt>{t('Python Version')}</dt>\n            <dd>\n              <pre className=\"val\">{pythonVersion}</pre>\n            </dd>\n            <dt>{t('Configuration File')}</dt>\n            <dd>\n              <pre className=\"val\">{environment.config}</pre>\n            </dd>\n            <dt>{t('Uptime')}</dt>\n            <dd>\n              <pre className=\"val\">\n                {moment(environment.start_date).toNow(true)} (since{' '}\n                {environment.start_date})\n              </pre>\n            </dd>\n          </dl>\n        ) : (\n          <p>\n            {t('Environment not found (are you using the builtin Sentry webserver?).')}\n          </p>\n        )}\n\n        <h3>\n          {tct('Configuration [configPath]', {\n            configPath: environment.config && <small>{environment.config}</small>,\n          })}\n        </h3>\n\n        <dl className=\"vars\">\n          {config.map(([key, value]) => (\n            <Fragment key={key}>\n              <dt>{key}</dt>\n              <dd>\n                <pre className=\"val\">{value}</pre>\n              </dd>\n            </Fragment>\n          ))}\n        </dl>\n      </div>\n    );\n  }\n}\n\nconst VersionLabel = styled('dt')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n"],"sourceRoot":""}