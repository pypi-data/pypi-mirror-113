{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/utils.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/sessionRow.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/index.tsx"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","tableLayout","space","SessionRow","ipAddress","lastSeen","firstSeen","countryCode","regionCode","SessionPanelItem","IpAndLocation","IpAddress","CountryCode","StyledTimeSince","date","p","theme","fontSizeRelativeSmall","TimeSince","PanelItem","t","ipList","state","props","recreateRouteProps","Fragment","tabs","underlined","index","SessionPanelHeader","id","ipObj","PanelHeader"],"mappings":"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","file":"chunks/app_views_settings_account_accountSecurity_sessionHistory_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import space from 'app/styles/space';\n\nexport const tableLayout = `\n  display: grid;\n  grid-template-columns: auto 140px 140px;\n  grid-gap ${space(1)};\n  align-items: center;\n`;\n","import styled from '@emotion/styled';\n\nimport {PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\nimport {InternetProtocol} from 'app/types';\n\nimport {tableLayout} from './utils';\n\nfunction SessionRow({\n  ipAddress,\n  lastSeen,\n  firstSeen,\n  countryCode,\n  regionCode,\n}: Omit<InternetProtocol, 'id'>) {\n  return (\n    <SessionPanelItem>\n      <IpAndLocation>\n        <IpAddress>{ipAddress}</IpAddress>\n        {countryCode && regionCode && (\n          <CountryCode>{`${countryCode} (${regionCode})`}</CountryCode>\n        )}\n      </IpAndLocation>\n      <StyledTimeSince date={firstSeen} />\n      <StyledTimeSince date={lastSeen} />\n    </SessionPanelItem>\n  );\n}\n\nexport default SessionRow;\n\nconst IpAddress = styled('div')`\n  margin-bottom: ${space(0.5)};\n  font-weight: bold;\n`;\nconst CountryCode = styled('div')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst IpAndLocation = styled('div')`\n  flex: 1;\n`;\n\nconst SessionPanelItem = styled(PanelItem)`\n  ${tableLayout};\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {InternetProtocol} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport SessionRow from './sessionRow';\nimport {tableLayout} from './utils';\n\ntype Props = RouteComponentProps<{}, {}>;\n\ntype State = {\n  ipList: Array<InternetProtocol> | null;\n} & AsyncView['state'];\n\nclass SessionHistory extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Session History');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['ipList', '/users/me/ips/']];\n  }\n\n  renderBody() {\n    const {ipList} = this.state;\n\n    if (!ipList) {\n      return null;\n    }\n\n    const {routes, params, location} = this.props;\n    const recreateRouteProps = {routes, params, location};\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink\n                to={recreateRoute('', {...recreateRouteProps, stepBack: -1})}\n                index\n              >\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('', recreateRouteProps)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        <Panel>\n          <SessionPanelHeader>\n            <div>{t('Sessions')}</div>\n            <div>{t('First Seen')}</div>\n            <div>{t('Last Seen')}</div>\n          </SessionPanelHeader>\n\n          <PanelBody>\n            {ipList.map(({id, ...ipObj}) => (\n              <SessionRow key={id} {...ipObj} />\n            ))}\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nexport default SessionHistory;\n\nconst SessionPanelHeader = styled(PanelHeader)`\n  ${tableLayout}\n  justify-content: initial;\n`;\n"],"sourceRoot":""}