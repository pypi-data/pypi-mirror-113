{"version":3,"sources":["webpack:///./app/views/organizationIntegrations/installedPlugin.tsx","webpack:///./app/views/organizationIntegrations/pluginDetailedView.tsx"],"names":["InstalledPlugin","data","method","props","organization","projectItem","plugin","api","requestPromise","slug","projectSlug","id","enabled","pluginUpdate","addLoadingMessage","t","reset","addSuccessMessage","onResetConfiguration","projectId","trackIntegrationEvent","addErrorMessage","status","updatePluginEnableStatus","onPluginEnableStatusChange","this","Fragment","type","icon","size","platform","projectPlatform","undefined","className","Container","access","hasAccess","IntegrationFlex","IntegrationItemBox","project","projectForBadge","StyledButton","borderless","disabled","to","priority","onConfirming","handleUninstallClick","confirmText","onConfirm","handleReset","message","getConfirmMessage","isActive","toggle","toggleEnablePlugin","isDisabled","Component","withApi","space","p","theme","border","background","Button","gray300","PluginDetailedView","projectList","slice","index","findIndex","item","splice","setState","plugins","state","enable","router","modal","modalProps","nextPath","needProject","needOrg","onFinish","path","closeModal","push","params","orgId","integrationSlug","description","author","name","resourceLinks","length","isHidden","featureDescriptions","tab","disabledFromFeatures","userHasAccess","AddButton","onClick","handleAddToProject","renderRequestIntegrationButton","map","handleResetConfiguration","handlePluginEnableStatus","renderEmptyConfigurations","AbstractIntegrationDetailedView","withOrganization"],"mappings":"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","file":"chunks/app_views_organizationIntegrations_pluginDetailedView_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport Switch from 'app/components/switchButton';\nimport {IconDelete, IconFlag, IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {AvatarProject, Organization, PluginNoProject, PluginProjectItem} from 'app/types';\nimport {IntegrationAnalyticsKey} from 'app/utils/integrationEvents';\nimport withApi from 'app/utils/withApi';\n\nexport type Props = {\n  api: Client;\n  plugin: PluginNoProject;\n  projectItem: PluginProjectItem;\n  organization: Organization;\n  onResetConfiguration: (projectId: string) => void;\n  onPluginEnableStatusChange: (projectId: string, status: boolean) => void;\n  trackIntegrationEvent: (eventKey: IntegrationAnalyticsKey) => void; // analytics callback\n  className?: string;\n};\n\nexport class InstalledPlugin extends Component<Props> {\n  get projectId() {\n    return this.props.projectItem.projectId;\n  }\n  getConfirmMessage() {\n    return (\n      <Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t(\n            'Deleting this installation will disable the integration for this project and remove any configurations.'\n          )}\n        </Alert>\n      </Fragment>\n    );\n  }\n\n  pluginUpdate = async (data: object, method: 'POST' | 'DELETE' = 'POST') => {\n    const {organization, projectItem, plugin} = this.props;\n    // no try/catch so the caller will have to have it\n    await this.props.api.requestPromise(\n      `/projects/${organization.slug}/${projectItem.projectSlug}/plugins/${plugin.id}/`,\n      {\n        method,\n        data,\n      }\n    );\n  };\n\n  updatePluginEnableStatus = async (enabled: boolean) => {\n    if (enabled) {\n      await this.pluginUpdate({enabled});\n    } else {\n      await this.pluginUpdate({}, 'DELETE');\n    }\n  };\n\n  handleReset = async () => {\n    try {\n      addLoadingMessage(t('Removing...'));\n      await this.pluginUpdate({reset: true});\n      addSuccessMessage(t('Configuration was removed'));\n      this.props.onResetConfiguration(this.projectId);\n      this.props.trackIntegrationEvent('integrations.uninstall_completed');\n    } catch (_err) {\n      addErrorMessage(t('Unable to remove configuration'));\n    }\n  };\n\n  handleUninstallClick = () => {\n    this.props.trackIntegrationEvent('integrations.uninstall_clicked');\n  };\n\n  toggleEnablePlugin = async (projectId: string, status: boolean = true) => {\n    try {\n      addLoadingMessage(t('Enabling...'));\n      await this.updatePluginEnableStatus(status);\n      addSuccessMessage(\n        status ? t('Configuration was enabled.') : t('Configuration was disabled.')\n      );\n      this.props.onPluginEnableStatusChange(projectId, status);\n      this.props.trackIntegrationEvent(\n        status ? 'integrations.enabled' : 'integrations.disabled'\n      );\n    } catch (_err) {\n      addErrorMessage(\n        status\n          ? t('Unable to enable configuration.')\n          : t('Unable to disable configuration.')\n      );\n    }\n  };\n\n  get projectForBadge(): AvatarProject {\n    // this function returns the project as needed for the ProjectBadge component\n    const {projectItem} = this.props;\n    return {\n      slug: projectItem.projectSlug,\n      platform: projectItem.projectPlatform ? projectItem.projectPlatform : undefined,\n    };\n  }\n\n  render() {\n    const {className, plugin, organization, projectItem} = this.props;\n    return (\n      <Container>\n        <Access access={['org:integrations']}>\n          {({hasAccess}) => (\n            <IntegrationFlex className={className}>\n              <IntegrationItemBox>\n                <ProjectBadge project={this.projectForBadge} />\n              </IntegrationItemBox>\n              <div>\n                {\n                  <StyledButton\n                    borderless\n                    icon={<IconSettings />}\n                    disabled={!hasAccess}\n                    to={`/settings/${organization.slug}/projects/${projectItem.projectSlug}/plugins/${plugin.id}/`}\n                    data-test-id=\"integration-configure-button\"\n                  >\n                    {t('Configure')}\n                  </StyledButton>\n                }\n              </div>\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  onConfirming={this.handleUninstallClick}\n                  disabled={!hasAccess}\n                  confirmText=\"Delete Installation\"\n                  onConfirm={() => this.handleReset()}\n                  message={this.getConfirmMessage()}\n                >\n                  <StyledButton\n                    disabled={!hasAccess}\n                    borderless\n                    icon={<IconDelete />}\n                    data-test-id=\"integration-remove-button\"\n                  >\n                    {t('Uninstall')}\n                  </StyledButton>\n                </Confirm>\n              </div>\n              <Switch\n                isActive={projectItem.enabled}\n                toggle={() =>\n                  this.toggleEnablePlugin(projectItem.projectId, !projectItem.enabled)\n                }\n                isDisabled={!hasAccess}\n              />\n            </IntegrationFlex>\n          )}\n        </Access>\n      </Container>\n    );\n  }\n}\n\nexport default withApi(InstalledPlugin);\n\nconst Container = styled('div')`\n  padding: ${space(2)};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  background-color: ${p => p.theme.background};\n\n  &:last-child {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IntegrationFlex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationItemBox = styled('div')`\n  flex: 1;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  min-width: 0;\n`;\n","import styled from '@emotion/styled';\n\nimport * as modal from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport ContextPickerModal from 'app/components/contextPickerModal';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {PluginProjectItem, PluginWithProjectList} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';\nimport InstalledPlugin from './installedPlugin';\n\ntype State = {\n  plugins: PluginWithProjectList[];\n};\n\ntype Tab = AbstractIntegrationDetailedView['state']['tab'];\n\nclass PluginDetailedView extends AbstractIntegrationDetailedView<\n  AbstractIntegrationDetailedView['props'],\n  State & AbstractIntegrationDetailedView['state']\n> {\n  getEndpoints(): ([string, string, any] | [string, string])[] {\n    const {orgId, integrationSlug} = this.props.params;\n    return [\n      ['plugins', `/organizations/${orgId}/plugins/configs/?plugins=${integrationSlug}`],\n    ];\n  }\n\n  get integrationType() {\n    return 'plugin' as const;\n  }\n\n  get plugin() {\n    return this.state.plugins[0];\n  }\n\n  get description() {\n    return this.plugin.description || '';\n  }\n\n  get author() {\n    return this.plugin.author?.name;\n  }\n\n  get resourceLinks() {\n    return this.plugin.resourceLinks || [];\n  }\n\n  get installationStatus() {\n    return this.plugin.projectList.length > 0 ? 'Installed' : 'Not Installed';\n  }\n\n  get integrationName() {\n    return `${this.plugin.name}${this.plugin.isHidden ? ' (Legacy)' : ''}`;\n  }\n\n  get featureData() {\n    return this.plugin.featureDescriptions;\n  }\n\n  handleResetConfiguration = (projectId: string) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n    // remove from array\n    projectList.splice(index, 1);\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handlePluginEnableStatus = (projectId: string, enable: boolean = true) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n\n    // update item in array\n    projectList[index] = {\n      ...projectList[index],\n      enabled: enable,\n    };\n\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handleAddToProject = () => {\n    const plugin = this.plugin;\n    const {organization, router} = this.props;\n    this.trackIntegrationEvent('integrations.plugin_add_to_project_clicked');\n    modal.openModal(\n      modalProps => (\n        <ContextPickerModal\n          {...modalProps}\n          nextPath={`/settings/${organization.slug}/projects/:projectId/plugins/${plugin.id}/`}\n          needProject\n          needOrg={false}\n          onFinish={path => {\n            modalProps.closeModal();\n            router.push(path);\n          }}\n        />\n      ),\n      {}\n    );\n  };\n\n  getTabDisplay(tab: Tab) {\n    // we want to show project configurations to make it more clear\n    if (tab === 'configurations') {\n      return 'project configurations';\n    }\n    return 'overview';\n  }\n\n  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {\n    if (userHasAccess) {\n      return (\n        <AddButton\n          data-test-id=\"install-button\"\n          disabled={disabledFromFeatures}\n          onClick={this.handleAddToProject}\n          size=\"small\"\n          priority=\"primary\"\n        >\n          {t('Add to Project')}\n        </AddButton>\n      );\n    }\n\n    return this.renderRequestIntegrationButton();\n  }\n\n  renderConfigurations() {\n    const plugin = this.plugin;\n    const {organization} = this.props;\n    if (plugin.projectList.length) {\n      return (\n        <div>\n          {plugin.projectList.map((projectItem: PluginProjectItem) => (\n            <InstalledPlugin\n              key={projectItem.projectId}\n              organization={organization}\n              plugin={plugin}\n              projectItem={projectItem}\n              onResetConfiguration={this.handleResetConfiguration}\n              onPluginEnableStatusChange={this.handlePluginEnableStatus}\n              trackIntegrationEvent={this.trackIntegrationEvent}\n            />\n          ))}\n        </div>\n      );\n    }\n    return this.renderEmptyConfigurations();\n  }\n}\n\nconst AddButton = styled(Button)`\n  margin-bottom: ${space(1)};\n`;\n\nexport default withOrganization(PluginDetailedView);\n"],"sourceRoot":""}