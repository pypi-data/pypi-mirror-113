from . import COUNT_PRIM as COUNT_PRIM, ENUM_TYPE as ENUM_TYPE, ID_PRIM as ID_PRIM, LOG_PERIOD as LOG_PERIOD, TIMESTAMP_PRIM as TIMESTAMP_PRIM
from .byte_buffer import ByteBuffer as ByteBuffer
from .channel import Channel as Channel
from .channel_frame import ChannelFrame as ChannelFrame
from .channel_framer import ChannelFramer as ChannelFramer, FRAME_TYPES as FRAME_TYPES
from .channel_registry import ChannelRegistry as ChannelRegistry
from .event_queue import EventQueue as EventQueue
from .metered_queue import MeteredQueue as MeteredQueue
from .registry import Registry as Registry
from .time_entity import TimeEntity as TimeEntity
from .type_primitive import TypePrimitive as TypePrimitive
from typing import Any, List, Optional, Tuple
from vtelem.enums.primitive import Primitive as Primitive, get_size as get_size
from vtelem.parsing import parse_data_frame as parse_data_frame, parse_event_frame as parse_event_frame

LOG: Any

class ChannelEnvironment(TimeEntity):
    registries: Any
    channel_registry: Any
    framer: Any
    write_crc: bool
    metrics: Any
    event_queue: Any
    frame_queue: Any
    log_data: Any
    def __init__(self, mtu: int, initial_channels: List[Channel] = ..., metrics_rate: float = ..., init_time: float = ..., app_id_basis: float = ...): ...
    @property
    def app_id(self) -> TypePrimitive: ...
    def handle_new_mtu(self, new_mtu: int) -> None: ...
    def register_base_metrics(self, metrics_rate: float) -> None: ...
    def has_metric(self, name: str) -> bool: ...
    def add_metric(self, name: str, instance: Primitive, track_change: bool = ..., initial: Tuple[Any, Optional[float]] = ...) -> None: ...
    def get_metric(self, name: str) -> Any: ...
    def set_now(self, channel_id: int, data: Any) -> bool: ...
    def get_value(self, chan_id: int) -> Any: ...
    def set_metric_rate(self, name: str, rate: float) -> None: ...
    def set_metric(self, name: str, data: Any, time: float = ...) -> None: ...
    def metric_add(self, name: str, data: Any, time: float = ...) -> None: ...
    def set_channel_rate(self, chan_id: int, rate: float) -> None: ...
    def has_channel(self, name: str) -> bool: ...
    def command_channel_id(self, chan_id: int, value: Any) -> bool: ...
    def command_channel(self, name: str, value: Any) -> bool: ...
    def add_channel(self, name: str, instance: Primitive, rate: float, track_change: bool = ..., initial: Tuple[Any, Optional[float]] = ..., commandable: bool = ...) -> int: ...
    def dispatch(self, time: float, should_log: bool = ...) -> int: ...
    def get_next_frame(self) -> ChannelFrame: ...
    def decode_frame(self, data: bytearray, size: int, expected_id: Optional[TypePrimitive] = ...) -> dict: ...
    def dispatch_events(self, time: float) -> Tuple[int, int]: ...
    def dispatch_data(self, time: float) -> Tuple[int, int]: ...
    def dispatch_now(self, *_, should_log: bool = ..., **__) -> int: ...
