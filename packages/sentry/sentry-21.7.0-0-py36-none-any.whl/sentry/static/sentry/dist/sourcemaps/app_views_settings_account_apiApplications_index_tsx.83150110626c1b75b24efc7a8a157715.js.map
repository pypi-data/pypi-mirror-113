{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/apiApplications/row.tsx","webpack:///./app/views/settings/account/apiApplications/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","Row","loading","state","props","api","app","onRemove","setState","addLoadingMessage","requestPromise","id","method","clearIndicators","addErrorMessage","t","StyledPanelItem","ApplicationNameWrapper","ApplicationName","to","getDynamicText","value","name","fixed","ClientId","clientID","onClick","handleRemove","disabled","icon","Component","PanelItem","space","Link","p","theme","headerFontSize","gray200","fontSizeMedium","ROUTE_PREFIX","addSuccessMessage","router","push","appList","filter","a","action","priority","size","handleCreateApplication","isCircled","isEmpty","length","map","handleRemoveApplication"],"mappings":"60BAQqBA,E,0iBAInB,WACE,MAAO,K,oBAGT,WACE,IAAMC,EAAQC,KAAKC,WACnB,OACE,QAAC,IAAD,CAAeF,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGC,KAAKE,wB,GATJC,KAHWL,E,+jDCUrB,IAYMM,E,wnBACW,CACbC,SAAS,K,kCAGI,WACb,IAAI,EAAKC,MAAMD,QAAf,CAIA,MAA6B,EAAKE,MAA3BC,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,IAAKC,EAAjB,EAAiBA,SAEjB,EAAKC,SACH,CACEN,SAAS,IAFb,iBAIE,qFACEO,UADF,kBAIUJ,EAAIK,eAAJ,4BAAwCJ,EAAIK,GAA5C,KAAmD,CACvDC,OAAQ,WALd,QAQIC,UACAN,EAASD,GATb,iDAWIQ,SAAgBC,OAAE,oDAXtB,8D,uCAiBJ,WACE,IAAOT,EAAOT,KAAKO,MAAZE,IAEP,OACE,QAACU,EAAD,YACE,QAACC,EAAD,YACE,QAACC,EAAD,CAAiBC,GAAE,UAnDR,yBAmDQ,wBAAiCb,EAAIK,GAArC,KAAnB,UACGS,OAAe,CAACC,MAAOf,EAAIgB,KAAMC,MAAO,2BAE3C,QAACC,EAAD,WACGJ,OAAe,CAACC,MAAOf,EAAImB,SAAUF,MAAO,uBAIjD,QAAC,KAAD,CACE,aAAW,SACXG,QAAS7B,KAAK8B,aACdC,SAAU/B,KAAKM,MAAMD,QACrB2B,MAAM,QAAC,KAAD,a,GAnDEC,aAAZ7B,E,kBA0DN,IAAMe,GAAkB,OAAOe,KAAP,qBAAH,YACRC,OAAM,GADE,wBAKff,GAAyB,OAAO,MAAP,qBAAH,2DAIVe,OAAM,GAJI,KAOtBd,GAAkB,OAAOe,IAAP,qBAAH,cACN,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,iBADP,oCAGFJ,OAAM,IAHJ,KAMfR,GAAW,OAAO,MAAP,qBAAH,UACH,SAAAU,GAAC,OAAIA,EAAEC,MAAME,UADV,eAEC,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,iBAFd,KAKd,I,sHC9FA,IAAMC,EAAe,yBAgFrB,E,4pBAhE4B,2FACxB9B,UADwB,kBAIJ,EAAKJ,IAAIK,eAAe,qBAAsB,CAC9DE,OAAQ,SALY,OAIhBN,EAJgB,QAQtBkC,SAAkBzB,OAAE,kCACpB,EAAKX,MAAMqC,OAAOC,KAAlB,UAA0BH,EAA1B,wBAAsDjC,EAAIK,GAA1D,MATsB,iDAWtBG,SAAgBC,OAAE,oDAXI,2D,6CAeA,SAACT,GACzB,EAAKE,SAAS,CACZmC,QAAS,EAAKxC,MAAMwC,QAAQC,QAAO,SAAAC,GAAC,OAAIA,EAAElC,KAAOL,EAAIK,W,6CAzBzD,WACE,MAAO,CAAC,CAAC,UAAW,yB,sBAGtB,WACE,OAAOI,OAAE,sB,wBAwBX,WAAa,WACL+B,GACJ,QAAC,KAAD,CACEC,SAAS,UACTC,KAAK,QACLtB,QAAS7B,KAAKoD,wBACdpB,MAAM,QAAC,KAAD,CAASmB,KAAK,KAAKE,WAAS,IAJpC,UAMGnC,OAAE,4BAIDoC,EAAwC,IAA9BtD,KAAKM,MAAMwC,QAAQS,OAEnC,OACE,0BACE,QAAC,IAAD,CAAoBxD,MAAM,mBAAmBkD,OAAQA,KAErD,QAAC,KAAD,YACE,QAAC,KAAD,WAAc/B,OAAE,uBAEhB,QAAC,IAAD,UACIoC,GAUA,QAAC,IAAD,WACGpC,OAAE,+CAVLlB,KAAKM,MAAMwC,QAAQU,KAAI,SAAA/C,GAAG,OACxB,QAAC,EAAD,CACED,IAAK,EAAKA,IAEVC,IAAKA,EACLC,SAAU,EAAK+C,yBAFVhD,EAAIK,mB,GAxDGhB","file":"chunks/app_views_settings_account_apiApplications_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport {IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {ApiApplication} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\n\nconst ROUTE_PREFIX = '/settings/account/api/';\n\ntype Props = {\n  api: Client;\n  app: ApiApplication;\n  onRemove: (app: ApiApplication) => void;\n};\n\ntype State = {\n  loading: boolean;\n};\n\nclass Row extends Component<Props, State> {\n  state: State = {\n    loading: false,\n  };\n\n  handleRemove = () => {\n    if (this.state.loading) {\n      return;\n    }\n\n    const {api, app, onRemove} = this.props;\n\n    this.setState(\n      {\n        loading: true,\n      },\n      async () => {\n        addLoadingMessage();\n\n        try {\n          await api.requestPromise(`/api-applications/${app.id}/`, {\n            method: 'DELETE',\n          });\n\n          clearIndicators();\n          onRemove(app);\n        } catch (_err) {\n          addErrorMessage(t('Unable to remove application. Please try again.'));\n        }\n      }\n    );\n  };\n\n  render() {\n    const {app} = this.props;\n\n    return (\n      <StyledPanelItem>\n        <ApplicationNameWrapper>\n          <ApplicationName to={`${ROUTE_PREFIX}applications/${app.id}/`}>\n            {getDynamicText({value: app.name, fixed: 'CI_APPLICATION_NAME'})}\n          </ApplicationName>\n          <ClientId>\n            {getDynamicText({value: app.clientID, fixed: 'CI_CLIENT_ID'})}\n          </ClientId>\n        </ApplicationNameWrapper>\n\n        <Button\n          aria-label=\"Remove\"\n          onClick={this.handleRemove}\n          disabled={this.state.loading}\n          icon={<IconDelete />}\n        />\n      </StyledPanelItem>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n`;\n\nconst ApplicationNameWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  margin-right: ${space(1)};\n`;\n\nconst ApplicationName = styled(Link)`\n  font-size: ${p => p.theme.headerFontSize};\n  font-weight: bold;\n  margin-bottom: ${space(0.5)};\n`;\n\nconst ClientId = styled('div')`\n  color: ${p => p.theme.gray200};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default Row;\n","import {RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconAdd} from 'app/icons';\nimport {t} from 'app/locale';\nimport {ApiApplication} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport Row from 'app/views/settings/account/apiApplications/row';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nconst ROUTE_PREFIX = '/settings/account/api/';\n\ntype Props = RouteComponentProps<{}, {}>;\ntype State = {\n  appList: ApiApplication[];\n} & AsyncView['state'];\n\nclass ApiApplications extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['appList', '/api-applications/']];\n  }\n\n  getTitle() {\n    return t('API Applications');\n  }\n\n  handleCreateApplication = async () => {\n    addLoadingMessage();\n\n    try {\n      const app = await this.api.requestPromise('/api-applications/', {\n        method: 'POST',\n      });\n\n      addSuccessMessage(t('Created a new API Application'));\n      this.props.router.push(`${ROUTE_PREFIX}applications/${app.id}/`);\n    } catch (_err) {\n      addErrorMessage(t('Unable to remove application. Please try again.'));\n    }\n  };\n\n  handleRemoveApplication = (app: ApiApplication) => {\n    this.setState({\n      appList: this.state.appList.filter(a => a.id !== app.id),\n    });\n  };\n\n  renderBody() {\n    const action = (\n      <Button\n        priority=\"primary\"\n        size=\"small\"\n        onClick={this.handleCreateApplication}\n        icon={<IconAdd size=\"xs\" isCircled />}\n      >\n        {t('Create New Application')}\n      </Button>\n    );\n\n    const isEmpty = this.state.appList.length === 0;\n\n    return (\n      <div>\n        <SettingsPageHeader title=\"API Applications\" action={action} />\n\n        <Panel>\n          <PanelHeader>{t('Application Name')}</PanelHeader>\n\n          <PanelBody>\n            {!isEmpty ? (\n              this.state.appList.map(app => (\n                <Row\n                  api={this.api}\n                  key={app.id}\n                  app={app}\n                  onRemove={this.handleRemoveApplication}\n                />\n              ))\n            ) : (\n              <EmptyMessage>\n                {t(\"You haven't created any applications yet.\")}\n              </EmptyMessage>\n            )}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default ApiApplications;\n"],"sourceRoot":""}