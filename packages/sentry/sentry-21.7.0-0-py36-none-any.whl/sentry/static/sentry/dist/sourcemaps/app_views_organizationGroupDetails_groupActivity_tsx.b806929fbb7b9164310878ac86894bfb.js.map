{"version":3,"sources":["webpack:///./app/components/commitLink.tsx","webpack:///./app/components/pullRequestLink.tsx","webpack:///./app/components/reprocessedBox.tsx","webpack:///./app/views/organizationGroupDetails/groupActivityItem.tsx","webpack:///./app/views/organizationGroupDetails/groupActivity.tsx"],"names":["SUPPORTED_PROVIDERS","icon","size","providerIds","commitUrl","baseUrl","commitId","inline","repository","t","shortId","getShortCommitHash","providerData","find","provider","includes","id","undefined","url","className","href","external","renderIcon","repo","split","pop","pullRequest","displayId","name","title","externalUrl","ReprocessedBox","isBannerHidden","localStorage","getBannerUniqueId","setState","this","props","reprocessActivity","orgSlug","groupCount","groupId","data","eventCount","oldGroupId","newGroupId","reprocessedEventsRoute","tct","link","to","tn","Number","state","priority","StyledBannerSummary","color","isCircled","renderMessage","StyledIconClose","onClick","handleBannerDismiss","Component","BannerSummary","space","IconClose","GroupActivityItem","activity","projectId","author","issuesLink","type","GroupActivityType","version","tooltipRawVersion","commit","ignoreDuration","duration","seconds","ignoreCount","ignoreWindow","count","ignoreUserCount","ignoreUserWindow","location","destination","fingerprints","length","source","assignee","assigneeType","team","TeamStore","slug","user","MemberListStore","email","getAssignedMessage","issues","renderContent","GroupActivity","createBusy","error","errorJSON","inputId","uniqueId","modelId","oldText","text","api","group","addLoadingMessage","deleteNote","clearIndicators","addErrorMessage","note","createNote","responseJSON","DEFAULT_ERROR_JSON","updateNote","organization","activities","mostRecentActivity","getGroupMostRecentActivity","reprocessingStatus","getGroupReprocessingStatus","me","ConfigStore","projectSlugs","project","noteProps","minHeight","placeholder","Fragment","ReprocessingStatus","StyledReprocessedBox","storageKey","itemKey","onCreate","handleNoteCreate","busy","map","item","authorName","mini","showTime","dateCreated","onDelete","handleNoteDelete","onUpdate","handleNoteUpdate","date","header","params","orgId","withApi","withOrganization"],"mappings":"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","file":"chunks/app_views_organizationGroupDetails_groupActivity_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\n\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Repository} from 'app/types';\nimport {getShortCommitHash} from 'app/utils';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import ExternalLink from 'app/components/links/externalLink';\nimport {IconBitbucket, IconGithub, IconGitlab} from 'app/icons';\nimport {PullRequest, Repository} from 'app/types';\n\nfunction renderIcon(repo: Repository) {\n  if (!repo.provider) {\n    return null;\n  }\n\n  const {id} = repo.provider;\n  const providerId = id.includes(':') ? id.split(':').pop() : id;\n\n  switch (providerId) {\n    case 'github':\n      return <IconGithub size=\"xs\" />;\n    case 'gitlab':\n      return <IconGitlab size=\"xs\" />;\n    case 'bitbucket':\n      return <IconBitbucket size=\"xs\" />;\n    default:\n      return null;\n  }\n}\n\ntype Props = {\n  pullRequest: PullRequest;\n  repository: Repository;\n  inline?: boolean;\n};\n\nconst PullRequestLink = ({pullRequest, repository, inline}: Props) => {\n  const displayId = `${repository.name} #${pullRequest.id}: ${pullRequest.title}`;\n\n  return pullRequest.externalUrl ? (\n    <ExternalLink\n      className={inline ? 'inline-commit' : 'btn btn-default btn-sm'}\n      href={pullRequest.externalUrl}\n    >\n      {renderIcon(repository)}\n      {inline ? '' : ' '}\n      {displayId}\n    </ExternalLink>\n  ) : (\n    <span>{displayId}</span>\n  );\n};\n\nexport default PullRequestLink;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {BannerContainer, BannerSummary} from 'app/components/events/styles';\nimport Link from 'app/components/links/link';\nimport {IconCheckmark, IconClose} from 'app/icons';\nimport {t, tct, tn} from 'app/locale';\nimport space from 'app/styles/space';\nimport {GroupActivityReprocess, Organization} from 'app/types';\nimport localStorage from 'app/utils/localStorage';\n\ntype Props = {\n  reprocessActivity: GroupActivityReprocess;\n  groupCount: number;\n  groupId: string;\n  orgSlug: Organization['slug'];\n  className?: string;\n};\n\ntype State = {\n  isBannerHidden: boolean;\n};\n\nclass ReprocessedBox extends Component<Props, State> {\n  state: State = {\n    isBannerHidden: localStorage.getItem(this.getBannerUniqueId()) === 'true',\n  };\n\n  getBannerUniqueId() {\n    const {reprocessActivity} = this.props;\n    const {id} = reprocessActivity;\n\n    return `reprocessed-activity-${id}-banner-dismissed`;\n  }\n\n  handleBannerDismiss = () => {\n    localStorage.setItem(this.getBannerUniqueId(), 'true');\n    this.setState({isBannerHidden: true});\n  };\n\n  renderMessage() {\n    const {orgSlug, reprocessActivity, groupCount, groupId} = this.props;\n    const {data} = reprocessActivity;\n    const {eventCount, oldGroupId, newGroupId} = data;\n\n    const reprocessedEventsRoute = `/organizations/${orgSlug}/issues/?query=reprocessing.original_issue_id:${oldGroupId}`;\n\n    if (groupCount === 0) {\n      return tct('All events in this issue were moved during reprocessing. [link]', {\n        link: (\n          <Link to={reprocessedEventsRoute}>\n            {tn('See %s new event', 'See %s new events', eventCount)}\n          </Link>\n        ),\n      });\n    }\n\n    return tct('Events in this issue were successfully reprocessed. [link]', {\n      link: (\n        <Link to={reprocessedEventsRoute}>\n          {newGroupId === Number(groupId)\n            ? tn('See %s reprocessed event', 'See %s reprocessed events', eventCount)\n            : tn('See %s new event', 'See %s new events', eventCount)}\n        </Link>\n      ),\n    });\n  }\n\n  render() {\n    const {isBannerHidden} = this.state;\n\n    if (isBannerHidden) {\n      return null;\n    }\n\n    const {className} = this.props;\n\n    return (\n      <BannerContainer priority=\"success\" className={className}>\n        <StyledBannerSummary>\n          <IconCheckmark color=\"green300\" isCircled />\n          <span>{this.renderMessage()}</span>\n          <StyledIconClose\n            color=\"green300\"\n            aria-label={t('Dismiss')}\n            isCircled\n            onClick={this.handleBannerDismiss}\n          />\n        </StyledBannerSummary>\n      </BannerContainer>\n    );\n  }\n}\n\nexport default ReprocessedBox;\n\nconst StyledBannerSummary = styled(BannerSummary)`\n  & > svg:last-child {\n    margin-right: 0;\n    margin-left: ${space(1)};\n  }\n`;\n\nconst StyledIconClose = styled(IconClose)`\n  cursor: pointer;\n`;\n","import * as React from 'react';\n\nimport CommitLink from 'app/components/commitLink';\nimport Duration from 'app/components/duration';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport PullRequestLink from 'app/components/pullRequestLink';\nimport Version from 'app/components/version';\nimport {t, tct, tn} from 'app/locale';\nimport MemberListStore from 'app/stores/memberListStore';\nimport TeamStore from 'app/stores/teamStore';\nimport {\n  GroupActivity,\n  GroupActivityAssigned,\n  GroupActivitySetIgnored,\n  GroupActivityType,\n  Organization,\n  Project,\n  User,\n} from 'app/types';\n\ntype Props = {\n  author: React.ReactNode;\n  activity: GroupActivity;\n  orgSlug: Organization['slug'];\n  projectId: Project['id'];\n};\n\nfunction GroupActivityItem({activity, orgSlug, projectId, author}: Props) {\n  const issuesLink = `/organizations/${orgSlug}/issues/`;\n\n  function getIgnoredMessage(data: GroupActivitySetIgnored['data']) {\n    if (data.ignoreDuration) {\n      return tct('[author] ignored this issue for [duration]', {\n        author,\n        duration: <Duration seconds={data.ignoreDuration * 60} />,\n      });\n    }\n\n    if (data.ignoreCount && data.ignoreWindow) {\n      return tct(\n        '[author] ignored this issue until it happens [count] time(s) in [duration]',\n        {\n          author,\n          count: data.ignoreCount,\n          duration: <Duration seconds={data.ignoreWindow * 60} />,\n        }\n      );\n    }\n\n    if (data.ignoreCount) {\n      return tct('[author] ignored this issue until it happens [count] time(s)', {\n        author,\n        count: data.ignoreCount,\n      });\n    }\n\n    if (data.ignoreUserCount && data.ignoreUserWindow) {\n      return tct(\n        '[author] ignored this issue until it affects [count] user(s) in [duration]',\n        {\n          author,\n          count: data.ignoreUserCount,\n          duration: <Duration seconds={data.ignoreUserWindow * 60} />,\n        }\n      );\n    }\n\n    if (data.ignoreUserCount) {\n      return tct('[author] ignored this issue until it affects [count] user(s)', {\n        author,\n        count: data.ignoreUserCount,\n      });\n    }\n\n    return tct('[author] ignored this issue', {author});\n  }\n\n  function getAssignedMessage(data: GroupActivityAssigned['data']) {\n    let assignee: string | User | undefined = undefined;\n\n    if (data.assigneeType === 'team') {\n      const team = TeamStore.getById(data.assignee);\n      assignee = team ? team.slug : '<unknown-team>';\n\n      return tct('[author] assigned this issue to #[assignee]', {\n        author,\n        assignee,\n      });\n    }\n\n    if (activity.user && activity.assignee === activity.user.id) {\n      return tct('[author] assigned this issue to themselves', {author});\n    }\n\n    assignee = MemberListStore.getById(data.assignee);\n\n    if (typeof assignee === 'object' && assignee?.email) {\n      return tct('[author] assigned this issue to [assignee]', {\n        author,\n        assignee: assignee.email,\n      });\n    }\n\n    return tct('[author] assigned this issue to an unknown user', {author});\n  }\n\n  function renderContent() {\n    switch (activity.type) {\n      case GroupActivityType.NOTE:\n        return tct('[author] left a comment', {author});\n      case GroupActivityType.SET_RESOLVED:\n        return tct('[author] marked this issue as resolved', {author});\n      case GroupActivityType.SET_RESOLVED_BY_AGE:\n        return tct('[author] marked this issue as resolved due to inactivity', {\n          author,\n        });\n      case GroupActivityType.SET_RESOLVED_IN_RELEASE:\n        return activity.data.version\n          ? tct('[author] marked this issue as resolved in [version]', {\n              author,\n              version: (\n                <Version\n                  version={activity.data.version}\n                  projectId={projectId}\n                  tooltipRawVersion\n                />\n              ),\n            })\n          : tct('[author] marked this issue as resolved in the upcoming release', {\n              author,\n            });\n      case GroupActivityType.SET_RESOLVED_IN_COMMIT:\n        return tct('[author] marked this issue as resolved in [version]', {\n          author,\n          version: (\n            <CommitLink\n              inline\n              commitId={activity.data.commit.id}\n              repository={activity.data.commit.repository}\n            />\n          ),\n        });\n      case GroupActivityType.SET_RESOLVED_IN_PULL_REQUEST: {\n        const {data} = activity;\n        const {pullRequest} = data;\n        return tct('[author] marked this issue as resolved in [version]', {\n          author,\n          version: (\n            <PullRequestLink\n              inline\n              pullRequest={pullRequest}\n              repository={pullRequest.repository}\n            />\n          ),\n        });\n      }\n      case GroupActivityType.SET_UNRESOLVED:\n        return tct('[author] marked this issue as unresolved', {author});\n      case GroupActivityType.SET_IGNORED: {\n        const {data} = activity;\n        return getIgnoredMessage(data);\n      }\n      case GroupActivityType.SET_PUBLIC:\n        return tct('[author] made this issue public', {author});\n      case GroupActivityType.SET_PRIVATE:\n        return tct('[author] made this issue private', {author});\n      case GroupActivityType.SET_REGRESSION: {\n        const {data} = activity;\n        return data.version\n          ? tct('[author] marked this issue as a regression in [version]', {\n              author,\n              version: (\n                <Version version={data.version} projectId={projectId} tooltipRawVersion />\n              ),\n            })\n          : tct('[author] marked this issue as a regression', {author});\n      }\n      case GroupActivityType.CREATE_ISSUE: {\n        const {data} = activity;\n        return tct('[author] created an issue on [provider] titled [title]', {\n          author,\n          provider: data.provider,\n          title: <ExternalLink href={data.location}>{data.title}</ExternalLink>,\n        });\n      }\n      case GroupActivityType.UNMERGE_SOURCE: {\n        const {data} = activity;\n        const {destination, fingerprints} = data;\n        return tn(\n          '%2$s migrated %1$s fingerprint to %3$s',\n          '%2$s migrated %1$s fingerprints to %3$s',\n          fingerprints.length,\n          author,\n          destination ? (\n            <Link to={`${issuesLink}${destination.id}`}>{destination.shortId}</Link>\n          ) : (\n            t('a group')\n          )\n        );\n      }\n      case GroupActivityType.UNMERGE_DESTINATION: {\n        const {data} = activity;\n        const {source, fingerprints} = data;\n        return tn(\n          '%2$s migrated %1$s fingerprint from %3$s',\n          '%2$s migrated %1$s fingerprints from %3$s',\n          fingerprints.length,\n          author,\n          source ? (\n            <Link to={`${issuesLink}${source.id}`}>{source.shortId}</Link>\n          ) : (\n            t('a group')\n          )\n        );\n      }\n      case GroupActivityType.FIRST_SEEN:\n        return tct('[author] first saw this issue', {author});\n      case GroupActivityType.ASSIGNED: {\n        const {data} = activity;\n        return getAssignedMessage(data);\n      }\n      case GroupActivityType.UNASSIGNED:\n        return tct('[author] unassigned this issue', {author});\n      case GroupActivityType.MERGE:\n        return tn(\n          '%2$s merged %1$s issue into this issue',\n          '%2$s merged %1$s issues into this issue',\n          activity.data.issues.length,\n          author\n        );\n      case GroupActivityType.REPROCESS: {\n        const {data} = activity;\n        const {oldGroupId, eventCount} = data;\n\n        return tct('[author] reprocessed the events in this issue. [new-events]', {\n          author,\n          ['new-events']: (\n            <Link\n              to={`/organizations/${orgSlug}/issues/?query=reprocessing.original_issue_id:${oldGroupId}`}\n            >\n              {tn('See %s new event', 'See %s new events', eventCount)}\n            </Link>\n          ),\n        });\n      }\n      case GroupActivityType.MARK_REVIEWED: {\n        return tct('[author] marked this issue as reviewed', {\n          author,\n        });\n      }\n      default:\n        return ''; // should never hit (?)\n    }\n  }\n\n  return <React.Fragment>{renderContent()}</React.Fragment>;\n}\n\nexport default GroupActivityItem;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {createNote, deleteNote, updateNote} from 'app/actionCreators/group';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport ActivityAuthor from 'app/components/activity/author';\nimport ActivityItem from 'app/components/activity/item';\nimport Note from 'app/components/activity/note';\nimport NoteInputWithStorage from 'app/components/activity/note/inputWithStorage';\nimport {CreateError} from 'app/components/activity/note/types';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport ReprocessedBox from 'app/components/reprocessedBox';\nimport {DEFAULT_ERROR_JSON} from 'app/constants';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport space from 'app/styles/space';\nimport {\n  Group,\n  GroupActivityReprocess,\n  GroupActivityType,\n  Organization,\n  User,\n} from 'app/types';\nimport {uniqueId} from 'app/utils/guid';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport GroupActivityItem from './groupActivityItem';\nimport {\n  getGroupMostRecentActivity,\n  getGroupReprocessingStatus,\n  ReprocessingStatus,\n} from './utils';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  group: Group;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = {\n  createBusy: boolean;\n  error: boolean;\n  errorJSON: CreateError | null;\n  inputId: string;\n};\n\nclass GroupActivity extends Component<Props, State> {\n  // TODO(dcramer): only re-render on group/activity change\n  state: State = {\n    createBusy: false,\n    error: false,\n    errorJSON: null,\n    inputId: uniqueId(),\n  };\n\n  handleNoteDelete = async ({modelId, text: oldText}) => {\n    const {api, group} = this.props;\n\n    addLoadingMessage(t('Removing comment...'));\n\n    try {\n      await deleteNote(api, group, modelId, oldText);\n      clearIndicators();\n    } catch (_err) {\n      addErrorMessage(t('Failed to delete comment'));\n    }\n  };\n\n  /**\n   * Note: This is nearly the same logic as `app/views/alerts/details/activity`\n   * This can be abstracted a bit if we create more objects that can have activities\n   */\n  handleNoteCreate = async note => {\n    const {api, group} = this.props;\n\n    this.setState({\n      createBusy: true,\n    });\n\n    addLoadingMessage(t('Posting comment...'));\n\n    try {\n      await createNote(api, group, note);\n\n      this.setState({\n        createBusy: false,\n\n        // This is used as a `key` to Note Input so that after successful post\n        // we reset the value of the input\n        inputId: uniqueId(),\n      });\n      clearIndicators();\n    } catch (error) {\n      this.setState({\n        createBusy: false,\n        error: true,\n        errorJSON: error.responseJSON || DEFAULT_ERROR_JSON,\n      });\n      addErrorMessage(t('Unable to post comment'));\n    }\n  };\n\n  handleNoteUpdate = async (note, {modelId, text: oldText}) => {\n    const {api, group} = this.props;\n\n    addLoadingMessage(t('Updating comment...'));\n\n    try {\n      await updateNote(api, group, note, modelId, oldText);\n      clearIndicators();\n    } catch (error) {\n      this.setState({\n        error: true,\n        errorJSON: error.responseJSON || DEFAULT_ERROR_JSON,\n      });\n      addErrorMessage(t('Unable to update comment'));\n    }\n  };\n\n  render() {\n    const {group, organization} = this.props;\n    const {activity: activities, count, id: groupId} = group;\n    const groupCount = Number(count);\n    const mostRecentActivity = getGroupMostRecentActivity(activities);\n    const reprocessingStatus = getGroupReprocessingStatus(group, mostRecentActivity);\n\n    const me = ConfigStore.get('user');\n    const projectSlugs = group && group.project ? [group.project.slug] : [];\n    const noteProps = {\n      minHeight: 140,\n      group,\n      projectSlugs,\n      placeholder: t(\n        'Add details or updates to this event. \\nTag users with @, or teams with #'\n      ),\n    };\n\n    return (\n      <Fragment>\n        {(reprocessingStatus === ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT ||\n          reprocessingStatus === ReprocessingStatus.REPROCESSED_AND_HAS_EVENT) && (\n          <StyledReprocessedBox\n            reprocessActivity={mostRecentActivity as GroupActivityReprocess}\n            groupCount={groupCount}\n            orgSlug={organization.slug}\n            groupId={groupId}\n          />\n        )}\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <div>\n              <ActivityItem author={{type: 'user', user: me}}>\n                {() => (\n                  <NoteInputWithStorage\n                    key={this.state.inputId}\n                    storageKey=\"groupinput:latest\"\n                    itemKey={group.id}\n                    onCreate={this.handleNoteCreate}\n                    busy={this.state.createBusy}\n                    error={this.state.error}\n                    errorJSON={this.state.errorJSON}\n                    {...noteProps}\n                  />\n                )}\n              </ActivityItem>\n\n              {group.activity.map(item => {\n                const authorName = item.user ? item.user.name : 'Sentry';\n\n                if (item.type === GroupActivityType.NOTE) {\n                  return (\n                    <ErrorBoundary mini key={`note-${item.id}`}>\n                      <Note\n                        showTime={false}\n                        text={item.data.text}\n                        modelId={item.id}\n                        user={item.user as User}\n                        dateCreated={item.dateCreated}\n                        authorName={authorName}\n                        onDelete={this.handleNoteDelete}\n                        onUpdate={this.handleNoteUpdate}\n                        {...noteProps}\n                      />\n                    </ErrorBoundary>\n                  );\n                }\n\n                return (\n                  <ErrorBoundary mini key={`item-${item.id}`}>\n                    <ActivityItem\n                      author={{\n                        type: item.user ? 'user' : 'system',\n                        user: item.user ?? undefined,\n                      }}\n                      date={item.dateCreated}\n                      header={\n                        <GroupActivityItem\n                          author={<ActivityAuthor>{authorName}</ActivityAuthor>}\n                          activity={item}\n                          orgSlug={this.props.params.orgId}\n                          projectId={group.project.id}\n                        />\n                      }\n                    />\n                  </ErrorBoundary>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport {GroupActivity};\nexport default withApi(withOrganization(GroupActivity));\n\nconst StyledReprocessedBox = styled(ReprocessedBox)`\n  margin: -${space(3)} -${space(4)} ${space(4)} -${space(4)};\n  z-index: 1;\n`;\n"],"sourceRoot":""}