{"version":3,"sources":["webpack:///./app/utils/marked.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/integrationOrganizationLink.tsx","webpack:///./app/views/organizationIntegrations/addIntegration.tsx"],"names":["safeLinkPattern","safeImagePattern","isSafeHref","href","pattern","test","decodeURIComponent","unescape","SafeRenderer","title","text","out","dompurify","this","options","sanitize","marked","NoParagraphRenderer","renderer","silent","IS_ACCEPTANCE_TEST","NODE_ENV","sanitizedMarked","singleLineRenderer","AsyncView","getTitle","renderComponent","AsyncComponent","IntegrationOrganizationLink","eventName","startSession","state","organization","provider","trackIntegrationEvent","integration_type","integration","key","already_installed","view","orgSlug","organizations","find","org","slug","value","setState","selectedOrgSlug","reloading","undefined","Promise","all","api","requestPromise","integrationSlug","providers","length","Error","trackOpened","addErrorMessage","t","access","includes","data","orgId","props","router","push","id","query","queryParams","trackInstallationStart","window","location","assign","urlEncode","orgProps","getOrgBySlug","avatarSize","displayName","name","avatarProps","consistentWidth","containerProps","valueList","getValue","params","onSelectOrg","installationId","featuresComponents","metadata","features","map","f","featureGate","description","FeatureListItem","dangerouslySetInnerHTML","__html","IntegrationDirectoryFeatures","getIntegrationFeatureGate","disabled","onInstall","onInstallWithInstallationId","addIntegrationWithInstallationId","ButtonWrapper","priority","hasAccess","onClick","installation_id","finishInstallation","FeatureList","Fragment","type","icon","size","tct","InstallLink","className","renderAddButton","label","integation","inline","stacked","required","onChange","placeholder","components","Option","customOption","ValueContainer","customValueContainer","renderBottom","AddIntegration","urlParams","analyticsParams","setupDialog","url","width","height","computeCenteredWindow","left","top","account","modalParams","installUrl","queryString","opts","dialog","open","focus","message","origin","document","source","success","addSuccessMessage","error","addEventListener","didReceiveMessage","removeEventListener","close","screenLeft","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","children","openDialog","React"],"mappings":"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","file":"chunks/app_views_integrationOrganizationLink_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import dompurify from 'dompurify';\nimport marked from 'marked'; // eslint-disable-line no-restricted-imports\n\nimport {IS_ACCEPTANCE_TEST, NODE_ENV} from 'app/constants';\n\n// Only https and mailto, (e.g. no javascript, vbscript, data protocols)\nconst safeLinkPattern = /^(https?:|mailto:)/i;\n\nconst safeImagePattern = /^https?:\\/\\/./i;\n\nfunction isSafeHref(href: string, pattern: RegExp) {\n  try {\n    return pattern.test(decodeURIComponent(unescape(href)));\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Implementation of marked.Renderer which additonally sanitizes URLs.\n */\nclass SafeRenderer extends marked.Renderer {\n  link(href: string, title: string, text: string) {\n    // For a bad link, just return the plain text href\n    if (!isSafeHref(href, safeLinkPattern)) {\n      return href;\n    }\n\n    const out = `<a href=\"${href}\"${title ? ` title=\"${title}\"` : ''}>${text}</a>`;\n    return dompurify.sanitize(out);\n  }\n\n  image(href: string, title: string, text: string) {\n    // For a bad image, return an empty string\n    if (this.options.sanitize && !isSafeHref(href, safeImagePattern)) {\n      return '';\n    }\n\n    return `<img src=\"${href}\" alt=\"${text}\"${title ? ` title=\"${title}\"` : ''} />`;\n  }\n}\n\nclass NoParagraphRenderer extends SafeRenderer {\n  paragraph(text: string) {\n    return text;\n  }\n}\n\nmarked.setOptions({\n  renderer: new SafeRenderer(),\n  sanitize: true,\n\n  // Silence sanitize deprecation warning in test / ci (CI sets NODE_NV\n  // to production, but specifies `CI`).\n  //\n  // [!!] This has the side effect of causing failed markdown content to render\n  //      as a html error, instead of throwing an exception, however none of\n  //      our tests are rendering failed markdown so this is likely a safe\n  //      tradeoff to turn off off the deprecation warning.\n  silent: !!IS_ACCEPTANCE_TEST || NODE_ENV === 'test',\n});\n\nconst sanitizedMarked = (...args: Parameters<typeof marked>) =>\n  dompurify.sanitize(marked(...args));\n\nconst singleLineRenderer = (text: string, options: marked.MarkedOptions = {}) =>\n  sanitizedMarked(text, {...options, renderer: new NoParagraphRenderer()});\n\nexport {singleLineRenderer};\nexport default sanitizedMarked;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {components} from 'react-select';\nimport styled from '@emotion/styled';\nimport {urlEncode} from '@sentry/utils';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport IdBadge from 'app/components/idBadge';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NarrowLayout from 'app/components/narrowLayout';\nimport {IconFlag} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Integration, IntegrationProvider, Organization} from 'app/types';\nimport {IntegrationAnalyticsKey} from 'app/utils/integrationEvents';\nimport {\n  getIntegrationFeatureGate,\n  trackIntegrationEvent,\n} from 'app/utils/integrationUtil';\nimport {singleLineRenderer} from 'app/utils/marked';\nimport AsyncView from 'app/views/asyncView';\nimport AddIntegration from 'app/views/organizationIntegrations/addIntegration';\nimport Field from 'app/views/settings/components/forms/field';\n\n// installationId present for Github flow\ntype Props = RouteComponentProps<{integrationSlug: string; installationId?: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  selectedOrgSlug?: string;\n  organization?: Organization;\n  provider?: IntegrationProvider;\n};\n\nexport default class IntegrationOrganizationLink extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['organizations', '/organizations/']];\n  }\n\n  getTitle() {\n    return t('Choose Installation Organization');\n  }\n\n  trackIntegrationEvent = (\n    eventName: IntegrationAnalyticsKey,\n    startSession?: boolean\n  ) => {\n    const {organization, provider} = this.state;\n    // should have these set but need to make TS happy\n    if (!organization || !provider) {\n      return;\n    }\n\n    trackIntegrationEvent(\n      eventName,\n      {\n        integration_type: 'first_party',\n        integration: provider.key,\n        // We actually don't know if it's installed but neither does the user in the view and multiple installs is possible\n        already_installed: false,\n        view: 'external_install',\n      },\n      organization,\n      {startSession: !!startSession}\n    );\n  };\n\n  trackOpened() {\n    this.trackIntegrationEvent('integrations.integration_viewed', true);\n  }\n\n  trackInstallationStart() {\n    this.trackIntegrationEvent('integrations.installation_start');\n  }\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  get queryParams() {\n    return this.props.location.query;\n  }\n\n  getOrgBySlug = (orgSlug: string): Organization | undefined => {\n    return this.state.organizations.find((org: Organization) => org.slug === orgSlug);\n  };\n\n  onLoadAllEndpointsSuccess() {\n    // auto select the org if there is only one\n    const {organizations} = this.state;\n    if (organizations.length === 1) {\n      this.onSelectOrg({value: organizations[0].slug});\n    }\n  }\n\n  onSelectOrg = async ({value: orgSlug}: {value: string}) => {\n    this.setState({selectedOrgSlug: orgSlug, reloading: true, organization: undefined});\n\n    try {\n      const [organization, {providers}]: [\n        Organization,\n        {providers: IntegrationProvider[]}\n      ] = await Promise.all([\n        this.api.requestPromise(`/organizations/${orgSlug}/`),\n        this.api.requestPromise(\n          `/organizations/${orgSlug}/config/integrations/?provider_key=${this.integrationSlug}`\n        ),\n      ]);\n      // should never happen with a valid provider\n      if (providers.length === 0) {\n        throw new Error('Invalid provider');\n      }\n      this.setState(\n        {organization, reloading: false, provider: providers[0]},\n        this.trackOpened\n      );\n    } catch (_err) {\n      addErrorMessage(t('Failed to retrieve organization or integration details'));\n      this.setState({reloading: false});\n    }\n  };\n\n  hasAccess = () => {\n    const {organization} = this.state;\n    return organization?.access.includes('org:integrations');\n  };\n\n  // used with Github to redirect to the the integration detail\n  onInstallWithInstallationId = (data: Integration) => {\n    const {organization} = this.state;\n    const orgId = organization && organization.slug;\n    this.props.router.push(\n      `/settings/${orgId}/integrations/${data.provider.key}/${data.id}/`\n    );\n  };\n\n  // non-Github redirects to the extension view where the backend will finish the installation\n  finishInstallation = () => {\n    // add the selected org to the query parameters and then redirect back to configure\n    const {selectedOrgSlug} = this.state;\n    const query = {orgSlug: selectedOrgSlug, ...this.queryParams};\n    this.trackInstallationStart();\n    window.location.assign(\n      `/extensions/${this.integrationSlug}/configure/?${urlEncode(query)}`\n    );\n  };\n\n  renderAddButton() {\n    const {installationId} = this.props.params;\n    const {organization, provider} = this.state;\n    // should never happen but we need this check for TS\n    if (!provider || !organization) {\n      return null;\n    }\n    const {features} = provider.metadata;\n\n    // Prepare the features list\n    const featuresComponents = features.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    const {IntegrationDirectoryFeatures} = getIntegrationFeatureGate();\n\n    // Github uses a different installation flow with the installationId as a parameter\n    // We have to wrap our installation button with AddIntegration so we can get the\n    // addIntegrationWithInstallationId callback.\n    // if we don't hve an installationId, we need to use the finishInstallation callback.\n    return (\n      <IntegrationDirectoryFeatures\n        organization={organization}\n        features={featuresComponents}\n      >\n        {({disabled}) => (\n          <AddIntegration\n            provider={provider}\n            onInstall={this.onInstallWithInstallationId}\n            organization={organization}\n          >\n            {addIntegrationWithInstallationId => (\n              <ButtonWrapper>\n                <Button\n                  priority=\"primary\"\n                  disabled={!this.hasAccess() || disabled}\n                  onClick={() =>\n                    installationId\n                      ? addIntegrationWithInstallationId({\n                          installation_id: installationId,\n                        })\n                      : this.finishInstallation()\n                  }\n                >\n                  {t('Install %s', provider.name)}\n                </Button>\n              </ButtonWrapper>\n            )}\n          </AddIntegration>\n        )}\n      </IntegrationDirectoryFeatures>\n    );\n  }\n\n  customOption = orgProps => {\n    const organization = this.getOrgBySlug(orgProps.value);\n    if (!organization) {\n      return null;\n    }\n    return (\n      <components.Option {...orgProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.Option>\n    );\n  };\n\n  customValueContainer = containerProps => {\n    const valueList = containerProps.getValue();\n    // if no value set, we want to return the default component that is rendered\n    if (valueList.length === 0) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    const orgSlug = valueList[0].value;\n    const organization = this.getOrgBySlug(orgSlug);\n    if (!organization) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    return (\n      <components.ValueContainer {...containerProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.ValueContainer>\n    );\n  };\n\n  renderBottom() {\n    const {organization, selectedOrgSlug, provider, reloading} = this.state;\n    const {FeatureList} = getIntegrationFeatureGate();\n    if (reloading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <Fragment>\n        {selectedOrgSlug && organization && !this.hasAccess() && (\n          <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            <p>\n              {tct(\n                `You do not have permission to install integrations in\n                [organization]. Ask an organization owner or manager to\n                visit this page to finish installing this integration.`,\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <InstallLink>{window.location.href}</InstallLink>\n          </Alert>\n        )}\n\n        {provider && organization && this.hasAccess() && FeatureList && (\n          <Fragment>\n            <p>\n              {tct(\n                'The following features will be available for [organization] when installed.',\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <FeatureList\n              organization={organization}\n              features={provider.metadata.features}\n              provider={provider}\n            />\n          </Fragment>\n        )}\n\n        <div className=\"form-actions\">{this.renderAddButton()}</div>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {selectedOrgSlug} = this.state;\n    const options = this.state.organizations.map((org: Organization) => ({\n      value: org.slug,\n      label: org.name,\n    }));\n\n    return (\n      <NarrowLayout>\n        <h3>{t('Finish integration installation')}</h3>\n        <p>\n          {tct(\n            `Please pick a specific [organization:organization] to link with\n            your integration installation of [integation].`,\n            {\n              organization: <strong />,\n              integation: <strong>{this.integrationSlug}</strong>,\n            }\n          )}\n        </p>\n\n        <Field label={t('Organization')} inline={false} stacked required>\n          <SelectControl\n            onChange={this.onSelectOrg}\n            value={selectedOrgSlug}\n            placeholder={t('Select an organization')}\n            options={options}\n            components={{\n              Option: this.customOption,\n              ValueContainer: this.customValueContainer,\n            }}\n          />\n        </Field>\n        {this.renderBottom()}\n      </NarrowLayout>\n    );\n  }\n}\n\nconst InstallLink = styled('pre')`\n  margin-bottom: 0;\n  background: #fbe3e1;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst ButtonWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import * as React from 'react';\nimport * as queryString from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  provider: IntegrationProvider;\n  onInstall: (data: IntegrationWithConfig) => void;\n  account?: string;\n  organization: Organization; // for analytics\n  analyticsParams?: {\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n    already_installed: boolean;\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends React.Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    trackIntegrationEvent(\n      'integrations.installation_start',\n      {\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = this.props.provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (this.props.account) {\n      query.account = this.props.account;\n    }\n\n    if (this.props.modalParams) {\n      query = {...query, ...this.props.modalParams};\n    }\n\n    const installUrl = `${url}?${queryString.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationEvent(\n      'integrations.installation_complete',\n      {\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    addSuccessMessage(t('%s added', this.props.provider.name));\n    this.props.onInstall(data);\n  };\n\n  render() {\n    return this.props.children(this.openDialog);\n  }\n}\n"],"sourceRoot":""}