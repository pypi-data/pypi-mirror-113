{"version":3,"sources":["webpack://sas_log_viewer/./lib/iconImport.js","webpack://sas_log_viewer/./lib/index.js","webpack://sas_log_viewer/./lib/model.js","webpack://sas_log_viewer/./lib/widget.js","webpack://sas_log_viewer/./style/icons/Jupyter_Log.svg"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAoD;AACM;AACnD,uBAAuB,8DAAO;AACrC;AACA,YAAY,iEAAY;AACxB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLY;AAC6C;AACkD;AAC3D;AACO;AACf;AACC;AACc;AACF;AAChB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACO,6BAA6B,oDAAK;AACzC,uBAAuB,gEAAgB;AACvC;AACA;AACA,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAI;AACZ;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,+BAA+B,sEAAoB,EAAE,8BAA8B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAkB;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+CAAU;AACzC,6CAA6C,qBAAqB;AAClE;AACA,iDAAiD,qBAAqB;AACtE,aAAa;AACb,8BAA8B,gEAAc,EAAE,kBAAkB;AAChE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,sCAAsC,sBAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,2EAA2E,gCAAgC;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B,eAAe,iEAAe,EAAE,2DAAS,EAAE,oEAAe;AAC1D;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA,kCAAkC,+DAAa;AAC/C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;AClLwB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,0BAA0B,2DAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,0BAA0B,oBAAoB,kBAAkB,mBAAmB,iBAAiB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,mBAAmB;AAC7F;AACA,uFAAuF,uBAAuB;AAC9G;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,uCAAuC;AACvC,wCAAwC;AACxC,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mBAAmB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChMa;AACkB;AAC6C;AACS;AAC5C;AACW;AACd;AACtC;AACA;AACmC;AACO;AAC1C,oBAAoB,qDAAO;AAC3B;AACA;AACA;AACO,6BAA6B,8DAAY;AAChD;AACA;AACA;AACA,uCAAuC,yDAAU,GAAG;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB;AACnC;AACA,8CAA8C,qEAAc,GAAG,oEAAa;AAC5E,mBAAmB,gDAAmB,SAAS,qCAAqC,6BAA6B,GAAG;AACpH,gBAAgB,gDAAmB,SAAS,0BAA0B;AACtE,oBAAoB,gDAAmB,YAAY;AACnD;AACA;AACA,yBAAyB,EAAE;AAC3B,wBAAwB,gDAAmB,uBAAuB,mCAAmC;AACrG,oBAAoB,gDAAmB,SAAS,sBAAsB;AACtE,gBAAgB,gDAAmB,SAAS,6BAA6B,uCAAuC,gDAAmB,SAAS,SAAS,IAAI,GAAG,EAAE,GAAG;AACjK,oBAAoB,gDAAmB,SAAS,2BAA2B,iCAAiC,EAAE;AAC9G,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,mDAAM;AACtC;AACA;AACA,0BAA0B,+CAAW;AACrC;AACA,4BAA4B,yDAAU,GAAG;AACzC;AACA;AACA,0BAA0B,mDAAU;AACpC,0CAA0C,sDAAS;AACnD,4BAA4B,yDAAO;AACnC;AACA;AACA;AACA;AACA,QAAQ,iEAAoB;AAC5B,QAAQ,iEAAoB;AAC5B,qCAAqC,+DAAa;AAClD;AACA;AACA,aAAa;AACb;AACA,kBAAkB,qEAAc;AAChC;AACA,SAAS;AACT;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA,aAAa;AACb;AACA,kBAAkB,oEAAa;AAC/B;AACA,SAAS;AACT;AACA,kCAAkC,+DAAa;AAC/C;AACA;AACA,aAAa;AACb;AACA,kBAAkB,gEAAS;AAC3B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChHA,iEAAe,qVAAqV,8DAA8D,WAAW,SAAS,cAAc,2TAA2T,E","file":"lib_index_js.78a89d0e89b9e76ed5a9.js","sourcesContent":["import { LabIcon } from '@jupyterlab/ui-components';\nimport sasLogSVGstr from '../style/icons/Jupyter_Log.svg';\nexport const sasLogIcon = new LabIcon({\n    name: 'custom-ui-components:sasLog',\n    svgstr: sasLogSVGstr\n});\n","'use strict';\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { ICommandPalette, CommandToolbarButton, MainAreaWidget, WidgetTracker } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { find } from '@lumino/algorithm';\nimport { Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { AttachedProperty } from '@lumino/properties';\nimport { SASLogView } from './widget';\n/**\n * IDs of the commands added by this extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.newSASlog = 'saslog:new';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The token identifying the JupyterLab plugin.\n */\nexport const ISASLogExtension = new Token('jupyter.extensions.saslog');\nconst saslogProp = new AttachedProperty({\n    create: () => '',\n    name: 'SASLogTarget'\n});\nexport class saslogExtension {\n    /**\n     *\n     */\n    constructor(commands) {\n        this.commands = commands;\n    }\n    /**\n     * Create a new extension object.\n     */\n    createNew(nb, context) {\n        // Add buttons to toolbar\n        const buttons = [];\n        let insertionPoint = -1;\n        find(nb.toolbar.children(), (tbb, index) => {\n            if (tbb.hasClass('jp-Notebook-toolbarCellType')) {\n                insertionPoint = index;\n                return true;\n            }\n            return false;\n        });\n        let i = 1;\n        for (const id of [CommandIDs.newSASlog]) {\n            const button = new CommandToolbarButton({ id, commands: this.commands });\n            button.addClass('jp-saslog-nbtoolbarbutton');\n            if (insertionPoint >= 0) {\n                nb.toolbar.insertItem(insertionPoint + i++, this.commands.label(id), button);\n            }\n            else {\n                nb.toolbar.insertAfter('cellType', this.commands.label(id), button);\n            }\n            buttons.push(button);\n        }\n        return new DisposableDelegate(() => {\n            // Cleanup extension here\n            for (const btn of buttons) {\n                btn.dispose();\n            }\n        });\n    }\n}\n/**\n * Add the main file view commands to the application's command registry.\n */\nfunction addCommands(app, tracker, saslogTracker, palette, menu) {\n    const { commands, shell } = app;\n    /**\n     * Whether there is an active SAS notebook\n     */\n    function hasKernel() {\n        var _a, _b, _c;\n        return (tracker.currentWidget !== null &&\n            ((_c = (_b = (_a = tracker.currentWidget.context.sessionContext) === null || _a === void 0 ? void 0 : _a.session) === null || _b === void 0 ? void 0 : _b.kernel) !== null && _c !== void 0 ? _c : null) !== null &&\n            tracker.currentWidget.sessionContext.prevKernelName == 'sas');\n    }\n    commands.addCommand(CommandIDs.newSASlog, {\n        label: 'Show SAS Log',\n        caption: 'Show the SAS log for the associated notebook',\n        iconClass: 'jp-Icon jp-Icon-16 jp-saslogIcon',\n        isEnabled: hasKernel,\n        execute: args => {\n            var _a, _b, _c;\n            let notebook;\n            if (args.path) {\n                notebook = (_a = tracker.find(nb => nb.context.path === args.path)) !== null && _a !== void 0 ? _a : null;\n            }\n            else {\n                notebook = tracker.currentWidget;\n            }\n            if (!notebook) {\n                return;\n            }\n            const widget = new SASLogView((_c = (_b = notebook.context.sessionContext) === null || _b === void 0 ? void 0 : _b.session) === null || _c === void 0 ? void 0 : _c.kernel);\n            widget.title.label = `SAS Log: ${notebook.title.label}`;\n            notebook.title.changed.connect(() => {\n                widget.title.label = `SAS Log: ${notebook.title.label}`;\n            });\n            const outer = new MainAreaWidget({ content: widget });\n            saslogProp.set(widget, notebook.context.path);\n            notebook.context.pathChanged.connect((_, path) => {\n                saslogProp.set(widget, path);\n                saslogTracker.save(outer);\n            });\n            saslogTracker.add(outer);\n            notebook.context.sessionContext.kernelChanged.connect((_, args) => {\n                widget.model.kernel = args.newValue;\n            });\n            shell.add(outer, 'main', { mode: 'split-right' });\n            if (args['activate'] !== false) {\n                shell.activateById(outer.id);\n            }\n            notebook.disposed.connect(() => {\n                outer.close();\n            });\n        }\n    });\n    palette === null || palette === void 0 ? void 0 : palette.addItem({\n        command: CommandIDs.newSASlog,\n        category: 'Kernel'\n    });\n    menu === null || menu === void 0 ? void 0 : menu.kernelMenu.addGroup([{ command: CommandIDs.newSASlog }]);\n}\n/**\n * Initialization data for the jupyterlab-saslog extension.\n */\nconst extension = {\n    id: 'sas-log-viewer:plugin',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [ICommandPalette, IMainMenu, ILayoutRestorer],\n    provides: ISASLogExtension,\n    activate: async (app, tracker, palette, mainMenu, restorer) => {\n        console.log('SAS log_viewer extension is activated!');\n        const { commands, docRegistry } = app;\n        const extension = new saslogExtension(commands);\n        docRegistry.addWidgetExtension('Notebook', extension);\n        // Recreate views from layout restorer\n        const saslogTracker = new WidgetTracker({\n            namespace: 'saslog'\n        });\n        if (restorer) {\n            void restorer.restore(saslogTracker, {\n                command: CommandIDs.newSASlog,\n                args: widget => ({\n                    path: saslogProp.get(widget.content),\n                    activate: false\n                }),\n                name: widget => saslogProp.get(widget.content),\n                when: tracker.restored\n            });\n        }\n        addCommands(app, tracker, saslogTracker, palette, mainMenu);\n        function refreshNewCommand() {\n            commands.notifyCommandChanged(CommandIDs.newSASlog);\n        }\n        // Update the command registry when the notebook state changes.\n        tracker.currentChanged.connect(refreshNewCommand);\n        let prevWidget = tracker.currentWidget;\n        if (prevWidget) {\n            prevWidget.context.sessionContext.kernelChanged.connect(refreshNewCommand);\n        }\n        tracker.currentChanged.connect(tracker => {\n            if (prevWidget) {\n                prevWidget.context.sessionContext.kernelChanged.disconnect(refreshNewCommand);\n            }\n            prevWidget = tracker.currentWidget;\n            if (prevWidget) {\n                prevWidget.context.sessionContext.kernelChanged.connect(refreshNewCommand);\n            }\n        });\n        return extension;\n    }\n};\nexport default extension;\n","import { VDomModel } from '@jupyterlab/apputils';\nconst showLogCommand = '%showLog';\nconst executeRequestMsgType = 'execute_request';\nconst statusMsgType = 'status';\nconst idleExecutionState = 'idle';\nfunction isHeader(candidate) {\n    return candidate.msg_id !== undefined;\n}\nexport class ThreadIterator {\n    constructor(threads, collapsed) {\n        this._threads = threads;\n        this._collapsed = collapsed;\n        this._index = -1;\n        this._child = null;\n    }\n    iter() {\n        return this;\n    }\n    next() {\n        if (this._child) {\n            const next = this._child.next();\n            if (next !== undefined) {\n                return next;\n            }\n            this._child = null;\n        }\n        // Move to next thread\n        ++this._index;\n        if (this._index >= this._threads.length) {\n            return undefined;\n        }\n        const entry = this._threads[this._index];\n        if (entry.children.length > 0 &&\n            !this._collapsed[entry.args.msg.header.msg_id]) {\n            // Iterate over children after this\n            this._child = new ThreadIterator(entry.children, this._collapsed);\n        }\n        return { args: entry.args, hasChildren: entry.children.length > 0 };\n    }\n    clone() {\n        const r = new ThreadIterator(this._threads, this._collapsed);\n        r._index = this._index;\n        if (this._child) {\n            r._child = this._child.clone();\n        }\n        return r;\n    }\n}\n/**\n * Model for a SAS Log.\n */\nexport class SASLogModel extends VDomModel {\n    constructor(kernel) {\n        super();\n        this.requestStarted = '';\n        this.logRequestStarted = '';\n        this.logStreamObj = {};\n        this._log = [];\n        this._kernel = null;\n        this._messages = {};\n        this._childLUT = {};\n        this._roots = [];\n        this.kernel = kernel !== null && kernel !== void 0 ? kernel : null;\n    }\n    clear() {\n        this._log.splice(0, this._log.length);\n        this._messages = {};\n        this._childLUT = {};\n        this._roots = [];\n        this.logStreamObj = {};\n        this.stateChanged.emit(void 0);\n    }\n    get kernel() {\n        return this._kernel;\n    }\n    set kernel(value) {\n        if (this._kernel) {\n            this._kernel.anyMessage.disconnect(this.onMessage, this);\n        }\n        this._kernel = value;\n        if (this._kernel) {\n            this._kernel.anyMessage.connect(this.onMessage, this);\n        }\n    }\n    get log() {\n        return this._log;\n    }\n    get tree() {\n        return this._roots.map(rootId => {\n            return this.getThread(rootId, false);\n        });\n    }\n    depth(args) {\n        if (args === null) {\n            return -1;\n        }\n        let depth = 0;\n        while ((args = this._findParent(args))) {\n            ++depth;\n        }\n        return depth;\n    }\n    getThread(msgId, ancestors = true) {\n        const args = this._messages[msgId];\n        if (ancestors) {\n            // Work up to root, then work downwards\n            let root = args;\n            let candidate;\n            while ((candidate = this._findParent(root))) {\n                root = candidate;\n            }\n            return this.getThread(root.msg.header.msg_id, false);\n        }\n        const childMessages = this._childLUT[msgId] || [];\n        const childThreads = childMessages.map(childId => {\n            return this.getThread(childId, false);\n        });\n        const thread = {\n            args: this._messages[msgId],\n            children: childThreads\n        };\n        return thread;\n    }\n    onMessage(sender, args) {\n        var _a, _b, _c, _d, _e;\n        const { msg } = args;\n        console.log(`%c ${msg.header.msg_type}`, 'color: purple; font-weight: bold; font-size: 14px;');\n        console.log(msg.content);\n        this._log.push(args);\n        this._messages[msg.header.msg_id] = args;\n        const parent = this._findParent(args);\n        if (parent === null) {\n            this._roots.push(msg.header.msg_id);\n        }\n        else {\n            const header = parent.msg.header;\n            this._childLUT[header.msg_id] = this._childLUT[header.msg_id] || [];\n            this._childLUT[header.msg_id].push(msg.header.msg_id);\n        }\n        // Check if execute_request has started\n        // @ts-ignore\n        if (msg.header.msg_type === executeRequestMsgType && msg.content.code !== showLogCommand && !this.requestStarted) {\n            this.requestStarted = msg.header.msg_id;\n        }\n        // Check if execute_request has ended\n        const execRequestHasEnded = this.requestStarted &&\n            // @ts-ignore\n            ((_a = msg.parent_header) === null || _a === void 0 ? void 0 : _a.msg_id) === this.requestStarted &&\n            // @ts-ignore\n            msg.content.execution_state === idleExecutionState && msg.header.msg_type === statusMsgType;\n        // If execute_request has finished run %showLog command\n        if (execRequestHasEnded) {\n            console.log('%c --------- showLog start -------', 'color: red; font-weight: bold;');\n            // Fetch the log\n            (_b = this.kernel) === null || _b === void 0 ? void 0 : _b.requestExecute({ code: showLogCommand }, true);\n        }\n        // @ts-ignore\n        const isLogRequest = msg.header.msg_type === executeRequestMsgType && ((_c = msg.content) === null || _c === void 0 ? void 0 : _c.code) === showLogCommand;\n        // If it's %showLog execute_request\n        if (isLogRequest) {\n            this.requestStarted = ''; // reset initial execute_request has started flag\n            let id = msg.header.msg_id; // get msg_id\n            this.logRequestStarted = id; // set logRequestStartedId so we can start tracking log streams that will come in future\n            this.logStreamObj[id] = []; // create array in logStreamObj under msg_id key - this key is later used to identify stream msg.parent_header id\n        }\n        // If we have log request stared and msg_type is stream save it in logStreamsObj under parent_header msg_id key\n        if (this.logRequestStarted && msg.header.msg_type === 'stream') {\n            // @ts-ignore\n            let id = (_d = msg.parent_header) === null || _d === void 0 ? void 0 : _d.msg_id;\n            // @ts-ignore\n            this.logStreamObj[id].push(msg.content.text);\n        }\n        // Check if %showLog has ended\n        const logRequestHasEnded = this.logRequestStarted &&\n            // @ts-ignore\n            ((_e = msg.parent_header) === null || _e === void 0 ? void 0 : _e.msg_id) === this.logRequestStarted &&\n            // @ts-ignore\n            msg.content.execution_state === idleExecutionState && msg.header.msg_type === statusMsgType;\n        // If status is Idle and logRequestsStarted this menas that %showLog command has finished\n        // and logRequestStarted has to be cleared\n        if (logRequestHasEnded && this.logRequestStarted) {\n            console.log('%c --------- showLog end -------', 'color: red; font-weight: bold;');\n            this.logRequestStarted = '';\n        }\n        this.stateChanged.emit(undefined);\n    }\n    _findParent(args) {\n        if (isHeader(args.msg.parent_header)) {\n            return this._messages[args.msg.parent_header.msg_id] || null;\n        }\n        return null;\n    }\n}\n","'use strict';\nimport * as React from 'react';\nimport { VDomRenderer, Toolbar, ToolbarButton } from '@jupyterlab/apputils';\nimport { caretDownIcon, caretRightIcon, closeIcon } from '@jupyterlab/ui-components';\nimport { UUID } from '@lumino/coreutils';\nimport { Widget, BoxLayout } from '@lumino/widgets';\nimport { SASLogModel } from './model';\n// import '../style/index.css';\n// import '../style/widget.css'\nimport Convert from 'ansi-to-html';\nimport { sasLogIcon } from './iconImport';\nconst convert = new Convert();\n/**\n * The main view for the SAS log viewer.\n */\nexport class MessageLogView extends VDomRenderer {\n    constructor(model) {\n        super(model);\n        this.collapsedKeys = {};\n        this.id = `saslog-messagelog-${UUID.uuid4()}`;\n        this.addClass('jp-saslog-messagelog');\n    }\n    /**\n     * Render the extension discovery view using the virtual DOM.\n     */\n    render() {\n        const logStreamObj = this.model.logStreamObj;\n        return (React.createElement(\"div\", null, Object.keys(logStreamObj).map((key) => {\n            const collapsed = this.collapsedKeys[key];\n            const collapserIcon = collapsed ? caretRightIcon : caretDownIcon;\n            return React.createElement(\"div\", { key: key, className: `collapsible ${collapsed ? 'collapsed' : ''}` },\n                React.createElement(\"div\", { className: 'log-header' },\n                    React.createElement(\"button\", { className: `collapser`, onClick: () => {\n                            this.collapsedKeys[key] = !this.collapsedKeys[key];\n                            this.update();\n                        } },\n                        React.createElement(collapserIcon.react, { className: 'kspy-collapser-icon' })),\n                    React.createElement(\"div\", { className: 'log-id' }, key)),\n                React.createElement(\"div\", { className: 'log-container' }, logStreamObj[key].map((stream, i) => React.createElement(\"div\", { key: `${key}-${i}` },\n                    React.createElement(\"div\", { dangerouslySetInnerHTML: { __html: convert.toHtml(stream) } })))));\n        })));\n    }\n    collapseAll() {\n        for (const key in this.model.logStreamObj) {\n            this.collapsedKeys[key] = true;\n        }\n        this.update();\n    }\n    expandAll() {\n        this.collapsedKeys = {};\n        this.update();\n    }\n}\n/**\n * The main view for the SAS Log viewer.\n */\nexport class SASLogView extends Widget {\n    constructor(kernel) {\n        super();\n        this._model = new SASLogModel(kernel);\n        this.addClass('jp-saslog-view');\n        this.id = `saslog-${UUID.uuid4()}`;\n        this.title.label = 'SAS Log';\n        this.title.closable = true;\n        this.title.icon = sasLogIcon;\n        const layout = (this.layout = new BoxLayout());\n        this._toolbar = new Toolbar();\n        this._toolbar.addClass('jp-saslog-toolbar');\n        this._messagelog = new MessageLogView(this._model);\n        layout.addWidget(this._toolbar);\n        layout.addWidget(this._messagelog);\n        BoxLayout.setStretch(this._toolbar, 0);\n        BoxLayout.setStretch(this._messagelog, 1);\n        this.collapseAllButton = new ToolbarButton({\n            onClick: () => {\n                this._messagelog.collapseAll();\n            },\n            className: 'jp-saslog-collapseAll',\n            icon: caretRightIcon,\n            tooltip: 'Collapse all threads'\n        });\n        this._toolbar.addItem('collapse-all', this.collapseAllButton);\n        this.expandAllButton = new ToolbarButton({\n            onClick: () => {\n                this._messagelog.expandAll();\n            },\n            className: 'jp-saslog-expandAll',\n            icon: caretDownIcon,\n            tooltip: 'Expand all threads'\n        });\n        this._toolbar.addItem('expand-all', this.expandAllButton);\n        this.clearAllButton = new ToolbarButton({\n            onClick: () => {\n                this._model.clear();\n            },\n            className: 'jp-saslog-clearAll',\n            icon: closeIcon,\n            tooltip: 'Clear all threads'\n        });\n        this._toolbar.addItem('clear-all', this.clearAllButton);\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        if (!this.node.contains(document.activeElement)) {\n            this.collapseAllButton.node.focus();\n        }\n    }\n    get model() {\n        return this._model;\n    }\n}\n","export default \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<!-- Generator: Adobe Illustrator 24.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\n<svg version=\\\"1.1\\\" id=\\\"Log\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t viewBox=\\\"0 0 16 16\\\" style=\\\"enable-background:new 0 0 16 16;\\\" xml:space=\\\"preserve\\\">\\n<style type=\\\"text/css\\\">\\n\\t.st0{fill:none;}\\n\\t.st1{fill:#5D5D5D;}\\n</style>\\n<rect id=\\\"svgToolTipPane\\\" y=\\\"1\\\" class=\\\"st0\\\" width=\\\"14\\\" height=\\\"14\\\"/>\\n<path id=\\\"iconColor\\\" class=\\\"st1\\\" d=\\\"M13,1H3C2.5,1,2,1.5,2,2v12c0,0.6,0.5,1,1,1h10c0.6,0,1-0.4,1-1V2C14,1.5,13.6,1,13,1z M13,14H3\\n\\tV3h10V14z M12,8H4V7h8V8z M12,5H4v1h8V5z M12,9H4v1h8V9z M12,11H4v1h8V11z\\\"/>\\n</svg>\\n\";"],"sourceRoot":""}