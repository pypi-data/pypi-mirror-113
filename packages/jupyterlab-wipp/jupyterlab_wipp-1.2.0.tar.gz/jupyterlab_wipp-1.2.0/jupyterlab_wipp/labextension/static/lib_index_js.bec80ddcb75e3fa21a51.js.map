{"version":3,"sources":["webpack://jupyterlab_wipp/./lib/components/collectionTypeSwitcherWidget.js","webpack://jupyterlab_wipp/./lib/components/searchWidget.js","webpack://jupyterlab_wipp/./lib/components/tableWidget.js","webpack://jupyterlab_wipp/./lib/handler.js","webpack://jupyterlab_wipp/./lib/index.js","webpack://jupyterlab_wipp/./lib/notebookInfoBox.js","webpack://jupyterlab_wipp/./lib/sidebar.js","webpack://jupyterlab_wipp/./lib/wippRegister.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAsD;AACtD;AACA;AACA;AACO,6BAA6B,mDAAM;AAC1C;AACA;AACA,0CAA0C,wDAAW;AACrD,gCAAgC,mDAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxCsD;AACD;AACa;AAClE;AACA;AACA;AACO,2BAA2B,mDAAM;AACxC;AACA;AACA;AACA;AACA,0CAA0C,wDAAW;AACrD;AACA,8BAA8B,mDAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+DAAa;AAC7C;AACA,kBAAkB,gEAAS;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iCAAiC,+DAAa;AAC9C,kBAAkB,iEAAU;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7CyC;AACzC;AACA;AACA;AACO;AACP;AACA;AACA;AACA,QAAQ,0DAAmB,QAAQ;AACnC;AACA;AACA,aAAa,EAAE;AACf,YAAY,0DAAmB;AAC/B;AACA;AACA;AACA,wFAAwF,0DAAmB,UAAU,8DAA8D;AACnL,yFAAyF,0DAAmB,UAAU,+DAA+D;AACrL,KAAK;AACL,YAAY,0DAAmB;AAC/B;AACA,QAAQ,0DAAmB,QAAQ,2DAA2D;AAC9F;AACA;AACA;AACA;AACO;AACP,WAAW,yCAAyC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,0DAAmB;AACjC;AACA,YAAY,0DAAmB,OAAO,gDAAgD;AACtF;AACA;AACA;AACA;AACA,wBAAwB,0DAAmB,QAAQ,8CAA8C;AACjG;AACA;AACA;AACA,yBAAyB,0DAAmB,QAAQ,8CAA8C;AAClG;AACA;AACA;AACA,sBAAsB,0DAAmB,QAAQ,8CAA8C;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,0DAAmB;AAC/B;AACA,QAAQ,0DAAmB;AAC3B,YAAY,0DAAmB,YAAY;AAC3C;AACA;AACA,iBAAiB,EAAE;AACnB,gBAAgB,0DAAmB,UAAU,kDAAkD;AAC/F;AACA;AACO,iCAAiC,4CAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,uDAAuD;AAC9E;AACA;AACA;AACA,6BAA6B,0DAAmB,wBAAwB,yKAAyK;AACjP,mDAAmD,0DAAmB,qBAAqB,kIAAkI;AAC7N;AACA,gBAAgB,0DAAmB;AACnC,YAAY,0DAAmB,WAAW,sCAAsC;AAChF,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB;AACnC;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvH+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gFAA8B;AACpD;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCoD;AACuB;AAC1B;AACO;AACF;AACQ;AACvB;AACc;AACP;AACN;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,2DAAS,EAAE,kEAAgB,EAAE,wEAAmB,EAAE,8DAAS,EAAE,gEAAe;AAC5G;AACA;AACA,QAAQ,oDAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gEAAU;AAC9B;AACA,kCAAkC,8DAAgB;AAClD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,8DAA8D,UAAU,iBAAiB,iBAAiB;AAC1G;AACA,wBAAwB,gEAAU;AAClC;AACA,sCAAsC,uDAAY;AAClD,sCAAsC,iEAAe,EAAE,mBAAmB;AAC1E,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,oCAAoC,iDAAW;AAC/C;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA,SAAS;AACT;AACA,4FAA4F,OAAO;AACnG,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;AC5FmB;AACzC;AACA;AACA;AACA;AACO,+BAA+B,mDAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CuD;AACD;AACQ;AACnB;AACJ;AACuB;AACL;AACkB;AACjD;AAC1B;AACA;AACA;AACO,0BAA0B,mDAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,iCAAiC,qDAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wDAAW;AACnD;AACA,2BAA2B,kEAAY;AACvC;AACA;AACA,6BAA6B,oFAAc;AAC3C;AACA;AACA,sBAAsB,oEAAkB,CAAC,0DAAmB,CAAC,2DAAS,GAAG,4DAA4D,aAAa,0DAAmB,CAAC,uEAAkB,GAAG,iIAAiI;AAC5T;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU,cAAc;AAChC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,oDAAU,kCAAkC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,kDAAkD;AAClD,QAAQ,6EAA2B;AACnC;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjL+C;AACN;AACF;AAChC,2BAA2B,mDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yDAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"lib_index_js.bec80ddcb75e3fa21a51.js","sourcesContent":["import { Widget, PanelLayout } from '@lumino/widgets';\n/**\n * Switcher widget for choosing WIPP Collection type to explore\n */\nexport class SwitcherWidget extends Widget {\n    constructor(switchType) {\n        super();\n        const layout = (this.layout = new PanelLayout());\n        const switchPanel = new Widget();\n        let ul = document.createElement('ul');\n        ul.className = 'wipp-WippSidebar-switcher-list';\n        let li1 = document.createElement('li');\n        li1.className = 'wipp-WippSidebar-switcher-item';\n        this._imageCollectionsButton = document.createElement('button');\n        this._imageCollectionsButton.className = 'selected';\n        this._imageCollectionsButton.value = 'Image Collections';\n        this._imageCollectionsButton.onclick = () => {\n            this._imageCollectionsButton.className = 'selected';\n            this._csvCollectionsButton.className = 'normal';\n            switchType(1);\n        };\n        this._imageCollectionsButton.innerText = 'Image Collections';\n        li1.appendChild(this._imageCollectionsButton);\n        ul.appendChild(li1);\n        let li2 = document.createElement('li');\n        li2.className = 'wipp-WippSidebar-switcher-item';\n        this._csvCollectionsButton = document.createElement('button');\n        this._csvCollectionsButton.className = 'normal';\n        this._csvCollectionsButton.value = 'CSV Collections';\n        this._csvCollectionsButton.onclick = () => {\n            this._csvCollectionsButton.className = 'selected';\n            this._imageCollectionsButton.className = 'normal';\n            switchType(2);\n        };\n        this._csvCollectionsButton.innerText = 'CSV Collections';\n        li2.appendChild(this._csvCollectionsButton);\n        ul.appendChild(li2);\n        switchPanel.node.appendChild(ul);\n        layout.addWidget(switchPanel);\n    }\n}\n","import { Widget, PanelLayout } from '@lumino/widgets';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { searchIcon, closeIcon } from '@jupyterlab/ui-components';\n/**\n * Search widget on top of WIPP Panel.\n */\nexport class SearchWidget extends Widget {\n    constructor(placeholder, updateWidget) {\n        super();\n        this._getPlaceholder = placeholder;\n        this.addClass('wipp-WippSidebar-search-layout');\n        const layout = (this.layout = new PanelLayout());\n        // Search input bar for imageCollections\n        const searchBar = new Widget();\n        searchBar.addClass('wipp-WippSidebar-search');\n        this._searchBar = document.createElement('input');\n        this._searchBar.placeholder = this._getPlaceholder();\n        this._searchBar.oninput = async () => {\n            updateWidget(this._searchBar.value);\n        };\n        searchBar.node.appendChild(this._searchBar);\n        layout.addWidget(searchBar);\n        // Clear search bar button\n        const clearButton = new ToolbarButton({\n            tooltip: 'CLEAR SEARCH BAR:',\n            icon: closeIcon,\n            onClick: async () => {\n                updateWidget(\"\");\n                this._searchBar.value = \"\";\n            }\n        });\n        layout.addWidget(clearButton);\n        // Search button\n        const searchButton = new ToolbarButton({\n            icon: searchIcon,\n            onClick: async () => {\n                updateWidget(this._searchBar.value);\n            }\n        });\n        layout.addWidget(searchButton);\n    }\n    onUpdateRequest() {\n        this._searchBar.value = \"\";\n        this._searchBar.placeholder = this._getPlaceholder();\n    }\n}\n","import React, { Component } from 'react';\n/*\n* React Component for table header\n*/\nexport function TableHeaderComponent(props) {\n    const tableHeaders = props.headers.map((value) => {\n        return (\n        // Column headers are clickable and will sort by that column on click\n        React.createElement(\"th\", { onClick: evt => {\n                props.sortFunction(value[0]);\n                evt.stopPropagation();\n            } },\n            React.createElement(\"span\", null,\n                \" \",\n                value[1],\n                \" \"),\n            (value[0] == props.tableSortedKey && props.tableSortedDirection == true) && React.createElement(\"span\", { className: \"wipp-WippSidebar-table-header-sorted-ascending\" }, \" \"),\n            (value[0] == props.tableSortedKey && props.tableSortedDirection == false) && React.createElement(\"span\", { className: \"wipp-WippSidebar-table-header-sorted-descending\" }, \" \")));\n    });\n    return (React.createElement(\"tr\", null,\n        tableHeaders,\n        React.createElement(\"th\", { className: \"wipp-WippSidebar-table-header-import-column\" })));\n}\n/**\n * React Component for table row containing single imageCollection\n */\nexport function TableRowComponent(props) {\n    const { el, headers, collectionUrl, injectCode } = props;\n    // function to convert imagecollection size to human-readable format\n    const sizeof = (bytes) => {\n        if (bytes == 0) {\n            return \"0.00 B\";\n        }\n        const e = Math.floor(Math.log(bytes) / Math.log(1024));\n        return (bytes / Math.pow(1024, e)).toFixed(0) + ' ' + ' KMGTP'.charAt(e) + 'B';\n    };\n    // Convert creation timestamp to human-readable format\n    const date = new Date(el.creationDate.replace(/\\b\\+0000/g, ''));\n    const allElsTemplates = {\n        name: React.createElement(\"td\", null,\n            \" \",\n            React.createElement(\"a\", { href: collectionUrl + el.id, target: \"_blank\" },\n                \" \",\n                el.name,\n                \" \"),\n            \" \"),\n        numberOfImages: React.createElement(\"td\", { className: \"wipp-WippSidebar-table-element\" },\n            \" \",\n            el.numberOfImages,\n            \" \"),\n        imagesTotalSize: React.createElement(\"td\", { className: \"wipp-WippSidebar-table-element\" },\n            \" \",\n            sizeof(el.imagesTotalSize),\n            \" \"),\n        creationDate: React.createElement(\"td\", { className: \"wipp-WippSidebar-table-element\" },\n            \" \",\n            date.toLocaleString(),\n            \" \"),\n    };\n    const els = headers.map((value) => {\n        if (value[0] == 'name')\n            return allElsTemplates.name;\n        if (value[0] == 'numberOfImages')\n            return allElsTemplates.numberOfImages;\n        if (value[0] == 'imagesTotalSize')\n            return allElsTemplates.imagesTotalSize;\n        if (value[0] == 'creationDate')\n            return allElsTemplates.creationDate;\n    });\n    // return tr element\n    return (React.createElement(\"tr\", null,\n        els,\n        React.createElement(\"td\", null,\n            React.createElement(\"button\", { type: \"button\", className: \"bp3-button bp3-minimal jp-ToolbarButtonComponent minimal jp-Button\", onClick: evt => {\n                    injectCode(el.id);\n                    evt.stopPropagation();\n                } },\n                React.createElement(\"span\", { className: \"wipp-ImportIcon jp-Icon jp-Icon-16\" })))));\n}\n// Generic class for different types of tables (ImageCollection, CsvCollection, etc)\nexport class GenericTableWidget extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableSortedKey: 'creationDate',\n            tableSortedDirection: true\n        };\n    }\n    // Apply sort to WIPP Collections Array\n    // Update the React State\n    sort(key) {\n        let ar = this.props.ar;\n        let direction = this.state.tableSortedDirection;\n        if (key == this.state.tableSortedKey) {\n            direction = !direction;\n        }\n        ar.sort(function (a, b) {\n            const x = a[key];\n            const y = b[key];\n            if (direction === true) {\n                return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n            }\n            else {\n                return ((x > y) ? -1 : ((x < y) ? 1 : 0));\n            }\n        });\n        this.setState({ tableSortedDirection: direction, tableSortedKey: key });\n    }\n    render() {\n        // Generate headers and rows of the table\n        const tableHeaders = React.createElement(TableHeaderComponent, { headers: this.props.tableHeader, tableSortedKey: this.state.tableSortedKey, tableSortedDirection: this.state.tableSortedDirection, sortFunction: key => this.sort(key) });\n        const tableRows = this.props.ar.map((e) => React.createElement(TableRowComponent, { key: e.id, el: e, headers: this.props.tableHeader, collectionUrl: this.props.collectionUrl, injectCode: this.props.codeInjector }));\n        // Assemble headers and rows in the full table\n        return (React.createElement(\"div\", null,\n            React.createElement(\"table\", { className: 'wipp-WippSidebar-table' },\n                React.createElement(\"thead\", null, tableHeaders),\n                React.createElement(\"tbody\", null, tableRows))));\n    }\n}\n;\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'wipp', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            throw new ServerConnection.ResponseError(response, 'Not a JSON response body.');\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ILabShell } from '@jupyterlab/application';\nimport { ICommandPalette, showDialog, Dialog } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { requestAPI } from './handler';\nimport { NotebookInfoForm } from './notebookInfoBox';\nimport { WippRegister } from './wippRegister';\nimport { WippSidebar } from './sidebar';\n/**\n * Initialization data for the jupyterlab_wipp extension.\n */\nconst plugin = {\n    id: 'jupyterlab_wipp:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, IMainMenu, INotebookTracker, IFileBrowserFactory, ILabShell, IConsoleTracker],\n    activate: (app, palette, mainMenu, notebookTracker, factory, labShell, consoleTracker) => {\n        // Run initial health check on backend handlers and check WIPP API is available\n        requestAPI('info')\n            .then(response => {\n            console.debug(response.data);\n            if (response.code == 200) {\n                // Show dialogs and register notebooks\n                function registerByPath(path) {\n                    // Launch dialog form to collect notebook name and description\n                    showDialog({\n                        title: 'Register Notebook in WIPP',\n                        body: new NotebookInfoForm()\n                    }).then(result => {\n                        if (!result.button.accept) {\n                            console.debug('Notebook registering cancelled by user.');\n                            return;\n                        }\n                        const info = result.value;\n                        console.debug(`Form accepted. Name: ${info.name}. Description: ${info.description}`);\n                        // Launch WippRegister dialog\n                        showDialog({\n                            title: 'Waiting for WIPP...',\n                            body: new WippRegister(path, info.name, info.description, info.openInWipp),\n                            buttons: [Dialog.okButton({ label: 'DISMISS' })]\n                        });\n                    });\n                }\n                // Create command for context menu\n                const registerContextMenuCommandID = 'wipp-register-context-menu';\n                app.commands.addCommand(registerContextMenuCommandID, {\n                    label: 'Register in WIPP',\n                    iconClass: 'jp-MaterialIcon jp-LinkIcon',\n                    isVisible: () => factory.tracker.currentWidget.selectedItems().next().type === 'notebook',\n                    execute: () => registerByPath(factory.tracker.currentWidget.selectedItems().next().path)\n                });\n                // Add command to context menu\n                const selectorItem = '.jp-DirListing-item[data-isdir]';\n                app.contextMenu.addItem({\n                    command: registerContextMenuCommandID,\n                    selector: selectorItem\n                });\n                //Create command for main menu\n                const registerFileMenuCommandID = 'wipp-register-menu';\n                app.commands.addCommand(registerFileMenuCommandID, {\n                    label: 'Register in WIPP',\n                    iconClass: 'jp-MaterialIcon jp-LinkIcon',\n                    isVisible: () => notebookTracker.currentWidget !== null && notebookTracker.currentWidget === app.shell.currentWidget,\n                    execute: () => registerByPath(notebookTracker.currentWidget.context.path)\n                });\n                // Add command to the main menu\n                mainMenu.fileMenu.addGroup([\n                    {\n                        command: registerFileMenuCommandID,\n                    }\n                ], 40 /* rank */);\n                // Add command to the palette\n                palette.addItem({\n                    command: registerFileMenuCommandID,\n                    category: 'WIPP',\n                    args: {}\n                });\n                // Create the WIPP sidebar panel\n                const sidebar = new WippSidebar(app, notebookTracker, consoleTracker);\n                sidebar.id = 'wipp-labextension:plugin';\n                sidebar.title.iconClass = 'wipp-WippLogo jp-SideBar-tabIcon';\n                sidebar.title.caption = 'WIPP';\n                // Register sidebar panel with JupyterLab\n                labShell.add(sidebar, 'left', { rank: 200 });\n            }\n        })\n            .catch(reason => {\n            throw new Error(`The jupyterlab_wipp server extension appears to be missing.\\n${reason}`);\n        });\n    }\n};\nexport default plugin;\n","import { Widget } from '@lumino/widgets';\n/**\n * The UI for registering notebook in WIPP\n * Form asks user for notebook name and description\n */\nexport class NotebookInfoForm extends Widget {\n    constructor() {\n        super();\n        this.node.appendChild(this.createBody());\n    }\n    createBody() {\n        const node = document.createElement('div');\n        const text = document.createElement('span');\n        this._name = document.createElement('input');\n        this._description = document.createElement('input');\n        node.className = 'jp-RedirectForm';\n        text.textContent = 'Enter notebook name and description';\n        this._name.placeholder = 'Notebook name';\n        this._description.placeholder = 'Short description';\n        this._openInWipp = document.createElement('input');\n        this._openInWipp.type = \"checkbox\";\n        this._openInWipp.id = \"open-in-wipp\";\n        this._openInWipp.checked = true;\n        this._openInWipp.style.display = 'inline';\n        this._openInWipp.style.width = 'fit-content';\n        const label = document.createElement('label');\n        label.htmlFor = \"open-in-wipp\";\n        label.appendChild(document.createTextNode('Show in WIPP'));\n        node.appendChild(text);\n        node.appendChild(this._name);\n        node.appendChild(this._description);\n        node.appendChild(this._openInWipp);\n        node.appendChild(label);\n        return node;\n    }\n    /**\n     * Returns the input value.\n     */\n    getValue() {\n        let info = {\n            name: this._name.value,\n            description: this._description.value,\n            openInWipp: this._openInWipp.checked\n        };\n        return info;\n    }\n}\n","import { NotebookActions } from '@jupyterlab/notebook';\nimport { Widget, PanelLayout } from '@lumino/widgets';\nimport { ReactWidget, UseSignal } from '@jupyterlab/apputils';\nimport { Signal } from '@lumino/signaling';\nimport { requestAPI } from './handler';\nimport { GenericTableWidget } from './components/tableWidget';\nimport { SearchWidget } from './components/searchWidget';\nimport { SwitcherWidget } from './components/collectionTypeSwitcherWidget';\nimport React from 'react';\n/**\n * Sidebar widget for displaying WIPP image collections.\n */\nexport class WippSidebar extends Widget {\n    /**\n     * Create a new WIPP sidebar.\n     */\n    constructor(app, notebookTracker, consoleTracker) {\n        super();\n        this._collection_url_prefix = '';\n        this._objectArray = [];\n        this._tableHeader = [];\n        this._search_placeholder = '';\n        this.handleClick = () => { };\n        this._valueChanged = new Signal(this);\n        this.app = app;\n        this.notebookTracker = notebookTracker;\n        this.consoleTracker = consoleTracker;\n        this._tableState = {\n            collections_array: this._objectArray,\n            code_injector: this.handleClick,\n            tableHeader: this._tableHeader,\n            collection_url_prefix: this._collection_url_prefix\n        };\n        this.addClass('wipp-WippSidebar');\n        // Call API to get UI URLs\n        this._getUiUrls();\n        // Define Widget layout\n        let layout = (this.layout = new PanelLayout());\n        // Add search bar widget for search WIPP Collections\n        this._search = new SearchWidget(() => this.get_search_placeholder(), (arg0) => this._searchCollections(arg0));\n        layout.addWidget(this._search);\n        // Add buttons to choose type of WIPP Collection\n        this._switcher = new SwitcherWidget((arg0) => this.swithchCollectionType(arg0));\n        layout.addWidget(this._switcher);\n        // Add ReactWidget for table of WIPP Collections\n        this._table = ReactWidget.create(React.createElement(UseSignal, { signal: this._valueChanged, initialArgs: this._tableState }, (_, oa) => React.createElement(GenericTableWidget, { ar: oa.collections_array, codeInjector: oa.code_injector, tableHeader: oa.tableHeader, collectionUrl: oa.collection_url_prefix })));\n        this._table.addClass('wipp-WippSidebar-table-div');\n        layout.addWidget(this._table);\n        this.swithchCollectionType(1);\n    }\n    swithchCollectionType(choice) {\n        let app = this.app;\n        let notebookTracker = this.notebookTracker;\n        let consoleTracker = this.consoleTracker;\n        let file_path_prefix;\n        let file_path_suffix;\n        switch (choice) {\n            case 1: { // Show Image Collections\n                this._search_collection_type_url = 'imageCollections/search';\n                this._get_collection_type_url = 'imageCollections';\n                file_path_prefix = \"'/opt/shared/wipp/collections/\";\n                file_path_suffix = \"/images/'\";\n                // specify table header\n                this._tableHeader = [['name', 'Name'], ['numberOfImages', '# of images'], ['imagesTotalSize', 'Total size'], ['creationDate', 'Creation date']];\n                // set search bar placeholder\n                this._search_placeholder = 'SEARCH IMAGE COLLECTIONS';\n                // set collection UI url prefix\n                this._collection_url_prefix = this._imagescollection_url;\n                break;\n            }\n            case 2: { // Show CSV Collections\n                this._search_collection_type_url = 'csvCollections/search';\n                this._get_collection_type_url = 'csvCollections';\n                file_path_prefix = \"'/opt/shared/wipp/csv-collections/\";\n                file_path_suffix = \"'\";\n                // specify table header\n                this._tableHeader = [['name', 'Name'], ['creationDate', 'Creation date']];\n                // set search bar placeholder\n                this._search_placeholder = 'SEARCH CSV COLLECTIONS';\n                // set collection UI url prefix\n                this._collection_url_prefix = this._csvcollections_url;\n                break;\n            }\n        }\n        // define function for pasting code to current editor\n        this.handleClick = function handleClick(id) {\n            const editor = getCurrentEditor(app, notebookTracker, consoleTracker);\n            if (editor) {\n                insertInputPath(editor, file_path_prefix + id + file_path_suffix);\n            }\n            ;\n        };\n        // Update search bar\n        this._search.update();\n        // Update Table with the new type immediately\n        this._tableState.tableHeader = this._tableHeader;\n        this._tableState.code_injector = this.handleClick;\n        this._tableState.collection_url_prefix = this._collection_url_prefix;\n        this._getAllCollections();\n    }\n    async _getUiUrls() {\n        // Return results of API request\n        requestAPI('ui_urls', {})\n            .then(response => {\n            this._imagescollection_url = response.imagescollection;\n            this._csvcollections_url = response.csvcollections;\n        });\n    }\n    async _getAllCollections() {\n        // Display results of API request\n        requestAPI(this._get_collection_type_url, {})\n            .then((objectArray) => {\n            // Update internal variable\n            this._objectArray = objectArray;\n            this._tableState.collections_array = objectArray;\n            // Send signal for table widget to update data\n            this._valueChanged.emit(this._tableState);\n        });\n    }\n    async _searchCollections(name) {\n        // Make request to the backend API\n        const request = {\n            name: name,\n        };\n        const fullRequest = {\n            method: 'POST',\n            body: JSON.stringify(request)\n        };\n        requestAPI(this._search_collection_type_url, fullRequest)\n            .then((objectArray) => {\n            if (JSON.stringify(objectArray) == JSON.stringify(this._objectArray)) {\n                return;\n            }\n            // Update internal variable\n            this._objectArray = objectArray;\n            this._tableState.collections_array = objectArray;\n            // Send signal for table widget to update data\n            this._valueChanged.emit(this._tableState);\n        });\n    }\n    get_search_placeholder() {\n        return this._search_placeholder;\n    }\n}\n/**\n   * Insert WIPP Collection path code into editor\n   */\nexport function insertInputPath(editor, collection_path) {\n    const cursor = editor.getCursorPosition();\n    const offset = editor.getOffsetAt(cursor);\n    const code = `input_path = ${collection_path}`;\n    editor.model.value.insert(offset, code);\n}\n/**\n * Get the currently focused editor in the application,\n * checking both notebooks and consoles.\n * In the case of a notebook, it creates a new cell above the currently\n * active cell and then returns that.\n */\nexport function getCurrentEditor(app, notebookTracker, consoleTracker) {\n    // Get a handle on the most relevant editor,\n    // whether it is attached to a notebook or a console.\n    let current = app.shell.currentWidget;\n    let editor;\n    if (current && notebookTracker.has(current)) { //when editing notebook\n        NotebookActions.insertAbove(current.content);\n        const cell = current.content.activeCell;\n        if (cell) {\n            cell.model.metadata.set('tags', [\"parameters\"]); //set special metadata for Notebook executor plugin\n        }\n        editor = cell && cell.editor;\n    }\n    else if (current && consoleTracker.has(current)) { //when using code console\n        const cell = current.console.promptCell;\n        editor = cell && cell.editor;\n    }\n    return editor;\n}\n","import { Spinner } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\nimport { requestAPI } from './handler';\nexport class WippRegister extends Widget {\n    /**\n   * Instantiates the dialog and makes call to WIPP API.\n   */\n    constructor(path, name, description, openInWipp) {\n        super();\n        // Copy variables\n        this.path = path;\n        this.name = name;\n        this.description = description;\n        this.openInWipp = openInWipp;\n        // Create dialog body\n        this.body = this.createBody();\n        this.node.appendChild(this.body);\n        // Add spinner to show while requesting API\n        this.spinner = new Spinner();\n        this.node.appendChild(this.spinner.node);\n        // Make API request\n        this.registerNotebook();\n    }\n    /**\n     * Executes the backend service API to register notebook in WIPP and handles response and errors.\n     */\n    registerNotebook() {\n        // Make request to the backend API\n        var request = {\n            path: this.path,\n            name: this.name,\n            description: this.description\n        };\n        var fullRequest = {\n            method: 'POST',\n            body: JSON.stringify(request)\n        };\n        requestAPI('register', fullRequest)\n            .then(response => {\n            this.handleResponse(response);\n        })\n            .catch(() => this.handleError());\n    }\n    handleResponse(response) {\n        // Remove spinner from dialog\n        this.node.removeChild(this.spinner.node);\n        this.spinner.dispose();\n        // Throw exception for API error\n        if (response.code !== 200) {\n            this.handleError(response.error);\n        }\n        else {\n            this.handleSuccess();\n        }\n        const info = response.info;\n        // Open registered notebook in WIPP\n        if (this.openInWipp) {\n            window.open(info.url + info.id, '_blank');\n        }\n    }\n    handleSuccess() {\n        const label = document.createElement('label');\n        const text = document.createElement('span');\n        text.textContent = `Notebook '${this.name}' successfully registered in WIPP`;\n        label.appendChild(text);\n        this.body.appendChild(label);\n    }\n    handleError(message = 'Unexpected failure. Please check your Jupyter server logs for more details.') {\n        const label = document.createElement('label');\n        const text = document.createElement('span');\n        text.textContent = `Notebook '${this.name}' registering in WIPP failed with error:`;\n        const errorMessage = document.createElement('span');\n        errorMessage.textContent = message;\n        errorMessage.setAttribute('style', 'background-color:var(--jp-rendermime-error-background)');\n        label.appendChild(text);\n        label.appendChild(document.createElement('p'));\n        label.appendChild(errorMessage);\n        this.body.appendChild(label);\n    }\n    createBody() {\n        const node = document.createElement('div');\n        node.className = 'jp-RedirectForm';\n        return node;\n    }\n}\n"],"sourceRoot":""}