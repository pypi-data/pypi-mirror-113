{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/dashboardsV2/index.tsx","webpack:///./app/views/dashboardsV2/orgDashboards.tsx","webpack:///./app/views/dashboardsV2/view.tsx"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","DashboardsV2Container","this","props","organization","params","api","location","features","includes","DashboardBasicFeature","dashboard","dashboards","error","reloadData","initialState","DashboardState","React","withApi","withOrganization","OrgDashboards","loading","reloading","errors","selectedDashboard","prevProps","isEqual","dashboardId","remountComponent","url","slug","endpoints","push","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","dashboard_id","state","Array","isArray","stateKey","data","length","browserHistory","pathname","query","getDashboards","bind","Object","values","find","resp","status","t","AsyncComponent","ViewEditDashboard","hookName","renderDisabled","type"],"mappings":"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","file":"chunks/app_views_dashboardsV2_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'app/api';\nimport NotFound from 'app/components/errors/notFound';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState} from './types';\nimport {DashboardBasicFeature} from './view';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  api: Client;\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nclass DashboardsV2Container extends React.Component<Props> {\n  render() {\n    const {organization, params, api, location, children} = this.props;\n\n    if (organization.features.includes('dashboards-edit')) {\n      return children;\n    }\n    return (\n      <DashboardBasicFeature organization={organization}>\n        <OrgDashboards\n          api={api}\n          location={location}\n          params={params}\n          organization={organization}\n        >\n          {({dashboard, dashboards, error, reloadData}) => {\n            return error ? (\n              <NotFound />\n            ) : dashboard ? (\n              <DashboardDetail\n                {...this.props}\n                initialState={DashboardState.VIEW}\n                dashboard={dashboard}\n                dashboards={dashboards}\n                reloadData={reloadData}\n              />\n            ) : (\n              <LoadingIndicator />\n            );\n          }}\n        </OrgDashboards>\n      </DashboardBasicFeature>\n    );\n  }\n}\n\nexport default withApi(withOrganization(DashboardsV2Container));\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'app/api';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport NotFound from 'app/components/errors/notFound';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\nimport {DashboardDetails, DashboardListItem} from './types';\n\ntype OrgDashboardsChildrenProps = {\n  dashboard: DashboardDetails | null;\n  dashboards: DashboardListItem[];\n  error: boolean;\n  reloadData: () => void;\n};\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  params: {orgId: string; dashboardId?: string};\n  location: Location;\n  children: (props: OrgDashboardsChildrenProps) => React.ReactNode;\n};\n\ntype State = {\n  // endpoint response\n  dashboards: DashboardListItem[] | null;\n  /**\n   * The currently selected dashboard.\n   */\n  selectedDashboard: DashboardDetails | null;\n} & AsyncComponent['state'];\n\nclass OrgDashboards extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n\n    dashboards: [],\n    selectedDashboard: null,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.params.dashboardId, this.props.params.dashboardId)) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const url = `/organizations/${organization.slug}/dashboards/`;\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [['dashboards', url]];\n\n    if (params.dashboardId) {\n      endpoints.push(['selectedDashboard', `${url}${params.dashboardId}/`]);\n      trackAnalyticsEvent({\n        eventKey: 'dashboards2.view',\n        eventName: 'Dashboards2: View dashboard',\n        organization_id: parseInt(this.props.organization.id, 10),\n        dashboard_id: params.dashboardId,\n      });\n    }\n\n    return endpoints;\n  }\n\n  getDashboards(): DashboardListItem[] {\n    const {dashboards} = this.state;\n\n    return Array.isArray(dashboards) ? dashboards : [];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    const {params, organization, location} = this.props;\n    if (params.dashboardId || stateKey === 'selectedDashboard') {\n      return;\n    }\n\n    // If we don't have a selected dashboard, and one isn't going to arrive\n    // we can redirect to the first dashboard in the list.\n    const dashboardId = data.length ? data[0].id : 'default-overview';\n    const url = `/organizations/${organization.slug}/dashboard/${dashboardId}/`;\n    browserHistory.replace({\n      pathname: url,\n      query: {\n        ...location.query,\n      },\n    });\n  }\n\n  renderBody() {\n    const {children} = this.props;\n    const {selectedDashboard, error} = this.state;\n\n    return children({\n      error,\n      dashboard: selectedDashboard,\n      dashboards: this.getDashboards(),\n      reloadData: this.reloadData.bind(this),\n    });\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n\n    return super.renderError(error, true, true);\n  }\n\n  renderComponent() {\n    const {organization, location} = this.props;\n\n    if (!organization.features.includes('dashboards-basic')) {\n      // Redirect to Dashboards v1\n      browserHistory.replace({\n        pathname: `/organizations/${organization.slug}/dashboards/`,\n        query: {\n          ...location.query,\n        },\n      });\n      return null;\n    }\n\n    return (\n      <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n        {super.renderComponent()}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default OrgDashboards;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'app/api';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport NotFound from 'app/components/errors/notFound';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState} from './types';\n\ntype Props = RouteComponentProps<{orgId: string; dashboardId: string}, {}> & {\n  api: Client;\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nfunction ViewEditDashboard(props: Props) {\n  const {organization, params, api, location} = props;\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, reloadData}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <DashboardDetail\n              {...props}\n              initialState={DashboardState.VIEW}\n              dashboard={dashboard}\n              dashboards={dashboards}\n              reloadData={reloadData}\n            />\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withApi(withOrganization(ViewEditDashboard));\n\ntype FeatureProps = {\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nexport const DashboardBasicFeature = ({organization, children}: FeatureProps) => {\n  const renderDisabled = () => (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-page\"\n      features={['organizations:dashboards-basic']}\n      organization={organization}\n      renderDisabled={renderDisabled}\n    >\n      {children}\n    </Feature>\n  );\n};\n"],"sourceRoot":""}