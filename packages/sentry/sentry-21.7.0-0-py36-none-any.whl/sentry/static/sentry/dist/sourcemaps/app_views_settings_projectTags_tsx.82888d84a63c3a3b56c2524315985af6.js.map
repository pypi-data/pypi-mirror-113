{"version":3,"sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectTags.tsx"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","PermissionAlert","access","props","hasAccess","type","icon","size","t","ProjectTags","key","idx","params","projectId","orgId","api","requestPromise","method","tags","state","splice","setState","error","loading","routeTitleGen","isEmpty","length","Fragment","tct","link","href","map","enabled","canDelete","TagPanelItem","TagName","Actions","message","onConfirm","handleDelete","disabled","PanelItem","space"],"mappings":"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","file":"chunks/app_views_settings_projectTags_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Access from 'app/components/acl/access';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {IconDelete} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {TagWithTopValues} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\n\ntype Props = RouteComponentProps<{projectId: string; orgId: string}, {}> &\n  AsyncView['props'];\n\ntype State = {\n  tags: Array<TagWithTopValues>;\n} & AsyncView['state'];\n\nclass ProjectTags extends AsyncView<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      tags: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {projectId, orgId} = this.props.params;\n    return [['tags', `/projects/${orgId}/${projectId}/tags/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Tags'), projectId, false);\n  }\n\n  handleDelete = (key: TagWithTopValues['key'], idx: number) => async () => {\n    const {params} = this.props;\n    const {projectId, orgId} = params;\n\n    try {\n      await this.api.requestPromise(`/projects/${orgId}/${projectId}/tags/${key}/`, {\n        method: 'DELETE',\n      });\n\n      const tags = [...this.state.tags];\n      tags.splice(idx, 1);\n      this.setState({tags});\n    } catch (error) {\n      this.setState({error: true, loading: false});\n    }\n  };\n\n  renderBody() {\n    const {tags} = this.state;\n    const isEmpty = !tags || !tags.length;\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Tags')} />\n        <PermissionAlert />\n\n        <TextBlock>\n          {tct(\n            `Each event in Sentry may be annotated with various tags (key and value pairs).\n                 Learn how to [link:add custom tags].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=/enriching-events/tags/\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <Panel>\n          <PanelHeader>{t('Tags')}</PanelHeader>\n          <PanelBody>\n            {isEmpty ? (\n              <EmptyMessage>\n                {tct('There are no tags, [link:learn how to add tags]', {\n                  link: (\n                    <ExternalLink href=\"https://docs.sentry.io/product/sentry-basics/guides/enrich-data/\" />\n                  ),\n                })}\n              </EmptyMessage>\n            ) : (\n              <Access access={['project:write']}>\n                {({hasAccess}) =>\n                  tags.map(({key, canDelete}, idx) => {\n                    const enabled = canDelete && hasAccess;\n                    return (\n                      <TagPanelItem key={key} data-test-id=\"tag-row\">\n                        <TagName>{key}</TagName>\n                        <Actions>\n                          <Confirm\n                            message={t('Are you sure you want to remove this tag?')}\n                            onConfirm={this.handleDelete(key, idx)}\n                            disabled={!enabled}\n                          >\n                            <Button\n                              size=\"xsmall\"\n                              title={\n                                enabled\n                                  ? t('Remove tag')\n                                  : hasAccess\n                                  ? t('This tag cannot be deleted.')\n                                  : t('You do not have permission to remove tags.')\n                              }\n                              icon={<IconDelete size=\"xs\" />}\n                              data-test-id=\"delete\"\n                            />\n                          </Confirm>\n                        </Actions>\n                      </TagPanelItem>\n                    );\n                  })\n                }\n              </Access>\n            )}\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nexport default ProjectTags;\n\nconst TagPanelItem = styled(PanelItem)`\n  padding: 0;\n  align-items: center;\n`;\n\nconst TagName = styled('div')`\n  flex: 1;\n  padding: ${space(2)};\n`;\n\nconst Actions = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(2)};\n`;\n"],"sourceRoot":""}