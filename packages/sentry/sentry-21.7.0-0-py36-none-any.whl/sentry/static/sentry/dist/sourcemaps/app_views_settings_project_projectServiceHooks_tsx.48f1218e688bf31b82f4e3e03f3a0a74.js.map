{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHooks.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","ServiceHookRow","orgId","projectId","hook","onToggleActive","label","Link","to","id","value","url","help","events","length","join","t","isActive","status","size","toggle","ProjectServiceHooks","props","params","hookList","state","addLoadingMessage","api","request","method","data","success","clearIndicators","setState","map","h","error","addErrorMessage","Fragment","type","icon","bind","body","renderResults","renderEmpty","access","Set","organization","action","has","priority","isCircled","withOrganization"],"mappings":"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","file":"chunks/app_views_settings_project_projectServiceHooks_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {Link, WithRouterProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport Switch from 'app/components/switchButton';\nimport Truncate from 'app/components/truncate';\nimport {IconAdd, IconFlag} from 'app/icons';\nimport {t} from 'app/locale';\nimport {LightWeightOrganization, ServiceHook} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype RowProps = {\n  orgId: string;\n  projectId: string;\n  hook: ServiceHook;\n  onToggleActive: () => void;\n};\n\nfunction ServiceHookRow({orgId, projectId, hook, onToggleActive}: RowProps) {\n  return (\n    <Field\n      label={\n        <Link\n          data-test-id=\"project-service-hook\"\n          to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}\n        >\n          <Truncate value={hook.url} />\n        </Link>\n      }\n      help={\n        <small>\n          {hook.events && hook.events.length !== 0 ? (\n            hook.events.join(', ')\n          ) : (\n            <em>{t('no events configured')}</em>\n          )}\n        </small>\n      }\n    >\n      <Switch isActive={hook.status === 'active'} size=\"lg\" toggle={onToggleActive} />\n    </Field>\n  );\n}\n\ntype Props = WithRouterProps<{orgId: string; projectId: string}, {}> & {\n  organization: LightWeightOrganization;\n};\n\ntype State = {\n  hookList: null | ServiceHook[];\n} & AsyncView['state'];\n\nclass ProjectServiceHooks extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['hookList', `/projects/${orgId}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = (hook: ServiceHook) => {\n    const {orgId, projectId} = this.props.params;\n    const {hookList} = this.state;\n    if (!hookList) {\n      return;\n    }\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hook.id}/`, {\n      method: 'PUT',\n      data: {\n        isActive: hook.status !== 'active',\n      },\n      success: data => {\n        clearIndicators();\n        this.setState({\n          hookList: hookList.map(h => {\n            if (h.id === data.id) {\n              return {\n                ...h,\n                ...data,\n              };\n            }\n            return h;\n          }),\n        });\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" icon={<IconFlag size=\"md\" />}>\n            {t(\n              'Service Hooks are an early adopter preview feature and will change in the future.'\n            )}\n          </PanelAlert>\n          {this.state.hookList?.map(hook => (\n            <ServiceHookRow\n              key={hook.id}\n              orgId={orgId}\n              projectId={projectId}\n              hook={hook}\n              onToggleActive={this.onToggleActive.bind(this, hook)}\n            />\n          ))}\n        </PanelBody>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {hookList} = this.state;\n    const body =\n      hookList && hookList.length > 0 ? this.renderResults() : this.renderEmpty();\n\n    const {orgId, projectId} = this.props.params;\n    const access = new Set(this.props.organization.access);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${orgId}/projects/${projectId}/hooks/new/`}\n                size=\"small\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(ProjectServiceHooks);\n"],"sourceRoot":""}