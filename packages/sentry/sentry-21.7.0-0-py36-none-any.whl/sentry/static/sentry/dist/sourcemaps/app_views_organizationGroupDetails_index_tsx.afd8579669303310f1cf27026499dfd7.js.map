{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/organizationGroupDetails/constants.tsx","webpack:///./app/views/organizationGroupDetails/groupDetails.tsx","webpack:///./app/views/organizationGroupDetails/index.tsx"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","ERROR_TYPES","GroupDetails","initialState","setState","fetchData","state","loadingGroup","loading","loadingEvent","group","status","ReprocessingStatus","api","props","requestPromise","groupDetailsEndpoint","query","getGroupQuery","updatedGroup","reprocessingNewRoute","getReprocessingNewRoute","ReactRouter","handleRequestError","GroupStore","itemIds","onGroupChange","undefined","this","updateReprocessingProgress","prevProps","prevState","isGlobalSelectionReady","pathname","canLoadEventEarly","eventId","getEvent","callIfFunction","listener","interval","clearInterval","error","eventError","errorType","project","includes","groupId","environments","orgSlug","orgId","projectId","slug","fetchGroupEvent","event","Sentry","organization","length","currentTab","baseUrl","isEventRoute","id","hasReprocessingV2Feature","setInterval","refetchGroup","features","data","nextGroupId","reprocessingStatus","getGroupReprocessingStatus","getCurrentRouteInfo","TAB","environment","expand","collapse","getFetchDataRequestErrorType","groupReleaseEndpoint","releases","eventPromise","groupPromise","Promise","all","fetchGroupReleases","markEventSeen","locationWithProject","_allp","Error","has","stale","defaultTitle","title","getTitle","message","getMessage","eventDetails","projects","projectSlug","find","proj","t","onRetry","remountComponent","children","groupReprocessingStatus","childProps","React","isError","renderError","slugs","initiallyLoaded","fetchError","renderContent","skipLoadLastUsed","forceProject","showDateSelector","shouldForceProject","lockedMessageSubject","showIssueStreamLink","showProjectSettingsLink","renderPageContent","SentryTypes","PropTypes","withApi","OrganizationGroupDetails","startMetricCollection","analytics","group_id","parseInt","org_id","startType","isLightweightOrganization","metric","name","start_type","selection","withOrganization","withGlobalSelection"],"mappings":"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","file":"chunks/app_views_organizationGroupDetails_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","export const ERROR_TYPES = {\n  GROUP_NOT_FOUND: 'GROUP_NOT_FOUND',\n  MISSING_MEMBERSHIP: 'MISSING_MEMBERSHIP',\n} as const;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\nimport * as ReactRouter from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport PropTypes from 'prop-types';\n\nimport {Client} from 'app/api';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport MissingProjectMembership from 'app/components/projects/missingProjectMembership';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport GroupStore from 'app/stores/groupStore';\nimport {PageContent} from 'app/styles/organization';\nimport {AvatarProject, Group, Organization, Project} from 'app/types';\nimport {Event} from 'app/types/event';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {getMessage, getTitle} from 'app/utils/events';\nimport Projects from 'app/utils/projects';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withApi from 'app/utils/withApi';\n\nimport {ERROR_TYPES} from './constants';\nimport GroupHeader, {TAB} from './header';\nimport {\n  fetchGroupEvent,\n  getGroupReprocessingStatus,\n  markEventSeen,\n  ReprocessingStatus,\n} from './utils';\n\ntype Error = typeof ERROR_TYPES[keyof typeof ERROR_TYPES] | null;\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  environments: string[];\n  children: React.ReactNode;\n  isGlobalSelectionReady: boolean;\n} & ReactRouter.RouteComponentProps<\n  {orgId: string; groupId: string; eventId?: string},\n  {}\n>;\n\ntype State = {\n  group: Group | null;\n  loading: boolean;\n  loadingEvent: boolean;\n  loadingGroup: boolean;\n  error: boolean;\n  eventError: boolean;\n  errorType: Error;\n  project: null | (Pick<Project, 'id' | 'slug'> & Partial<Pick<Project, 'platform'>>);\n  event?: Event;\n};\n\nclass GroupDetails extends React.Component<Props, State> {\n  static childContextTypes = {\n    group: SentryTypes.Group,\n    location: PropTypes.object,\n  };\n\n  state = this.initialState;\n\n  getChildContext() {\n    return {\n      group: this.state.group,\n      location: this.props.location,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n    this.updateReprocessingProgress();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (\n      prevProps.isGlobalSelectionReady !== this.props.isGlobalSelectionReady ||\n      prevProps.location.pathname !== this.props.location.pathname\n    ) {\n      this.fetchData();\n    }\n\n    if (\n      (!this.canLoadEventEarly(prevProps) && !prevState?.group && this.state.group) ||\n      (prevProps.params?.eventId !== this.props.params?.eventId && this.state.group)\n    ) {\n      this.getEvent(this.state.group);\n    }\n  }\n\n  componentWillUnmount() {\n    GroupStore.reset();\n    callIfFunction(this.listener);\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  get initialState(): State {\n    return {\n      group: null,\n      loading: true,\n      loadingEvent: true,\n      loadingGroup: true,\n      error: false,\n      eventError: false,\n      errorType: null,\n      project: null,\n    };\n  }\n\n  remountComponent = () => {\n    this.setState(this.initialState);\n    this.fetchData();\n  };\n\n  canLoadEventEarly(props: Props) {\n    return !props.params.eventId || ['oldest', 'latest'].includes(props.params.eventId);\n  }\n\n  get groupDetailsEndpoint() {\n    return `/issues/${this.props.params.groupId}/`;\n  }\n\n  get groupReleaseEndpoint() {\n    return `/issues/${this.props.params.groupId}/first-last-release/`;\n  }\n\n  async getEvent(group?: Group) {\n    if (group) {\n      this.setState({loadingEvent: true, eventError: false});\n    }\n\n    const {params, environments, api} = this.props;\n    const orgSlug = params.orgId;\n    const groupId = params.groupId;\n    const eventId = params?.eventId || 'latest';\n    const projectId = group?.project?.slug;\n    try {\n      const event = await fetchGroupEvent(\n        api,\n        orgSlug,\n        groupId,\n        eventId,\n        environments,\n        projectId\n      );\n      this.setState({event, loading: false, eventError: false, loadingEvent: false});\n    } catch (err) {\n      // This is an expected error, capture to Sentry so that it is not considered as an unhandled error\n      Sentry.captureException(err);\n      this.setState({eventError: true, loading: false, loadingEvent: false});\n    }\n  }\n\n  getCurrentRouteInfo(group: Group): {currentTab: keyof typeof TAB; baseUrl: string} {\n    const {routes, organization} = this.props;\n    const {event} = this.state;\n\n    // All the routes under /organizations/:orgId/issues/:groupId have a defined props\n    const {currentTab, isEventRoute} = routes[routes.length - 1].props as {\n      currentTab: keyof typeof TAB;\n      isEventRoute: boolean;\n    };\n\n    const baseUrl =\n      isEventRoute && event\n        ? `/organizations/${organization.slug}/issues/${group.id}/events/${event.id}/`\n        : `/organizations/${organization.slug}/issues/${group.id}/`;\n\n    return {currentTab, baseUrl};\n  }\n\n  updateReprocessingProgress() {\n    const hasReprocessingV2Feature = this.hasReprocessingV2Feature();\n    if (!hasReprocessingV2Feature) {\n      return;\n    }\n    this.interval = setInterval(this.refetchGroup, 30000);\n  }\n\n  hasReprocessingV2Feature() {\n    const {organization} = this.props;\n    return organization.features?.includes('reprocessing-v2');\n  }\n\n  getReprocessingNewRoute(data: Group) {\n    const {routes, location, params} = this.props;\n    const {groupId} = params;\n\n    const {id: nextGroupId} = data;\n\n    const hasReprocessingV2Feature = this.hasReprocessingV2Feature();\n\n    const reprocessingStatus = getGroupReprocessingStatus(data);\n    const {currentTab, baseUrl} = this.getCurrentRouteInfo(data);\n\n    if (groupId !== nextGroupId) {\n      if (hasReprocessingV2Feature) {\n        // Redirects to the Activities tab\n        if (\n          reprocessingStatus === ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT &&\n          currentTab !== TAB.ACTIVITY\n        ) {\n          return {\n            pathname: `${baseUrl}${TAB.ACTIVITY}/`,\n            query: {...params, groupId: nextGroupId},\n          };\n        }\n      }\n\n      return recreateRoute('', {\n        routes,\n        location,\n        params: {...params, groupId: nextGroupId},\n      });\n    }\n\n    if (hasReprocessingV2Feature) {\n      if (\n        reprocessingStatus === ReprocessingStatus.REPROCESSING &&\n        currentTab !== TAB.DETAILS\n      ) {\n        return {\n          pathname: baseUrl,\n          query: params,\n        };\n      }\n\n      if (\n        reprocessingStatus === ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT &&\n        currentTab !== TAB.ACTIVITY &&\n        currentTab !== TAB.USER_FEEDBACK\n      ) {\n        return {\n          pathname: `${baseUrl}${TAB.ACTIVITY}/`,\n          query: params,\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  getGroupQuery(): Record<string, string | string[]> {\n    const {environments} = this.props;\n\n    // Note, we do not want to include the environment key at all if there are no environments\n    const query: Record<string, string | string[]> = {\n      ...(environments ? {environment: environments} : {}),\n      expand: 'inbox',\n      collapse: 'release',\n    };\n\n    return query;\n  }\n\n  getFetchDataRequestErrorType(status: any): Error {\n    if (!status) {\n      return null;\n    }\n\n    if (status === 404) {\n      return ERROR_TYPES.GROUP_NOT_FOUND;\n    }\n\n    if (status === 403) {\n      return ERROR_TYPES.MISSING_MEMBERSHIP;\n    }\n\n    return null;\n  }\n\n  handleRequestError(error: any) {\n    Sentry.captureException(error);\n    const errorType = this.getFetchDataRequestErrorType(error?.status);\n\n    this.setState({\n      loadingGroup: false,\n      loading: false,\n      error: true,\n      errorType,\n    });\n  }\n\n  refetchGroup = async () => {\n    const {loadingGroup, loading, loadingEvent, group} = this.state;\n\n    if (\n      group?.status !== ReprocessingStatus.REPROCESSING ||\n      loadingGroup ||\n      loading ||\n      loadingEvent\n    ) {\n      return;\n    }\n\n    const {api} = this.props;\n\n    this.setState({loadingGroup: true});\n\n    try {\n      const updatedGroup = await api.requestPromise(this.groupDetailsEndpoint, {\n        query: this.getGroupQuery(),\n      });\n\n      const reprocessingNewRoute = this.getReprocessingNewRoute(updatedGroup);\n\n      if (reprocessingNewRoute) {\n        ReactRouter.browserHistory.push(reprocessingNewRoute);\n        return;\n      }\n\n      this.setState({group: updatedGroup, loadingGroup: false});\n    } catch (error) {\n      this.handleRequestError(error);\n    }\n  };\n\n  async fetchGroupReleases() {\n    const {api} = this.props;\n    const releases = await api.requestPromise(this.groupReleaseEndpoint);\n    GroupStore.onPopulateReleases(this.props.params.groupId, releases);\n  }\n\n  async fetchData() {\n    const {api, isGlobalSelectionReady, params} = this.props;\n\n    // Need to wait for global selection store to be ready before making request\n    if (!isGlobalSelectionReady) {\n      return;\n    }\n\n    try {\n      const eventPromise = this.canLoadEventEarly(this.props)\n        ? this.getEvent()\n        : undefined;\n\n      const groupPromise = await api.requestPromise(this.groupDetailsEndpoint, {\n        query: this.getGroupQuery(),\n      });\n\n      const [data] = await Promise.all([groupPromise, eventPromise]);\n      this.fetchGroupReleases();\n\n      const reprocessingNewRoute = this.getReprocessingNewRoute(data);\n\n      if (reprocessingNewRoute) {\n        ReactRouter.browserHistory.push(reprocessingNewRoute);\n        return;\n      }\n\n      const project = data.project;\n\n      markEventSeen(api, params.orgId, project.slug, params.groupId);\n\n      if (!project) {\n        Sentry.withScope(() => {\n          Sentry.captureException(new Error('Project not found'));\n        });\n      } else {\n        const locationWithProject = {...this.props.location};\n        if (\n          locationWithProject.query.project === undefined &&\n          locationWithProject.query._allp === undefined\n        ) {\n          // We use _allp as a temporary measure to know they came from the\n          // issue list page with no project selected (all projects included in\n          // filter).\n          //\n          // If it is not defined, we add the locked project id to the URL\n          // (this is because if someone navigates directly to an issue on\n          // single-project priveleges, then goes back - they were getting\n          // assigned to the first project).\n          //\n          // If it is defined, we do not so that our back button will bring us\n          // to the issue list page with no project selected instead of the\n          // locked project.\n          locationWithProject.query.project = project.id;\n        }\n        // We delete _allp from the URL to keep the hack a bit cleaner, but\n        // this is not an ideal solution and will ultimately be replaced with\n        // something smarter.\n        delete locationWithProject.query._allp;\n        ReactRouter.browserHistory.replace(locationWithProject);\n      }\n\n      this.setState({project, loadingGroup: false});\n\n      GroupStore.loadInitialData([data]);\n    } catch (error) {\n      this.handleRequestError(error);\n    }\n  }\n\n  listener = GroupStore.listen(itemIds => this.onGroupChange(itemIds), undefined);\n  interval: ReturnType<typeof setInterval> | undefined = undefined;\n\n  onGroupChange(itemIds: Set<string>) {\n    const id = this.props.params.groupId;\n    if (itemIds.has(id)) {\n      const group = GroupStore.get(id) as Group;\n      if (group) {\n        // TODO(ts) This needs a better approach. issueActions is splicing attributes onto\n        // group objects to cheat here.\n        if ((group as Group & {stale?: boolean}).stale) {\n          this.fetchData();\n          return;\n        }\n        this.setState({\n          group,\n        });\n      }\n    }\n  }\n\n  getTitle() {\n    const {organization} = this.props;\n    const {group} = this.state;\n    const defaultTitle = 'Sentry';\n\n    if (!group) {\n      return defaultTitle;\n    }\n\n    const {title} = getTitle(group, organization?.features);\n    const message = getMessage(group);\n\n    const {project} = group;\n    const eventDetails = `${organization.slug} - ${project.slug}`;\n\n    if (title && message) {\n      return `${title}: ${message} - ${eventDetails}`;\n    }\n\n    return `${title || message || defaultTitle} - ${eventDetails}`;\n  }\n\n  renderError() {\n    const {organization, location} = this.props;\n    const projects = organization.projects ?? [];\n    const projectId = location.query.project;\n\n    const projectSlug = projects.find(proj => proj.id === projectId)?.slug;\n\n    switch (this.state.errorType) {\n      case ERROR_TYPES.GROUP_NOT_FOUND:\n        return (\n          <LoadingError message={t('The issue you were looking for was not found.')} />\n        );\n\n      case ERROR_TYPES.MISSING_MEMBERSHIP:\n        return (\n          <MissingProjectMembership\n            organization={this.props.organization}\n            projectSlug={projectSlug}\n          />\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  }\n\n  renderContent(project: AvatarProject, group: Group) {\n    const {children, environments} = this.props;\n    const {loadingEvent, eventError, event} = this.state;\n\n    const {currentTab, baseUrl} = this.getCurrentRouteInfo(group);\n    const groupReprocessingStatus = getGroupReprocessingStatus(group);\n\n    let childProps: Record<string, any> = {\n      environments,\n      group,\n      project,\n    };\n\n    if (currentTab === TAB.DETAILS) {\n      childProps = {\n        ...childProps,\n        event,\n        loadingEvent,\n        eventError,\n        groupReprocessingStatus,\n        onRetry: () => this.remountComponent(),\n      };\n    }\n\n    if (currentTab === TAB.TAGS) {\n      childProps = {...childProps, event, baseUrl};\n    }\n\n    return (\n      <React.Fragment>\n        <GroupHeader\n          groupReprocessingStatus={groupReprocessingStatus}\n          project={project as Project}\n          event={event}\n          group={group}\n          currentTab={currentTab}\n          baseUrl={baseUrl}\n        />\n        {React.isValidElement(children)\n          ? React.cloneElement(children, childProps)\n          : children}\n      </React.Fragment>\n    );\n  }\n\n  renderPageContent() {\n    const {error: isError, group, project, loading} = this.state;\n    const isLoading = loading || (!group && !isError);\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    if (isError) {\n      return this.renderError();\n    }\n\n    const {organization} = this.props;\n\n    return (\n      <Projects\n        orgId={organization.slug}\n        slugs={[project?.slug ?? '']}\n        data-test-id=\"group-projects-container\"\n      >\n        {({projects, initiallyLoaded, fetchError}) =>\n          initiallyLoaded ? (\n            fetchError ? (\n              <LoadingError message={t('Error loading the specified project')} />\n            ) : (\n              // TODO(ts): Update renderContent function to deal with empty group\n              this.renderContent(projects[0], group!)\n            )\n          ) : (\n            <LoadingIndicator />\n          )\n        }\n      </Projects>\n    );\n  }\n\n  render() {\n    const {project} = this.state;\n\n    return (\n      <DocumentTitle title={this.getTitle()}>\n        <GlobalSelectionHeader\n          skipLoadLastUsed\n          forceProject={project}\n          showDateSelector={false}\n          shouldForceProject\n          lockedMessageSubject={t('issue')}\n          showIssueStreamLink\n          showProjectSettingsLink\n        >\n          <PageContent>{this.renderPageContent()}</PageContent>\n        </GlobalSelectionHeader>\n      </DocumentTitle>\n    );\n  }\n}\n\nexport default withApi(Sentry.withProfiler(GroupDetails));\n","import * as React from 'react';\nimport * as ReactRouter from 'react-router';\n\nimport {GlobalSelection, Organization} from 'app/types';\nimport {analytics, metric} from 'app/utils/analytics';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization, {isLightweightOrganization} from 'app/utils/withOrganization';\n\nimport GroupDetails from './groupDetails';\n\ntype Props = {\n  selection: GlobalSelection;\n  isGlobalSelectionReady: boolean;\n  organization: Organization;\n  children: React.ReactNode;\n} & ReactRouter.RouteComponentProps<{orgId: string; groupId: string}, {}>;\n\nclass OrganizationGroupDetails extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    // Setup in the constructor as render() may be expensive\n    this.startMetricCollection();\n  }\n\n  componentDidMount() {\n    analytics('issue_page.viewed', {\n      group_id: parseInt(this.props.params.groupId, 10),\n      org_id: parseInt(this.props.organization.id, 10),\n    });\n  }\n\n  /**\n   * See \"page-issue-list-start\" for explanation on hot/cold-starts\n   */\n  startMetricCollection() {\n    const startType = isLightweightOrganization(this.props.organization)\n      ? 'cold-start'\n      : 'warm-start';\n    metric.mark({name: 'page-issue-details-start', data: {start_type: startType}});\n  }\n\n  render() {\n    const {selection, ...props} = this.props;\n\n    return (\n      <GroupDetails\n        key={`${this.props.params.groupId}-envs:${selection.environments.join(',')}`}\n        environments={selection.environments}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(withGlobalSelection(OrganizationGroupDetails));\n"],"sourceRoot":""}