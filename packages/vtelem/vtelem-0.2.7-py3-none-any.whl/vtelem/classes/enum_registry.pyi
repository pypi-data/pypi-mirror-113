from . import ENUM_TYPE as ENUM_TYPE
from .registry import Registry as Registry
from .type_registry import TypeRegistry as TypeRegistry
from .user_enum import UserEnum as UserEnum, UserEnumEncoder as UserEnumEncoder, from_enum as from_enum
from enum import Enum
from typing import Any, List, Tuple, Type

LOG: Any

class EnumRegistry(Registry[UserEnum]):
    def __init__(self, initial_enums: List[UserEnum] = ...): ...
    def get_enum(self, enum: UserEnum) -> Tuple[bool, int]: ...
    def add_from_enum(self, enum_class: Type[Enum]) -> Tuple[bool, int]: ...
    def add_enum(self, enum: UserEnum) -> Tuple[bool, int]: ...
    def describe(self, indented: bool = ...) -> str: ...
    def export(self, registry: TypeRegistry) -> bool: ...
