{"version":3,"sources":["CustomTable.tsx","index.tsx"],"names":["useStyles","makeStyles","root","width","container","maxHeight","tablePaginationSelectIcon","color","tablePaginationSelect","select","backgroundColor","focus","useStyles1","theme","createStyles","flexShrink","marginLeft","spacing","StyledIconButton","withStyles","label","textTransform","disabled","IconButton","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onPageChange","className","onClick","event","aria-label","direction","LastPage","FirstPage","KeyboardArrowRight","KeyboardArrowLeft","Math","ceil","max","TableRows","isHeader","table","pageStartRow","pageEndRow","headerRows","rows","columns","startRow","endRow","tableRows","range","map","rowIndex","columnIndex","content","getCell","TableCell","key","toString","align","style","minWidth","TableRow","cells","type","Number","Error","hover","role","tabIndex","withStreamlitConnection","useState","setPage","isLoading","setIsLoading","setRowsPerPage","data","args","dataRows","useEffect","Streamlit","setFrameHeight","height","Paper","TableContainer","Table","stickyHeader","TableHead","TableBody","TablePagination","background","rowsPerPageOptions","component","SelectProps","inputProps","native","newPage","onRowsPerPageChange","parseInt","target","value","ActionsComponent","selectIcon","ReactDOM","render","StrictMode","CustomTable","document","getElementById"],"mappings":"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","file":"static/js/main.b8058af5.chunk.js","sourcesContent":["import { range } from \"lodash\"\nimport React, { useEffect, useState, Fragment } from \"react\"\nimport Loader from \"react-loader-spinner\"\nimport {\n  makeStyles,\n  withStyles,\n  useTheme,\n  Theme,\n  createStyles,\n} from \"@material-ui/core/styles\"\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  IconButton,\n} from \"@material-ui/core\"\n\nimport {\n  FirstPage,\n  KeyboardArrowLeft,\n  KeyboardArrowRight,\n  LastPage,\n} from \"@material-ui/icons\"\n\nimport {\n  ArrowTable,\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\n\ninterface TableProps {\n  data: ArrowTable\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  container: {\n    maxHeight: 650,\n  },\n  tablePaginationSelectIcon: {\n    color: \"#f8f8f2\",\n  },\n  tablePaginationSelect: {\n    color: \"#f8f8f2\",\n  },\n  select: {\n    \"&$focus\": {\n      backgroundColor: \"#44475a\",\n    },\n    focus: {},\n  },\n})\n\nconst useStyles1 = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexShrink: 0,\n      marginLeft: theme.spacing(2.5),\n    },\n  })\n)\n\nconst StyledIconButton = withStyles({\n  root: {\n    color: \"#f8f8f2\",\n    // $disabled is a reference to the local disabled\n    // rule within the same style sheet.\n    // By using &, we increase the specificity.\n    \"&$disabled\": {\n      color: `${\"#f8f8f2\"}a3`,\n    },\n  },\n  label: {\n    textTransform: \"capitalize\",\n  },\n  disabled: {},\n})(IconButton)\n\ninterface TablePaginationActionsProps {\n  count: number\n  page: number\n  rowsPerPage: number\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number\n  ) => void\n}\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const classes = useStyles1()\n  const theme = useTheme()\n  const { count, page, rowsPerPage, onPageChange } = props\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, 0)\n  }\n\n  const handleBackButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, page - 1)\n  }\n\n  const handleNextButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, page + 1)\n  }\n\n  const handleLastPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\n  }\n\n  return (\n    <div className={classes.root}>\n      <StyledIconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPage /> : <FirstPage />}\n      </StyledIconButton>\n      <StyledIconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </StyledIconButton>\n      <StyledIconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </StyledIconButton>\n      <StyledIconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPage /> : <LastPage />}\n      </StyledIconButton>\n    </div>\n  )\n}\n\nconst StickyHeadTable = (props: ComponentProps) => {\n  const classes = useStyles()\n  const [page, setPage] = useState(0)\n  const [isLoading, setIsLoading] = useState(true)\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n\n  const { data }: TableProps = props.args\n\n  const dataRows = data.dataRows\n\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n    setIsLoading(false)\n  }, [])\n\n  // const handleChangePage = (event: unknown, newPage: number) => {\n  //   setPage(newPage)\n  // }\n\n  // const handleChangeRowsPerPage = (\n  //   event: React.ChangeEvent<HTMLInputElement>\n  // ) => {\n  //   setRowsPerPage(+event.target.value)\n  //   setPage(0)\n  // }\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number\n  ) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  return (\n    <div>\n      {isLoading && (\n        <Loader type=\"ThreeDots\" color=\"#bd93f9\" height=\"100\" width=\"100\" />\n      )}\n      {\n        <div>\n          <Paper className={classes.root}>\n            <TableContainer className={classes.container}>\n              <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                  <TableRows\n                    isHeader={true}\n                    table={data}\n                    pageStartRow={0}\n                    pageEndRow={0}\n                  />\n                </TableHead>\n                <TableBody style={{ backgroundColor: \"#282a36\" }}>\n                  <TableRows\n                    isHeader={false}\n                    table={data}\n                    pageStartRow={page * rowsPerPage}\n                    pageEndRow={page * rowsPerPage + rowsPerPage}\n                  />\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              style={{ background: \"#282a36\", color: \"#f8f8f2\" }}\n              rowsPerPageOptions={[10, 25, 100]}\n              component=\"div\"\n              count={dataRows}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { \"aria-label\": \"rows per page\" },\n                native: false,\n              }}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n              classes={{\n                selectIcon: classes.tablePaginationSelectIcon,\n                select: classes.tablePaginationSelect,\n              }}\n            />\n          </Paper>\n        </div>\n      }\n    </div>\n  )\n}\n\ninterface TableRowsProps {\n  isHeader: boolean\n  table: ArrowTable\n  pageStartRow: number\n  pageEndRow: number\n}\n\nconst TableRows = (props: TableRowsProps) => {\n  const { isHeader, table, pageStartRow, pageEndRow } = props\n  const { headerRows, rows, columns } = table\n  const startRow = isHeader ? 0 : headerRows + pageStartRow\n  let endRow = isHeader ? headerRows : headerRows + pageEndRow\n  endRow = endRow >= rows ? rows : endRow\n\n  if (isHeader) {\n    const tableRows = range(startRow, endRow).map((rowIndex) => {\n      return range(0, columns).map((columnIndex) => {\n        const { content } = table.getCell(rowIndex, columnIndex)\n\n        return (\n          <TableCell\n            key={content.toString()}\n            align=\"center\"\n            style={{\n              minWidth: \"100%\",\n              backgroundColor: \"#1f2029\",\n              color: \"#f8f8f2\",\n            }}\n          >\n            {content}\n          </TableCell>\n        )\n      })\n    })\n    return <TableRow>{tableRows}</TableRow>\n  } else {\n    const tableRows = range(startRow, endRow).map((rowIndex) => {\n      const cells = range(0, columns).map((columnIndex) => {\n        const { content, type } = table.getCell(rowIndex, columnIndex)\n        switch (type) {\n          case \"blank\": {\n            return (\n              <TableCell\n                key={columnIndex}\n                align=\"center\"\n                style={{ color: \"#f8f8f2\" }}\n              />\n            )\n          }\n          case \"index\": {\n            return (\n              <TableCell\n                key={columnIndex}\n                align=\"center\"\n                style={{ color: \"#f8f8f2\" }}\n              >\n                {Number(content)}\n              </TableCell>\n            )\n          }\n          case \"columns\": {\n            return (\n              <TableCell\n                key={columnIndex}\n                align=\"center\"\n                style={{ color: \"#f8f8f2\" }}\n              >\n                {content.toString()}\n              </TableCell>\n            )\n          }\n          case \"data\": {\n            return (\n              <TableCell\n                key={columnIndex}\n                align=\"center\"\n                style={{ color: \"#f8f8f2\" }}\n              >\n                {content.toString()}\n              </TableCell>\n            )\n          }\n          default: {\n            throw new Error(`Cannot parse type \"${type}\".`)\n          }\n        }\n      })\n      return (\n        <TableRow hover role=\"checkbox\" tabIndex={-1} key={rowIndex}>\n          {cells}\n        </TableRow>\n      )\n    })\n    return <Fragment>{tableRows}</Fragment>\n  }\n}\n\nexport default withStreamlitConnection(StickyHeadTable)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CustomTable from \"./CustomTable\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CustomTable />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}