{"version":3,"sources":["webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/crumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/divider.tsx"],"names":["BreadcrumbList","space","isCrumbDropdown","crumb","undefined","items","Breadcrumbs","crumbs","linkLastItem","props","length","lastCrumb","to","map","index","label","crumbProps","isLast","route","name","preserveGlobalSelection","key","labelKey","mapKey","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","p","theme","gray300","overflowEllipsis","textColor","subText","IconChevron","BreadcrumbDropdown","isOpen","setState","leaving","clearTimeout","entering","window","setTimeout","open","enterDelay","close","this","hasMenu","onSelect","blendCorner","onOpen","handleMouseEnter","onClose","state","menuProps","onMouseEnter","onMouseLeave","handleMouseLeave","virtualizedHeight","getActorProps","actions","onClick","handleClickActor","bind","handleMouseEnterActor","isHover","React","Crumb","StyledIconChevron","StyledDivider","gray200"],"mappings":"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","file":"chunks/app_components_breadcrumbs_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Theme} from 'app/utils/theme';\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\nexport type CrumbDropdown = {\n  /**\n   * Name of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Items of the crumb dropdown\n   */\n  items: React.ComponentProps<typeof BreadcrumbDropdown>['items'];\n\n  /**\n   * Callback function for when an item is selected\n   */\n  onSelect: React.ComponentProps<typeof BreadcrumbDropdown>['onSelect'];\n};\n\ntype Props = React.ComponentPropsWithoutRef<typeof BreadcrumbList> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: (Crumb | CrumbDropdown)[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\nfunction isCrumbDropdown(crumb: Crumb | CrumbDropdown): crumb is CrumbDropdown {\n  return (crumb as CrumbDropdown).items !== undefined;\n}\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    const lastCrumb = crumbs[crumbs.length - 1];\n    if (!isCrumbDropdown(lastCrumb)) {\n      lastCrumb.to = null;\n    }\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map((crumb, index) => {\n        if (isCrumbDropdown(crumb)) {\n          const {label, ...crumbProps} = crumb;\n          return (\n            <BreadcrumbDropdown\n              key={index}\n              isLast={index >= crumbs.length - 1}\n              route={{}}\n              name={label}\n              {...crumbProps}\n            />\n          );\n        } else {\n          const {label, to, preserveGlobalSelection, key} = crumb;\n          const labelKey = typeof label === 'string' ? label : '';\n          const mapKey =\n            key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n          return (\n            <React.Fragment key={mapKey}>\n              {to ? (\n                <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                  {label}\n                </BreadcrumbLink>\n              ) : (\n                <BreadcrumbItem>{label}</BreadcrumbItem>\n              )}\n\n              {index < crumbs.length - 1 && (\n                <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n              )}\n            </React.Fragment>\n          );\n        }\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray300};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.textColor};\n  }\n`;\n\ntype BreadcrumbLinkProps = {\n  to: React.ComponentProps<typeof Link>['to'];\n  preserveGlobalSelection?: boolean;\n  children?: React.ReactNode;\n};\n\nconst BreadcrumbLink = styled(\n  ({preserveGlobalSelection, to, ...props}: BreadcrumbLinkProps) =>\n    preserveGlobalSelection ? (\n      <GlobalSelectionLink to={to as LocationDescriptor} {...props} />\n    ) : (\n      <Link to={to} {...props} />\n    )\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.subText};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n  max-width: 400px;\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import * as React from 'react';\n\nimport DropdownAutoCompleteMenu from 'app/components/dropdownAutoComplete/menu';\nimport {Item} from 'app/components/dropdownAutoComplete/types';\nimport Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';\nimport Divider from 'app/views/settings/components/settingsBreadcrumb/divider';\n\nimport {RouteWithName} from './types';\n\nconst EXIT_DELAY = 0;\n\ntype Props = {\n  route: RouteWithName;\n  hasMenu?: boolean;\n  isLast?: boolean;\n  enterDelay?: number;\n  name: React.ReactNode;\n  items: Item[];\n  onSelect: (item: Item) => void;\n};\n\ntype State = {\n  isOpen: boolean;\n};\n\nclass BreadcrumbDropdown extends React.Component<Props, State> {\n  state: State = {\n    isOpen: false,\n  };\n\n  entering: number | null = null;\n  leaving: number | null = null;\n\n  open = () => {\n    this.setState({isOpen: true});\n  };\n\n  close = () => {\n    this.setState({isOpen: false});\n  };\n\n  handleStateChange = () => {};\n\n  // Adds a delay when mouse hovers on actor (in this case the breadcrumb)\n  handleMouseEnterActor = () => {\n    if (this.leaving) {\n      clearTimeout(this.leaving);\n    }\n\n    this.entering = window.setTimeout(() => this.open(), this.props.enterDelay ?? 0);\n  };\n\n  // handles mouseEnter event on actor and menu, should clear the leaving timeout and keep menu open\n  handleMouseEnter = () => {\n    if (this.leaving) {\n      clearTimeout(this.leaving);\n    }\n\n    this.open();\n  };\n\n  // handles mouseLeave event on actor and menu, adds a timeout before updating state to account for\n  // mouseLeave into\n  handleMouseLeave = () => {\n    if (this.entering) {\n      clearTimeout(this.entering);\n    }\n\n    this.leaving = window.setTimeout(() => this.close(), EXIT_DELAY);\n  };\n\n  // Close immediately when actor is clicked clicked\n  handleClickActor = () => {\n    this.close();\n  };\n\n  // Close immediately when clicked outside\n  handleClose = () => {\n    this.close();\n  };\n\n  render() {\n    const {hasMenu, route, isLast, name, items, onSelect} = this.props;\n    return (\n      <DropdownAutoCompleteMenu\n        blendCorner={false}\n        onOpen={this.handleMouseEnter}\n        onClose={this.close}\n        isOpen={this.state.isOpen}\n        menuProps={{\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n        }}\n        items={items}\n        onSelect={onSelect}\n        virtualizedHeight={41}\n      >\n        {({getActorProps, actions, isOpen}) => (\n          <Crumb\n            {...getActorProps({\n              onClick: this.handleClickActor.bind(this, actions),\n              onMouseEnter: this.handleMouseEnterActor.bind(this, actions),\n              onMouseLeave: this.handleMouseLeave.bind(this, actions),\n            })}\n          >\n            <span>{name || route.name} </span>\n            <Divider isHover={hasMenu && isOpen} isLast={isLast} />\n          </Crumb>\n        )}\n      </DropdownAutoCompleteMenu>\n    );\n  }\n}\n\nexport default BreadcrumbDropdown;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst Crumb = styled('div')`\n  display: flex;\n  align-items: center;\n  position: relative;\n  font-size: 18px;\n  color: ${p => p.theme.subText};\n  padding-right: ${space(1)};\n  cursor: pointer;\n  white-space: nowrap;\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default Crumb;\n","import styled from '@emotion/styled';\n\nimport {IconChevron} from 'app/icons';\n\ntype Props = {\n  isHover?: boolean;\n  isLast?: boolean;\n};\n\nconst Divider = ({isHover, isLast}: Props) =>\n  isLast ? null : (\n    <StyledDivider>\n      <StyledIconChevron direction={isHover ? 'down' : 'right'} size=\"14px\" />\n    </StyledDivider>\n  );\n\nconst StyledIconChevron = styled(IconChevron)`\n  display: block;\n`;\n\nconst StyledDivider = styled('span')`\n  display: inline-block;\n  margin-left: 6px;\n  color: ${p => p.theme.gray200};\n  position: relative;\n`;\n\nexport default Divider;\n"],"sourceRoot":""}