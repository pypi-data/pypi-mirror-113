{"version":3,"sources":["webpack:///./app/views/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/organizationIntegrations/addIntegrationButton.tsx","webpack:///./app/views/organizationIntegrations/installedIntegration.tsx","webpack:///./app/views/organizationIntegrations/integrationDetailedView.tsx","webpack:///./app/views/organizationIntegrations/integrationItem.tsx"],"names":["AddIntegration","urlParams","trackIntegrationEvent","integration","props","provider","key","integration_type","analyticsParams","organization","setupDialog","url","width","height","computeCenteredWindow","left","top","query","account","modalParams","installUrl","queryString","opts","dialog","window","open","focus","message","origin","document","location","source","data","success","addSuccessMessage","t","name","onInstall","addErrorMessage","error","addEventListener","this","didReceiveMessage","removeEventListener","close","screenLeft","undefined","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","children","openDialog","React","AddIntegrationButton","buttonText","onAddIntegration","reinstall","buttonProps","label","metadata","noun","disabled","canAdd","title","onClick","InstalledIntegration","aspects","removal_dialog","body","actionText","onRemove","getRemovalBodyAndText","type","icon","size","confirmText","onConfirm","handleRemove","disable_dialog","onDisable","className","removeConfirmProps","status","canDisable","disableConfirmProps","access","hasAccess","IntegrationFlex","IntegrationItemBox","position","StyledButton","borderless","to","slug","id","priority","onConfirming","handleUninstallClick","StyledIntegrationStatus","Button","p","theme","gray300","IntegrationStatus","withTheme","color","titleText","IntegrationStatusText","gray200","space","IntegrationDetailedView","orgId","params","router","push","origIntegrations","state","configurations","integrations","filter","i","setState","options","method","api","request","domainName","split","orgName","accountType","integrationSlug","information","providers","description","author","alerts","map","item","externalInstall","text","noticeText","source_url","issue_url","length","isEnabled","features","disabledFromFeatures","userHasAccess","style","marginBottom","view","already_installed","installationStatus","href","handleExternalInstall","external","Fragment","renderRequestIntegrationButton","InstallWrapper","renderEmptyConfigurations","AbstractIntegrationDetailedView","border","background","withOrganization","IntegrationItem","compact","Flex","Labels","IntegrationName","DomainName","Component","gray400"],"mappings":"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","file":"chunks/app_views_organizationIntegrations_integrationDetailedView_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport * as queryString from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  provider: IntegrationProvider;\n  onInstall: (data: IntegrationWithConfig) => void;\n  account?: string;\n  organization: Organization; // for analytics\n  analyticsParams?: {\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n    already_installed: boolean;\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends React.Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    trackIntegrationEvent(\n      'integrations.installation_start',\n      {\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = this.props.provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (this.props.account) {\n      query.account = this.props.account;\n    }\n\n    if (this.props.modalParams) {\n      query = {...query, ...this.props.modalParams};\n    }\n\n    const installUrl = `${url}?${queryString.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationEvent(\n      'integrations.installation_complete',\n      {\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    addSuccessMessage(t('%s added', this.props.provider.name));\n    this.props.onInstall(data);\n  };\n\n  render() {\n    return this.props.children(this.openDialog);\n  }\n}\n","import * as React from 'react';\n\nimport Button from 'app/components/button';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport {IntegrationWithConfig} from 'app/types';\n\nimport AddIntegration from './addIntegration';\n\ntype Props = {\n  onAddIntegration: (data: IntegrationWithConfig) => void;\n  buttonText?: string;\n  reinstall?: boolean;\n} & React.ComponentProps<typeof Button> &\n  Pick<\n    React.ComponentProps<typeof AddIntegration>,\n    'provider' | 'organization' | 'analyticsParams' | 'modalParams'\n  >;\n\nexport default class AddIntegrationButton extends React.Component<Props> {\n  render() {\n    const {\n      provider,\n      buttonText,\n      onAddIntegration,\n      organization,\n      reinstall,\n      analyticsParams,\n      modalParams,\n      ...buttonProps\n    } = this.props;\n\n    const label =\n      buttonText || t(reinstall ? 'Enable' : 'Add %s', provider.metadata.noun);\n\n    return (\n      <Tooltip\n        disabled={provider.canAdd}\n        title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}\n      >\n        <AddIntegration\n          provider={provider}\n          onInstall={onAddIntegration}\n          organization={organization}\n          analyticsParams={analyticsParams}\n          modalParams={modalParams}\n        >\n          {onClick => (\n            <Button\n              disabled={!provider.canAdd}\n              {...buttonProps}\n              onClick={() => onClick()}\n            >\n              {label}\n            </Button>\n          )}\n        </AddIntegration>\n      </Tooltip>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport Confirm from 'app/components/confirm';\nimport Tooltip from 'app/components/tooltip';\nimport {IconDelete, IconFlag, IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Integration, IntegrationProvider, ObjectStatus, Organization} from 'app/types';\nimport {IntegrationAnalyticsKey} from 'app/utils/integrationEvents';\nimport {Theme} from 'app/utils/theme';\n\nimport IntegrationItem from './integrationItem';\n\nexport type Props = {\n  organization: Organization;\n  provider: IntegrationProvider;\n  integration: Integration;\n  onRemove: (integration: Integration) => void;\n  onDisable: (integration: Integration) => void;\n  trackIntegrationEvent: (eventKey: IntegrationAnalyticsKey) => void; // analytics callback\n  className?: string;\n};\n\nexport default class InstalledIntegration extends React.Component<Props> {\n  handleUninstallClick = () => {\n    this.props.trackIntegrationEvent('integrations.uninstall_clicked');\n  };\n\n  getRemovalBodyAndText(aspects: Integration['provider']['aspects']) {\n    if (aspects && aspects.removal_dialog) {\n      return {\n        body: aspects.removal_dialog.body,\n        actionText: aspects.removal_dialog.actionText,\n      };\n    } else {\n      return {\n        body: t(\n          'Deleting this integration will remove any project associated data. This action cannot be undone. Are you sure you want to delete this integration?'\n        ),\n        actionText: t('Delete'),\n      };\n    }\n  }\n\n  handleRemove(integration: Integration) {\n    this.props.onRemove(integration);\n    this.props.trackIntegrationEvent('integrations.uninstall_completed');\n  }\n\n  get removeConfirmProps() {\n    const {integration} = this.props;\n    const {body, actionText} = this.getRemovalBodyAndText(integration.provider.aspects);\n\n    const message = (\n      <React.Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t('Deleting this integration has consequences!')}\n        </Alert>\n        {body}\n      </React.Fragment>\n    );\n    return {\n      message,\n      confirmText: actionText,\n      onConfirm: () => this.handleRemove(integration),\n    };\n  }\n\n  get disableConfirmProps() {\n    const {integration} = this.props;\n    const {body, actionText} = integration.provider.aspects.disable_dialog || {};\n    const message = (\n      <React.Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t('This integration cannot be removed in Sentry')}\n        </Alert>\n        {body}\n      </React.Fragment>\n    );\n\n    return {\n      message,\n      confirmText: actionText,\n      onConfirm: () => this.props.onDisable(integration),\n    };\n  }\n\n  render() {\n    const {className, integration, provider, organization} = this.props;\n\n    const removeConfirmProps =\n      integration.status === 'active' && integration.provider.canDisable\n        ? this.disableConfirmProps\n        : this.removeConfirmProps;\n\n    return (\n      <Access access={['org:integrations']}>\n        {({hasAccess}) => (\n          <IntegrationFlex key={integration.id} className={className}>\n            <IntegrationItemBox>\n              <IntegrationItem integration={integration} />\n            </IntegrationItemBox>\n            <div>\n              <Tooltip\n                disabled={hasAccess}\n                position=\"left\"\n                title={t(\n                  'You must be an organization owner, manager or admin to configure'\n                )}\n              >\n                <StyledButton\n                  borderless\n                  icon={<IconSettings />}\n                  disabled={!hasAccess || integration.status !== 'active'}\n                  to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}\n                  data-test-id=\"integration-configure-button\"\n                >\n                  {t('Configure')}\n                </StyledButton>\n              </Tooltip>\n            </div>\n            <div>\n              <Tooltip\n                disabled={hasAccess}\n                title={t(\n                  'You must be an organization owner, manager or admin to uninstall'\n                )}\n              >\n                <Confirm\n                  priority=\"danger\"\n                  onConfirming={this.handleUninstallClick}\n                  disabled={!hasAccess}\n                  {...removeConfirmProps}\n                >\n                  <StyledButton\n                    disabled={!hasAccess}\n                    borderless\n                    icon={<IconDelete />}\n                    data-test-id=\"integration-remove-button\"\n                  >\n                    {t('Uninstall')}\n                  </StyledButton>\n                </Confirm>\n              </Tooltip>\n            </div>\n\n            <StyledIntegrationStatus status={integration.status} />\n          </IntegrationFlex>\n        )}\n      </Access>\n    );\n  }\n}\n\nconst StyledButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IntegrationFlex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationItemBox = styled('div')`\n  flex: 1;\n`;\n\nconst IntegrationStatus = withTheme(\n  (\n    props: React.HTMLAttributes<HTMLDivElement> & {theme: Theme; status: ObjectStatus}\n  ) => {\n    const {theme, status, ...p} = props;\n    const color = status === 'active' ? theme.success : theme.gray300;\n    const titleText =\n      status === 'active'\n        ? t('This Integration can be disabled by clicking the Uninstall button')\n        : t('This Integration has been disconnected from the external provider');\n    return (\n      <Tooltip title={titleText}>\n        <div {...p}>\n          <CircleIndicator size={6} color={color} />\n          <IntegrationStatusText>{`${\n            status === 'active' ? t('enabled') : t('disabled')\n          }`}</IntegrationStatusText>\n        </div>\n      </Tooltip>\n    );\n  }\n);\n\nconst StyledIntegrationStatus = styled(IntegrationStatus)`\n  display: flex;\n  align-items: center;\n  color: ${p => p.theme.gray300};\n  font-weight: light;\n  text-transform: capitalize;\n  &:before {\n    content: '|';\n    color: ${p => p.theme.gray200};\n    margin-right: ${space(1)};\n    font-weight: normal;\n  }\n`;\n\nconst IntegrationStatusText = styled('div')`\n  margin: 0 ${space(0.75)} 0 ${space(0.5)};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {RequestOptions} from 'app/api';\nimport Button from 'app/components/button';\nimport {IconFlag, IconOpen, IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Integration, IntegrationProvider} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';\nimport AddIntegrationButton from './addIntegrationButton';\nimport InstalledIntegration from './installedIntegration';\n\ntype State = {\n  configurations: Integration[];\n  information: {providers: IntegrationProvider[]};\n};\n\nclass IntegrationDetailedView extends AbstractIntegrationDetailedView<\n  AbstractIntegrationDetailedView['props'],\n  State & AbstractIntegrationDetailedView['state']\n> {\n  getEndpoints(): ([string, string, any] | [string, string])[] {\n    const {orgId, integrationSlug} = this.props.params;\n    const baseEndpoints: ([string, string, any] | [string, string])[] = [\n      [\n        'information',\n        `/organizations/${orgId}/config/integrations/?provider_key=${integrationSlug}`,\n      ],\n      [\n        'configurations',\n        `/organizations/${orgId}/integrations/?provider_key=${integrationSlug}&includeConfig=0`,\n      ],\n    ];\n\n    return baseEndpoints;\n  }\n\n  get integrationType() {\n    return 'first_party' as const;\n  }\n\n  get provider() {\n    return this.state.information.providers[0];\n  }\n\n  get description() {\n    return this.metadata.description;\n  }\n\n  get author() {\n    return this.metadata.author;\n  }\n\n  get alerts() {\n    const provider = this.provider;\n    const metadata = this.metadata;\n    // The server response for integration installations includes old icon CSS classes\n    // We map those to the currently in use values to their react equivalents\n    // and fallback to IconFlag just in case.\n    const alerts = (metadata.aspects.alerts || []).map(item => {\n      switch (item.icon) {\n        case 'icon-warning':\n        case 'icon-warning-sm':\n          return {...item, icon: <IconWarning />};\n        default:\n          return {...item, icon: <IconFlag />};\n      }\n    });\n\n    if (!provider.canAdd && metadata.aspects.externalInstall) {\n      alerts.push({\n        type: 'warning',\n        icon: <IconOpen />,\n        text: metadata.aspects.externalInstall.noticeText,\n      });\n    }\n    return alerts;\n  }\n\n  get resourceLinks() {\n    const metadata = this.metadata;\n    return [\n      {url: metadata.source_url, title: 'View Source'},\n      {url: metadata.issue_url, title: 'Report Issue'},\n    ];\n  }\n\n  get metadata() {\n    return this.provider.metadata;\n  }\n\n  get isEnabled() {\n    return this.state.configurations.length > 0;\n  }\n\n  get installationStatus() {\n    return this.isEnabled ? 'Installed' : 'Not Installed';\n  }\n\n  get integrationName() {\n    return this.provider.name;\n  }\n\n  get featureData() {\n    return this.metadata.features;\n  }\n\n  onInstall = (integration: Integration) => {\n    // send the user to the configure integration view for that integration\n    const {orgId} = this.props.params;\n    this.props.router.push(\n      `/settings/${orgId}/integrations/${integration.provider.key}/${integration.id}/`\n    );\n  };\n\n  onRemove = (integration: Integration) => {\n    const {orgId} = this.props.params;\n\n    const origIntegrations = [...this.state.configurations];\n\n    const integrations = this.state.configurations.filter(i => i.id !== integration.id);\n    this.setState({configurations: integrations});\n\n    const options: RequestOptions = {\n      method: 'DELETE',\n      error: () => {\n        this.setState({configurations: origIntegrations});\n        addErrorMessage(t('Failed to remove Integration'));\n      },\n    };\n\n    this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);\n  };\n\n  onDisable = (integration: Integration) => {\n    let url: string;\n\n    const [domainName, orgName] = integration.domainName.split('/');\n    if (integration.accountType === 'User') {\n      url = `https://${domainName}/settings/installations/`;\n    } else {\n      url = `https://${domainName}/organizations/${orgName}/settings/installations/`;\n    }\n\n    window.open(url, '_blank');\n  };\n\n  handleExternalInstall = () => {\n    this.trackIntegrationEvent('integrations.installation_start');\n  };\n\n  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {\n    const {organization} = this.props;\n    const provider = this.provider;\n    const {metadata} = provider;\n\n    const size = 'small' as const;\n    const priority = 'primary' as const;\n\n    const buttonProps = {\n      style: {marginBottom: space(1)},\n      size,\n      priority,\n      'data-test-id': 'install-button',\n      disabled: disabledFromFeatures,\n      organization,\n    };\n\n    if (!userHasAccess) {\n      return this.renderRequestIntegrationButton();\n    }\n\n    if (provider.canAdd) {\n      return (\n        <AddIntegrationButton\n          provider={provider}\n          onAddIntegration={this.onInstall}\n          analyticsParams={{\n            view: 'integrations_directory_integration_detail',\n            already_installed: this.installationStatus !== 'Not Installed',\n          }}\n          {...buttonProps}\n        />\n      );\n    }\n    if (metadata.aspects.externalInstall) {\n      return (\n        <Button\n          icon={<IconOpen />}\n          href={metadata.aspects.externalInstall.url}\n          onClick={this.handleExternalInstall}\n          external\n          {...buttonProps}\n        >\n          {metadata.aspects.externalInstall.buttonText}\n        </Button>\n      );\n    }\n\n    // This should never happen but we can't return undefined without some refactoring.\n    return <Fragment />;\n  }\n\n  renderConfigurations() {\n    const {configurations} = this.state;\n    const {organization} = this.props;\n    const provider = this.provider;\n\n    if (configurations.length) {\n      return configurations.map(integration => {\n        return (\n          <InstallWrapper key={integration.id}>\n            <InstalledIntegration\n              organization={organization}\n              provider={provider}\n              integration={integration}\n              onRemove={this.onRemove}\n              onDisable={this.onDisable}\n              data-test-id={integration.id}\n              trackIntegrationEvent={this.trackIntegrationEvent}\n            />\n          </InstallWrapper>\n        );\n      });\n    }\n\n    return this.renderEmptyConfigurations();\n  }\n}\n\nconst InstallWrapper = styled('div')`\n  padding: ${space(2)};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  background-color: ${p => p.theme.background};\n\n  &:last-child {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nexport default withOrganization(IntegrationDetailedView);\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {Integration} from 'app/types';\nimport IntegrationIcon from 'app/views/organizationIntegrations/integrationIcon';\n\ntype DefaultProps = {\n  compact: boolean;\n};\n\ntype Props = DefaultProps & {\n  integration: Integration;\n};\nexport default class IntegrationItem extends Component<Props> {\n  static defaultProps: DefaultProps = {\n    compact: false,\n  };\n\n  render() {\n    const {integration, compact} = this.props;\n    return (\n      <Flex>\n        <div>\n          <IntegrationIcon size={compact ? 22 : 32} integration={integration} />\n        </div>\n        <Labels compact={compact}>\n          <IntegrationName data-test-id=\"integration-name\">\n            {integration.name}\n          </IntegrationName>\n          <DomainName compact={compact}>{integration.domainName}</DomainName>\n        </Labels>\n      </Flex>\n    );\n  }\n}\n\nconst Flex = styled('div')`\n  display: flex;\n`;\ntype StyledProps = Pick<Props, 'compact'>;\nconst Labels = styled('div')<StyledProps>`\n  box-sizing: border-box;\n  display: flex;\n  ${p => (p.compact ? 'align-items: center;' : '')};\n  flex-direction: ${p => (p.compact ? 'row' : 'column')};\n  padding-left: ${space(1)};\n  min-width: 0;\n  justify-content: center;\n`;\n\nconst IntegrationName = styled('div')`\n  font-size: 1.6rem;\n`;\n\n// Not using the overflowEllipsis style import here\n// as it sets width 100% which causes layout issues in the\n// integration list.\nconst DomainName = styled('div')<StyledProps>`\n  color: ${p => (p.compact ? p.theme.gray200 : p.theme.gray400)};\n  margin-left: ${p => (p.compact ? space(1) : 'inherit')};\n  margin-top: ${p => (!p.compact ? space(0.25) : 'inherit')};\n  font-size: 1.4rem;\n  line-height: 1.2;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n"],"sourceRoot":""}