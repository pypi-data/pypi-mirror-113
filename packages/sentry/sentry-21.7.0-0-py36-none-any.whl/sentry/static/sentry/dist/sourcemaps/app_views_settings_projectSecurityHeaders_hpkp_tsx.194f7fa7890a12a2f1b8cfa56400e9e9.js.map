{"version":3,"sources":["webpack:///./app/components/previewFeature.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/hpkp.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"names":["PreviewFeature","type","icon","size","t","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","ProjectHpkpReports","props","params","orgId","projectId","routeTitleGen","keyList","getSecurityDsn","state","withPadding","tct","link","href","getInstructions","getReportOnlyInstructions","DEFAULT_ENDPOINT","endpoint","length","dsn","security","getDynamicText","value","fixed","ReportUri","Link","to","inline","flexibleControlStateSize"],"mappings":"0YAUMA,EAAiB,SAAC,GAAD,QAAEC,YAAF,MAAS,OAAT,SACrB,QAAC,IAAD,CAAOA,KAAMA,EAAMC,MAAM,QAAC,KAAD,CAASC,KAAK,OAAvC,UACGC,OACC,iGAHAJ,E,6BAQN,O,kHCNA,IAZA,SACEK,EACAC,GAGQ,IAFRC,IAEQ,yDADRC,EACQ,uCACFC,EAAW,GAAH,OAAMJ,EAAN,cAAqBC,GAC7BI,EAAOF,EAAc,GAAH,OAAMC,EAAN,cAAoBD,GAAgBC,EAE5D,OAAOF,EAAa,GAAH,OAAMG,EAAN,aAAwBA,I,muBCDtBC,E,0iBAInB,WACE,MAAO,K,oBAGT,WACE,IAAMC,EAAQC,KAAKC,WACnB,OACE,QAAC,IAAD,CAAeF,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGC,KAAKE,wB,GATJC,KAHWL,E,4iCCYAM,E,8iBACnB,WACE,MAA2BJ,KAAKK,MAAMC,OAA/BC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,UACd,MAAO,CAAC,CAAC,UAAD,oBAAyBD,EAAzB,YAAkCC,EAAlC,c,sBAGV,WACE,IAAOA,EAAaR,KAAKK,MAAMC,OAAxBE,UACP,OAAOC,QAAclB,OAAE,kCAAmCiB,GAAW,K,6BAGvE,SAAgBE,GACd,MACE,yTAKyBC,OAAeD,GALxC,UAMA,0B,uCAIJ,SAA0BA,GACxB,MACE,qUAKyBC,OAAeD,GALxC,UAMA,0B,wBAIJ,WACE,IAAOJ,EAAUN,KAAKK,MAAfC,OACAI,EAAWV,KAAKY,MAAhBF,QACP,OAAKA,GAKH,0BACE,QAAC,IAAD,CAAoBX,OAAOR,OAAE,8BAE7B,QAAC,IAAD,KAEA,QAAC,IAAD,CAAWmB,QAASA,EAASH,MAAOD,EAAOC,MAAOC,UAAWF,EAAOE,aAEpE,QAAC,KAAD,YACE,QAAC,KAAD,WAAcjB,OAAE,YAEhB,QAAC,IAAD,CAAWsB,aAAW,EAAtB,WACE,uBACGC,QAAI,2YAMH,CACEC,MACE,QAAC,IAAD,CAAcC,KAAK,+DAM3B,uBACGzB,OAAE,qMAOL,uBACGA,OACC,gFAGJ,wBAAMS,KAAKiB,gBAAgBP,MAE3B,uBACGnB,OAAE,+HAGL,wBAAMS,KAAKkB,0BAA0BR,MAErC,uBACGI,QAAI,gPAIH,CACEC,MACE,aAAGC,KAAK,sFA1Df,S,GAvCmClB,M,+jBCX1CqB,EAAmB,kDAElB,SAASR,EAAeD,GAC7B,IAAMU,EAAWV,EAAQW,OAASX,EAAQ,GAAGY,IAAIC,SAAWJ,EAC5D,OAAOK,OAAe,CACpBC,MAAOL,EACPM,MAAOP,IAUI,SAASQ,EAAT,GAAuD,IAAnCjB,EAAmC,EAAnCA,QAASH,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,UACjD,OACE,QAAC,KAAD,YACE,QAAC,KAAD,WAAcjB,OAAE,iBAChB,QAAC,IAAD,YACE,QAAC,KAAD,CAAYH,KAAK,OAAjB,UACG0B,QACC,sFACA,CACEC,MAAM,QAAC,EAAAa,KAAD,CAAMC,GAAE,oBAAetB,EAAf,qBAAiCC,EAAjC,iBAIpB,QAAC,IAAD,CAAOsB,QAAQ,EAAOC,0BAAwB,EAA9C,UACE,QAAC,IAAD,UAAgBpB,EAAeD,aAdjBiB,E","file":"chunks/app_views_settings_projectSecurityHeaders_hpkp_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\n\nimport Alert from 'app/components/alert';\nimport {IconLab} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = {\n  type?: React.ComponentProps<typeof Alert>['type'];\n};\n\nconst PreviewFeature = ({type = 'info'}: Props) => (\n  <Alert type={type} icon={<IconLab size=\"sm\" />}>\n    {t(\n      'This feature is a preview and may change in the future. Thanks for being an early adopter!'\n    )}\n  </Alert>\n);\n\nexport default PreviewFeature;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport PreviewFeature from 'app/components/previewFeature';\nimport {t, tct} from 'app/locale';\nimport {ProjectKey} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport ReportUri, {\n  getSecurityDsn,\n} from 'app/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & AsyncView['state'];\n\nexport default class ProjectHpkpReports extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('HTTP Public Key Pinning (HPKP)'), projectId, false);\n  }\n\n  getInstructions(keyList: ProjectKey[]) {\n    return (\n      'def middleware(request, response):\\n' +\n      \"    response['Public-Key-Pins'] = \\\\\\n\" +\n      '        \\'pin-sha256=\"cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2+soZS7sWs=\"; \\' \\\\\\n' +\n      '        \\'pin-sha256=\"M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE=\"; \\' \\\\\\n' +\n      \"        'max-age=5184000; includeSubDomains; ' \\\\\\n\" +\n      `        \\'report-uri=\"${getSecurityDsn(keyList)}\"\\' \\n` +\n      '    return response\\n'\n    );\n  }\n\n  getReportOnlyInstructions(keyList: ProjectKey[]) {\n    return (\n      'def middleware(request, response):\\n' +\n      \"    response['Public-Key-Pins-Report-Only'] = \\\\\\n\" +\n      '        \\'pin-sha256=\"cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2+soZS7sWs=\"; \\' \\\\\\n' +\n      '        \\'pin-sha256=\"M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE=\"; \\' \\\\\\n' +\n      \"        'max-age=5184000; includeSubDomains; ' \\\\\\n\" +\n      `        \\'report-uri=\"${getSecurityDsn(keyList)}\"\\' \\n` +\n      '    return response\\n'\n    );\n  }\n\n  renderBody() {\n    const {params} = this.props;\n    const {keyList} = this.state;\n    if (!keyList) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('HTTP Public Key Pinning')} />\n\n        <PreviewFeature />\n\n        <ReportUri keyList={keyList} orgId={params.orgId} projectId={params.projectId} />\n\n        <Panel>\n          <PanelHeader>{t('About')}</PanelHeader>\n\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                `[link:HTTP Public Key Pinning]\n              (HPKP) is a security feature that tells a web client to associate a specific\n              cryptographic public key with a certain web server to decrease the risk of MITM\n              attacks with forged certificates. It's enforced by browser vendors, and Sentry\n              supports capturing violations using the standard reporting hooks.`,\n                {\n                  link: (\n                    <ExternalLink href=\"https://en.wikipedia.org/wiki/HTTP_Public_Key_Pinning\" />\n                  ),\n                }\n              )}\n            </p>\n\n            <p>\n              {t(\n                `To configure HPKP reports\n              in Sentry, you'll need to send a header from your server describing your\n              policy, as well specifying the authenticated Sentry endpoint.`\n              )}\n            </p>\n\n            <p>\n              {t(\n                'For example, in Python you might achieve this via a simple web middleware'\n              )}\n            </p>\n            <pre>{this.getInstructions(keyList)}</pre>\n\n            <p>\n              {t(`Alternatively you can setup HPKP reports to simply send reports rather than\n              actually enforcing the policy`)}\n            </p>\n            <pre>{this.getReportOnlyInstructions(keyList)}</pre>\n\n            <p>\n              {tct(\n                `We recommend setting this up to only run on a percentage of requests, as\n              otherwise you may find that you've quickly exhausted your quota. For more\n              information, take a look at [link:the documentation on MDN].`,\n                {\n                  link: (\n                    <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning\" />\n                  ),\n                }\n              )}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n","import {Link} from 'react-router';\n\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {ProjectKey} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <Field inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"sourceRoot":""}