from typing import Any, Iterator
from vtelem.enums.primitive import Primitive as Primitive, get_fstring as get_fstring, get_size as get_size

class ByteBuffer:
    size: Any
    data: Any
    pos: int
    mutable: Any
    order: Any
    lock: Any
    def __init__(self, data: bytearray = ..., mutable: bool = ..., size: int = ..., order: str = ...) -> None: ...
    def with_pos(self, pos: int = ...) -> Iterator[None]: ...
    def expand_to(self, size: int) -> None: ...
    def set_pos(self, pos: int) -> None: ...
    def advance(self, amount: int, inc_size: bool = ...) -> None: ...
    def get_pos(self) -> int: ...
    def fstring(self, inst: Primitive) -> str: ...
    def read(self, inst: Primitive) -> Any: ...
    def append(self, other: bytearray, data_len: int) -> None: ...
    def crc32(self, initial_val: int = ...) -> int: ...
    def write(self, inst: Primitive, data: Any) -> int: ...
