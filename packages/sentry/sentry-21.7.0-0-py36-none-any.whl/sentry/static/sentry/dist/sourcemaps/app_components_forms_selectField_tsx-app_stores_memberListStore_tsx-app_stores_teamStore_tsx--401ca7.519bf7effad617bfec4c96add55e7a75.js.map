{"version":3,"sources":["webpack:///./app/actions/projectActions.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/components/forms/form.tsx","webpack:///./app/components/forms/formContext.tsx","webpack:///./app/components/forms/formField.tsx","webpack:///./app/components/forms/selectField.tsx","webpack:///./app/stores/memberListStore.tsx","webpack:///./app/stores/projectsStore.tsx","webpack:///./app/stores/teamStore.tsx","webpack:///./app/utils/withApi.tsx","webpack:///./app/utils/withProjects.tsx"],"names":["Reflux","TeamActions","Form","props","context","e","preventDefault","onSubmit","Error","state","data","onSubmitSuccess","onSubmitError","setState","FormState","errors","initialData","error","responseJSON","resetOnError","name","value","this","form","onFieldChange","isSaving","errorMessage","hideErrors","hasChanges","requireChanges","Object","keys","length","isEqual","isError","nonFieldErrors","non_field_errors","getContext","StyledForm","className","t","map","i","children","footerClass","style","marginTop","disabled","submitDisabled","type","submitLabel","onCancel","onClick","marginLeft","cancelLabel","extraButton","React","FormContext","createContext","FormField","target","setValue","finalValue","coerceValue","onChange","getValue","nextProps","nextContext","newError","getError","defined","newValue","hasOwnProperty","defaultValue","required","classNames","getClassName","disabledReason","title","position","size","label","hideErrorMessage","help","cx","getFinalClassNames","shouldShowErrorMessage","htmlFor","getId","getField","renderDisabledReason","ErrorMessage","p","theme","fontSizeMedium","red300","SelectField","opt","coercedValue","isMultiple","v","multi","multiple","options","clearable","creatable","choices","placeholder","isLoading","StyledSelectControl","id","SelectControl","MemberListStore","loaded","init","loadInitialData","items","trigger","isLoaded","getById","getByEmail","email","toLowerCase","getAll","storeConfig","itemsById","loading","reset","listenTo","ProjectActions","onAddTeam","onChangeSlug","onCreateSuccess","onStatsLoadSuccess","onRemoveTeam","onUpdateSuccess","onDeleteTeam","reduce","project","Set","prevSlug","newSlug","prevProject","getBySlug","newProject","slug","assign","touchedIds","entries","forEach","projectId","stats","push","teamSlug","projectIds","getWithTeam","projectWithTeam","removeTeamFromProject","projectSlug","team","teams","newTeams","filter","find","values","sort","a","b","getBySlugs","slugs","includes","getState","projects","ProjectsStore","teamStoreConfig","initialized","onRemoveSuccess","item","itemId","response","nextState","index","findIndex","toString","getActive","isMember","TeamStore","WrappedComponent","persistInFlight","api","Client","clear","getDisplayName","WithProjects","undefined","unsubscribe","loadingProjects"],"mappings":"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","file":"chunks/app_components_forms_selectField_tsx-app_stores_memberListStore_tsx-app_stores_teamStore_tsx--401ca7.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'addTeam',\n  'addTeamError',\n  'addTeamSuccess',\n  'changeSlug',\n  'createSuccess',\n  'loadProjects',\n  'loadStats',\n  'loadStatsError',\n  'loadStatsForProjectSuccess',\n  'loadStatsSuccess',\n  'removeProject',\n  'removeProjectError',\n  'removeProjectSuccess',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'reset',\n  'setActive',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n","import Reflux from 'reflux';\n\nconst TeamActions = Reflux.createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport FormContext, {FormContextData} from 'app/components/forms/formContext';\nimport FormState from 'app/components/forms/state';\nimport {t} from 'app/locale';\n\ntype FormProps = {\n  cancelLabel?: string;\n  onCancel?: () => void;\n  onSubmit?: (\n    data: object,\n    onSubmitSuccess: (data: object) => void,\n    onSubmitError: (error: object) => void\n  ) => void;\n  initialData?: object;\n  onSubmitSuccess?: (data: object) => void;\n  onSubmitError?: (error: object) => void;\n  resetOnError?: boolean;\n  requireChanges?: boolean;\n  errorMessage?: React.ReactNode;\n  hideErrors?: boolean;\n  className?: string;\n  footerClass?: string;\n  submitDisabled?: boolean;\n  submitLabel?: string;\n  extraButton?: React.ReactNode;\n};\n\ntype FormClassState = {\n  data: any;\n  errors: {non_field_errors?: object[]} & object;\n  initialData: object;\n  state: FormState;\n};\n\n// Re-export for compatibility alias.\nexport type Context = FormContextData;\n\nclass Form<\n  Props extends FormProps = FormProps,\n  State extends FormClassState = FormClassState\n> extends React.Component<Props, State> {\n  static defaultProps = {\n    cancelLabel: t('Cancel'),\n    submitLabel: t('Save Changes'),\n    submitDisabled: false,\n    footerClass: 'form-actions align-right',\n    className: 'form-stacked',\n    requireChanges: false,\n    hideErrors: false,\n    resetOnError: false,\n    errorMessage: t(\n      'Unable to save your changes. Please ensure all fields are valid and try again.'\n    ),\n  };\n\n  constructor(props: Props, context: Context) {\n    super(props, context);\n    this.state = {\n      data: {...this.props.initialData},\n      errors: {},\n      initialData: {...this.props.initialData},\n      state: FormState.READY,\n    } as State;\n  }\n\n  getContext() {\n    const {data, errors} = this.state;\n    return {\n      form: {\n        data,\n        errors,\n        onFieldChange: this.onFieldChange,\n      },\n    };\n  }\n\n  onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!this.props.onSubmit) {\n      throw new Error('onSubmit is a required prop');\n    }\n    this.props.onSubmit(this.state.data, this.onSubmitSuccess, this.onSubmitError);\n  };\n\n  onSubmitSuccess = (data: object) => {\n    this.setState({\n      state: FormState.READY,\n      errors: {},\n      initialData: {...this.state.data, ...(data || {})},\n    });\n    this.props.onSubmitSuccess && this.props.onSubmitSuccess(data);\n  };\n\n  onSubmitError = error => {\n    this.setState({\n      state: FormState.ERROR,\n      errors: error.responseJSON,\n    });\n\n    if (this.props.resetOnError) {\n      this.setState({\n        initialData: {},\n      });\n    }\n\n    this.props.onSubmitError && this.props.onSubmitError(error);\n  };\n\n  onFieldChange = (name: string, value: string | number) => {\n    this.setState(state => ({\n      data: {\n        ...state.data,\n        [name]: value,\n      },\n    }));\n  };\n\n  render() {\n    const isSaving = this.state.state === FormState.SAVING;\n    const {initialData, data} = this.state;\n    const {errorMessage, hideErrors, requireChanges} = this.props;\n    const hasChanges = requireChanges\n      ? Object.keys(data).length && !isEqual(data, initialData)\n      : true;\n    const isError = this.state.state === FormState.ERROR;\n    const nonFieldErrors = this.state.errors && this.state.errors.non_field_errors;\n\n    return (\n      <FormContext.Provider value={this.getContext()}>\n        <StyledForm onSubmit={this.onSubmit} className={this.props.className}>\n          {isError && !hideErrors && (\n            <div className=\"alert alert-error alert-block\">\n              {nonFieldErrors ? (\n                <div>\n                  <p>\n                    {t(\n                      'Unable to save your changes. Please correct the following errors try again.'\n                    )}\n                  </p>\n                  <ul>\n                    {nonFieldErrors.map((e, i) => (\n                      <li key={i}>{e}</li>\n                    ))}\n                  </ul>\n                </div>\n              ) : (\n                errorMessage\n              )}\n            </div>\n          )}\n          {this.props.children}\n          <div className={this.props.footerClass} style={{marginTop: 25}}>\n            <button\n              className=\"btn btn-primary\"\n              disabled={isSaving || this.props.submitDisabled || !hasChanges}\n              type=\"submit\"\n            >\n              {this.props.submitLabel}\n            </button>\n            {this.props.onCancel && (\n              <button\n                type=\"button\"\n                className=\"btn btn-default\"\n                disabled={isSaving}\n                onClick={this.props.onCancel}\n                style={{marginLeft: 5}}\n              >\n                {this.props.cancelLabel}\n              </button>\n            )}\n            {this.props.extraButton}\n          </div>\n        </StyledForm>\n      </FormContext.Provider>\n    );\n  }\n}\n\n// Note: this is so we can use this as a selector for SelectField\n// We need to keep `Form` as a React Component because ApiForm extends it :/\nexport const StyledForm = styled('form')``;\n\nexport default Form;\n","import {createContext} from 'react';\n\n/**\n * Context type used on 'classic' or 'old' forms.\n *\n * This is a very different type than what is used on the 'settings'\n * forms which have MobX under the hood.\n */\nexport type FormContextData = {\n  form?: {\n    errors: object;\n    data: object;\n    onFieldChange: (name: string, value: string | number) => void;\n  };\n};\n\n/**\n * Default to undefined to preserve backwards compatibility.\n * The FormField component uses a truthy test to see if it is connected\n * to context or if the control is 'uncontrolled'.\n */\nconst FormContext = createContext<FormContextData>({});\n\nexport default FormContext;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\n\nimport FormContext, {FormContextData} from 'app/components/forms/formContext';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport {Meta} from 'app/types';\nimport {defined} from 'app/utils';\n\ntype Value = string | number | boolean;\n\ntype DefaultProps = {\n  required?: boolean;\n  disabled?: boolean;\n  hideErrorMessage?: boolean;\n};\n\ntype FormFieldProps = DefaultProps & {\n  name: string;\n  style?: object;\n  label?: React.ReactNode;\n  defaultValue?: any;\n  disabledReason?: string;\n  help?: string | React.ReactNode;\n  className?: string;\n  onChange?: (value: Value) => void;\n  error?: string;\n  value?: Value;\n  meta?: Meta;\n};\n\ntype FormFieldState = {\n  error: string | null;\n  value: Value;\n};\n\nexport default class FormField<\n  Props extends FormFieldProps = FormFieldProps,\n  State extends FormFieldState = FormFieldState\n> extends React.PureComponent<Props, State> {\n  static defaultProps: DefaultProps = {\n    hideErrorMessage: false,\n    disabled: false,\n    required: false,\n  };\n\n  constructor(props: Props, context?: any) {\n    super(props, context);\n    this.state = {\n      error: null,\n      value: this.getValue(props, context),\n    } as State;\n  }\n\n  componentDidMount() {}\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props, nextContext: FormContextData) {\n    const newError = this.getError(nextProps, nextContext);\n    if (newError !== this.state.error) {\n      this.setState({error: newError});\n    }\n    if (this.props.value !== nextProps.value || defined(nextContext.form)) {\n      const newValue = this.getValue(nextProps, nextContext);\n      if (newValue !== this.state.value) {\n        this.setValue(newValue);\n      }\n    }\n  }\n\n  componentWillUnmount() {}\n\n  static contextType = FormContext;\n\n  getValue(props: Props, context: FormContextData) {\n    const form = (context || this.context || {}).form;\n    props = props || this.props;\n    if (defined(props.value)) {\n      return props.value;\n    }\n    if (form && form.data.hasOwnProperty(props.name)) {\n      return defined(form.data[props.name]) ? form.data[props.name] : '';\n    }\n    return defined(props.defaultValue) ? props.defaultValue : '';\n  }\n\n  getError(props: Props, context: FormContextData) {\n    const form = (context || this.context || {}).form;\n    props = props || this.props;\n    if (defined(props.error)) {\n      return props.error;\n    }\n    return (form && form.errors[props.name]) || null;\n  }\n\n  getId() {\n    return `id-${this.props.name}`;\n  }\n\n  coerceValue(value: any) {\n    return value;\n  }\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    this.setValue(value);\n  };\n\n  setValue = (value: Value) => {\n    const form = (this.context || {}).form;\n    this.setState(\n      {\n        value,\n      },\n      () => {\n        const finalValue = this.coerceValue(this.state.value);\n        this.props.onChange?.(finalValue);\n        form?.onFieldChange(this.props.name, finalValue);\n      }\n    );\n  };\n\n  getField() {\n    throw new Error('Must be implemented by child.');\n  }\n\n  getClassName(): string {\n    throw new Error('Must be implemented by child.');\n  }\n\n  getFinalClassNames() {\n    const {className, required} = this.props;\n    const {error} = this.state;\n    return classNames(className, this.getClassName(), {\n      'has-error': !!error,\n      required,\n    });\n  }\n\n  renderDisabledReason() {\n    const {disabled, disabledReason} = this.props;\n    if (!disabled) {\n      return null;\n    }\n    if (!disabledReason) {\n      return null;\n    }\n    return <QuestionTooltip title={disabledReason} position=\"top\" size=\"sm\" />;\n  }\n\n  render() {\n    const {label, hideErrorMessage, help, style} = this.props;\n    const {error} = this.state;\n    const cx = this.getFinalClassNames();\n    const shouldShowErrorMessage = error && !hideErrorMessage;\n\n    return (\n      <div style={style} className={cx}>\n        <div className=\"controls\">\n          {label && (\n            <label htmlFor={this.getId()} className=\"control-label\">\n              {label}\n            </label>\n          )}\n          {this.getField()}\n          {this.renderDisabledReason()}\n          {defined(help) && <p className=\"help-block\">{help}</p>}\n          {shouldShowErrorMessage && <ErrorMessage>{error}</ErrorMessage>}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst ErrorMessage = styled('p')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.red300};\n`;\n","import styled from '@emotion/styled';\n\nimport {defined} from 'app/utils';\n\nimport {StyledForm} from './form';\nimport FormField from './formField';\nimport SelectControl, {ControlProps} from './selectControl';\n\ntype SelectProps = Omit<ControlProps, 'onChange' | 'name'>;\ntype FormProps = FormField['props'];\n\ntype Props = FormProps & SelectProps;\n\nexport default class SelectField extends FormField<Props> {\n  static defaultProps = {\n    ...FormField.defaultProps,\n    clearable: true,\n    multiple: false,\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n    const newError = this.getError(nextProps, nextContext);\n    if (newError !== this.state.error) {\n      this.setState({error: newError});\n    }\n    if (this.props.value !== nextProps.value || defined(nextContext.form)) {\n      const newValue = this.getValue(nextProps, nextContext);\n      // This is the only thing that is different from parent, we compare newValue against coerced value in state\n      // To remain compatible with react-select, we need to store the option object that\n      // includes `value` and `label`, but when we submit the format, we need to coerce it\n      // to just return `value`. Also when field changes, it propagates the coerced value up\n      const coercedValue = this.coerceValue(this.state.value);\n\n      // newValue can be empty string because of `getValue`, while coerceValue needs to return null (to differentiate\n      // empty string from cleared item). We could use `!=` to compare, but lets be a bit more explicit with strict equality\n      //\n      // This can happen when this is apart of a field, and it re-renders onChange for a different field,\n      // there will be a mismatch between this component's state.value and `this.getValue` result above\n      if (newValue !== coercedValue && !!newValue !== !!coercedValue) {\n        this.setValue(newValue);\n      }\n    }\n  }\n\n  // Overriding this so that we can support `multi` fields through property\n  getValue(props, context) {\n    const form = (context || this.context || {}).form;\n    props = props || this.props;\n\n    // Don't use `isMultiple` here because we're taking props from args as well\n    const defaultValue = this.isMultiple(props) ? [] : '';\n\n    if (defined(props.value)) {\n      return props.value;\n    }\n    if (form && form.data.hasOwnProperty(props.name)) {\n      return defined(form.data[props.name]) ? form.data[props.name] : defaultValue;\n    }\n    return defined(props.defaultValue) ? props.defaultValue : defaultValue;\n  }\n\n  // We need this to get react-select's `Creatable` to work properly\n  // Otherwise, when you hit \"enter\" to create a new item, the \"selected value\" does\n  // not update with new value (and also new value is not displayed in dropdown)\n  //\n  // This is also needed to get `multi` select working since we need the {label, value} object\n  // for react-select (but forms expect just the value to be propagated)\n  coerceValue(value) {\n    if (!value) {\n      return '';\n    }\n\n    if (this.isMultiple()) {\n      return value.map(v => v.value);\n    } else if (value.hasOwnProperty('value')) {\n      return value.value;\n    }\n\n    return value;\n  }\n\n  isMultiple(props?) {\n    props = props || this.props;\n    // this is to maintain compatibility with the 'multi' prop\n    return props.multi || props.multiple;\n  }\n\n  getClassName() {\n    return '';\n  }\n\n  onChange = opt => {\n    // Changing this will most likely break react-select (e.g. you won't be able to select\n    // a menu option that is from an async request, or a multi select).\n    this.setValue(opt);\n  };\n\n  getField() {\n    const {\n      options,\n      clearable,\n      creatable,\n      choices,\n      placeholder,\n      disabled,\n      required,\n      name,\n      isLoading,\n    } = this.props;\n\n    return (\n      <StyledSelectControl\n        creatable={creatable}\n        id={this.getId()}\n        choices={choices}\n        options={options}\n        placeholder={placeholder}\n        disabled={disabled}\n        required={required}\n        value={this.state.value}\n        onChange={this.onChange}\n        clearable={clearable}\n        multiple={this.isMultiple()}\n        name={name}\n        isLoading={isLoading}\n      />\n    );\n  }\n}\n\n// This is to match other fields that are wrapped by a `div.control-group`\nconst StyledSelectControl = styled(SelectControl)`\n  ${StyledForm} &, .form-stacked & {\n    .control-group & {\n      margin-bottom: 0;\n    }\n\n    margin-bottom: 15px;\n  }\n`;\n","import Reflux from 'reflux';\n\nimport {User} from 'app/types';\n\ntype MemberListStoreInterface = {\n  state: User[];\n  loaded: boolean;\n  loadInitialData: (items: User[]) => void;\n  isLoaded: () => boolean;\n  getById: (id: string) => User | undefined;\n  getByEmail: (email: string) => User | undefined;\n  getAll: () => User[];\n};\n\nconst memberListStoreConfig: Reflux.StoreDefinition & MemberListStoreInterface = {\n  // listenables: MemberActions,\n\n  loaded: false,\n  state: [],\n\n  init() {\n    this.state = [];\n    this.loaded = false;\n  },\n\n  // TODO(dcramer): this should actually come from an action of some sorts\n  loadInitialData(items: User[]) {\n    this.state = items;\n    this.loaded = true;\n    this.trigger(this.state, 'initial');\n  },\n\n  isLoaded() {\n    return this.loaded;\n  },\n\n  getById(id) {\n    if (!this.state) {\n      return undefined;\n    }\n\n    id = '' + id;\n    for (let i = 0; i < this.state.length; i++) {\n      if (this.state[i].id === id) {\n        return this.state[i];\n      }\n    }\n    return undefined;\n  },\n\n  getByEmail(email) {\n    if (!this.state) {\n      return undefined;\n    }\n\n    email = email.toLowerCase();\n    for (let i = 0; i < this.state.length; i++) {\n      if (this.state[i].email.toLowerCase() === email) {\n        return this.state[i];\n      }\n    }\n    return undefined;\n  },\n\n  getAll() {\n    return this.state;\n  },\n};\n\ntype MemberListStore = Reflux.Store & MemberListStoreInterface;\n\nconst MemberListStore = Reflux.createStore(memberListStoreConfig) as MemberListStore;\n\nexport default MemberListStore;\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport TeamActions from 'app/actions/teamActions';\nimport {Project, Team} from 'app/types';\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\ntype StatsData = Record<string, Project['stats']>;\n\n/**\n * Attributes that need typing but aren't part of the external interface,\n */\ntype Internals = {\n  itemsById: Record<string, Project>;\n  loading: boolean;\n};\n\ntype ProjectsStoreInterface = {\n  init: () => void;\n  reset: () => void;\n  loadInitialData: (projects: Project[]) => void;\n  onStatsLoadSuccess: (data: StatsData) => void;\n  onChangeSlug: (prevSlug: string, newSlug: string) => void;\n  onCreateSuccess: (project: Project) => void;\n  onUpdateSuccess: (data: Partial<Project>) => void;\n  onDeleteTeam: (slug: string) => void;\n  onRemoveTeam: (teamSlug: string, projectSlug: string) => void;\n  onAddTeam: (team: Team, projectSlug: string) => void;\n  removeTeamFromProject: (teamSlug: string, project: Project) => void;\n  getWithTeam: (teamSlug: string) => Project[];\n  getAll: () => Project[];\n  getBySlugs: (slug: string[]) => Project[];\n  getState: (slugs?: string[]) => State;\n  getById: (id?: string) => Project | undefined;\n  getBySlug: (slug?: string) => Project | undefined;\n};\n\nconst storeConfig: Reflux.StoreDefinition & Internals & ProjectsStoreInterface = {\n  itemsById: {},\n  loading: true,\n\n  init() {\n    this.reset();\n\n    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);\n    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);\n    this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);\n    this.listenTo(ProjectActions.loadProjects, this.loadInitialData);\n    this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam);\n    this.listenTo(ProjectActions.reset, this.reset);\n    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);\n\n    this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam);\n  },\n\n  reset() {\n    this.itemsById = {};\n    this.loading = true;\n  },\n\n  loadInitialData(items: Project[]) {\n    this.itemsById = items.reduce((map, project) => {\n      map[project.id] = project;\n      return map;\n    }, {});\n    this.loading = false;\n    this.trigger(new Set(Object.keys(this.itemsById)));\n  },\n\n  onChangeSlug(prevSlug: string, newSlug: string) {\n    const prevProject = this.getBySlug(prevSlug);\n\n    // This shouldn't happen\n    if (!prevProject) {\n      return;\n    }\n\n    const newProject = {\n      ...prevProject,\n      slug: newSlug,\n    };\n\n    this.itemsById = {\n      ...this.itemsById,\n      [newProject.id]: newProject,\n    };\n\n    // Ideally we'd always trigger this.itemsById, but following existing patterns\n    // so we don't break things\n    this.trigger(new Set([prevProject.id]));\n  },\n\n  onCreateSuccess(project: Project) {\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: project,\n    };\n    this.trigger(new Set([project.id]));\n  },\n\n  onUpdateSuccess(data: Partial<Project>) {\n    const project = this.getById(data.id);\n    if (!project) {\n      return;\n    }\n    const newProject = Object.assign({}, project, data);\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: newProject,\n    };\n    this.trigger(new Set([data.id]));\n  },\n\n  onStatsLoadSuccess(data) {\n    const touchedIds: string[] = [];\n    Object.entries(data || {}).forEach(([projectId, stats]) => {\n      if (projectId in this.itemsById) {\n        this.itemsById[projectId].stats = stats;\n        touchedIds.push(projectId);\n      }\n    });\n    this.trigger(new Set(touchedIds));\n  },\n\n  /**\n   * Listener for when a team is completely removed\n   *\n   * @param teamSlug Team Slug\n   */\n  onDeleteTeam(teamSlug: string) {\n    // Look for team in all projects\n    const projectIds = this.getWithTeam(teamSlug).map(projectWithTeam => {\n      this.removeTeamFromProject(teamSlug, projectWithTeam);\n      return projectWithTeam.id;\n    });\n\n    this.trigger(new Set([projectIds]));\n  },\n\n  onRemoveTeam(teamSlug: string, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n    if (!project) {\n      return;\n    }\n\n    this.removeTeamFromProject(teamSlug, project);\n    this.trigger(new Set([project.id]));\n  },\n\n  onAddTeam(team: Team, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    // Don't do anything if we can't find a project\n    if (!project) {\n      return;\n    }\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: [...project.teams, team],\n      },\n    };\n\n    this.trigger(new Set([project.id]));\n  },\n\n  // Internal method, does not trigger\n  removeTeamFromProject(teamSlug: string, project: Project) {\n    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: newTeams,\n      },\n    };\n  },\n\n  /**\n   * Returns a list of projects that has the specified team\n   *\n   * @param {String} teamSlug Slug of team to find in projects\n   */\n  getWithTeam(teamSlug: string) {\n    return this.getAll().filter(({teams}) => teams.find(({slug}) => slug === teamSlug));\n  },\n\n  getAll() {\n    return Object.values(this.itemsById).sort((a: Project, b: Project) => {\n      if (a.slug > b.slug) {\n        return 1;\n      }\n      if (a.slug < b.slug) {\n        return -1;\n      }\n      return 0;\n    });\n  },\n\n  getById(id) {\n    return this.getAll().find(project => project.id === id);\n  },\n\n  getBySlug(slug) {\n    return this.getAll().find(project => project.slug === slug);\n  },\n\n  getBySlugs(slugs: string[]) {\n    return this.getAll().filter(project => slugs.includes(project.slug));\n  },\n\n  getState(slugs?: string[]): State {\n    return {\n      projects: slugs ? this.getBySlugs(slugs) : this.getAll(),\n      loading: this.loading,\n    };\n  },\n};\n\ntype ProjectsStore = Reflux.Store & ProjectsStoreInterface;\n\nconst ProjectsStore = Reflux.createStore(storeConfig) as ProjectsStore;\n\nexport default ProjectsStore;\n","import Reflux from 'reflux';\n\nimport TeamActions from 'app/actions/teamActions';\nimport {Team} from 'app/types';\n\ntype TeamStoreInterface = {\n  initialized: boolean;\n  state: Team[];\n  reset: () => void;\n  loadInitialData: (items: Team[]) => void;\n  onUpdateSuccess: (itemId: string, response: Team) => void;\n  onRemoveSuccess: (slug: string) => void;\n  onCreateSuccess: (team: Team) => void;\n  getById: (id: string) => Team | null;\n  getBySlug: (slug: string) => Team | null;\n  getActive: () => Team[];\n  getAll: () => Team[];\n};\n\nconst teamStoreConfig: Reflux.StoreDefinition & TeamStoreInterface = {\n  initialized: false,\n  state: [],\n\n  init() {\n    this.state = [];\n\n    this.listenTo(TeamActions.createTeamSuccess, this.onCreateSuccess);\n    this.listenTo(TeamActions.fetchDetailsSuccess, this.onUpdateSuccess);\n    this.listenTo(TeamActions.loadTeams, this.loadInitialData);\n    this.listenTo(TeamActions.removeTeamSuccess, this.onRemoveSuccess);\n    this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);\n  },\n\n  reset() {\n    this.state = [];\n  },\n\n  loadInitialData(items) {\n    this.initialized = true;\n    this.state = items;\n    this.trigger(new Set(items.map(item => item.id)));\n  },\n\n  onUpdateSuccess(itemId, response) {\n    if (!response) {\n      return;\n    }\n\n    const item = this.getBySlug(itemId);\n\n    if (!item) {\n      this.state.push(response);\n      this.trigger(new Set([itemId]));\n      return;\n    }\n\n    // Slug was changed\n    // Note: This is the proper way to handle slug changes but unfortunately not all of our\n    // components use stores correctly. To be safe reload browser :((\n    if (response.slug !== itemId) {\n      // Remove old team\n      this.state = this.state.filter(({slug}) => slug !== itemId);\n\n      // Add team w/ updated slug\n      this.state.push(response);\n      this.trigger(new Set([response.slug]));\n      return;\n    }\n\n    const nextState = [...this.state];\n    const index = nextState.findIndex(team => team.slug === response.slug);\n    nextState[index] = response;\n    this.state = nextState;\n\n    this.trigger(new Set([itemId]));\n  },\n\n  onRemoveSuccess(slug: string) {\n    this.loadInitialData(this.state.filter(team => team.slug !== slug));\n  },\n\n  onCreateSuccess(team: Team) {\n    this.loadInitialData([...this.state, team]);\n  },\n\n  getById(id: string) {\n    return this.state.find(item => item.id.toString() === id.toString()) || null;\n  },\n\n  getBySlug(slug: string) {\n    return this.state.find(item => item.slug === slug) || null;\n  },\n\n  getActive() {\n    return this.state.filter(item => item.isMember);\n  },\n\n  getAll() {\n    return this.state;\n  },\n};\n\ntype TeamStore = Reflux.Store & TeamStoreInterface;\n\nconst TeamStore = Reflux.createStore(teamStoreConfig) as TeamStore;\n\nexport default TeamStore;\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n","import * as React from 'react';\n\nimport ProjectsStore from 'app/stores/projectsStore';\nimport {Project} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedProjectsProps = {\n  projects: Project[];\n  loadingProjects?: boolean;\n};\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\n/**\n * Higher order component that uses ProjectsStore and provides a list of projects\n */\nfunction withProjects<P extends InjectedProjectsProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithProjects extends React.Component<\n    Omit<P, keyof InjectedProjectsProps> & Partial<InjectedProjectsProps>,\n    State\n  > {\n    static displayName = `withProjects(${getDisplayName(WrappedComponent)})`;\n\n    state: State = ProjectsStore.getState();\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = ProjectsStore.listen(\n      () => this.setState(ProjectsStore.getState()),\n      undefined\n    );\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P)}\n          projects={this.state.projects}\n          loadingProjects={this.state.loading}\n        />\n      );\n    }\n  }\n\n  return WithProjects;\n}\n\nexport default withProjects;\n"],"sourceRoot":""}