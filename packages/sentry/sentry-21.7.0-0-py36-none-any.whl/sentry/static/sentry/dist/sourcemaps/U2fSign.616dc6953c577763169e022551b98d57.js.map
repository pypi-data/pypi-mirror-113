{"version":3,"sources":["webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx"],"names":["U2fInterface","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","setState","invokeU2fFlow","ref","form","value","JSON","stringify","props","challengeData","state","supportMail","ConfigStore","support","href","t","className","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","onClick","onTryAgain","u2f","supported","this","promise","flowMode","authenticateRequests","Error","registerRequests","then","data","u2fResponse","challenge","onTap","response","catch","submit","err","failure","metaData","type","Sentry","silentIfUnsupported","renderFailure","children","name","bindChallengeElement","bindResponseElement","renderBody","renderPrompt","renderUnsupported","React","MESSAGES","signin","sudo","enroll","U2fSign","displayMode","Component"],"mappings":"opDA8BMA,E,0nBACW,CACbC,YAAa,KACbC,YAAa,KACbC,iBAAkB,KAClBC,eAAe,EACfC,cAAe,KACfC,gBAAiB,Q,gCAuFN,WACX,EAAKC,SACH,CAACH,eAAe,EAAOC,cAAe,OACtC,WAAW,EAAKG,uB,0CAIwC,SAAAC,GAC1D,EAAKF,SAAS,CACZJ,iBAAkBM,EAClBP,YAAaO,GAAOA,EAAIC,OAGtBD,IACFA,EAAIE,MAAQC,KAAKC,UAAU,EAAKC,MAAMC,oB,yCAIiB,SAAAN,GAAG,OAC5D,EAAKF,SAAS,CAACD,gBAAiBG,Q,mCAuBlB,WACd,IAAOJ,EAAiB,EAAKW,MAAtBX,cACDY,EAAcC,QAAgB,gBAC9BC,EAAUF,GACd,aAAGG,KAAM,UAAYH,EAArB,SAAmCA,KAEnC,0BAAOI,OAAE,aAEX,OACE,eAAKC,UAAU,kBAAf,WACE,0BACE,4BAASD,OAAE,aAAqB,IAE9B,CACEE,eAAeF,OAAE,kDACjBG,cAAcH,OAAE,sCAChBI,kBAAkBJ,OAAE,kCACpBK,gBAAgBL,OAAE,+CAClBM,WAAWC,QACT,8NAKA,CACEC,IAAI,gBACJC,IAAI,gBACJX,aAGJd,GAAiB,OAGtB,EAAK0B,cACJ,eAAKC,MAAO,CAACC,UAAW,IAAxB,UACE,aAAGC,QAAS,EAAKC,WAAYb,UAAU,kBAAvC,UACGD,OAAE,uB,uEAlKf,oGAC0Be,kBAD1B,OACQC,EADR,OAIEC,KAAK/B,SAAS,CAACN,YAAaoC,IAExBA,GACFC,KAAK9B,gBAPT,gD,wEAWA,WAAgB,IACV+B,EADU,OAGd,GAA4B,SAAxBD,KAAKxB,MAAM0B,SACbD,EAAUH,SAASE,KAAKxB,MAAMC,cAAc0B,0BACvC,IAA4B,WAAxBH,KAAKxB,MAAM0B,SAIpB,MAAM,IAAIE,MAAJ,iCAAoCJ,KAAKxB,MAAM0B,SAA/C,MAHN,MAAiDF,KAAKxB,MAAMC,cAArD4B,EAAP,EAAOA,iBAAkBF,EAAzB,EAAyBA,qBACzBF,EAAUH,aAAaO,EAAkBF,GAK3CF,EACGK,MAAK,SAAAC,GACJ,EAAKtC,SACH,CACEH,eAAe,IAEjB,WACE,IAQuB,EARjB0C,EAAclC,KAAKC,UAAUgC,GAC7BE,EAAYnC,KAAKC,UAAU,EAAKC,MAAMC,eAExC,EAAKC,MAAMV,kBAEb,EAAKU,MAAMV,gBAAgBK,MAAQmC,GAGhC,EAAKhC,MAAMkC,MAKhB,EAAKlC,MACFkC,MAAM,CACLC,SAAUH,EACVC,cAEDG,OAAM,WAEL,EAAK3C,SAAS,CACZF,cAAe,gBACfD,eAAe,OAbnB,YAAKY,MAAMd,mBAAX,SAAwBiD,eAmB/BD,OAAM,SAAAE,GACL,IAAIC,EAAU,eAGVD,EAAIE,WACoB,sBAAtBF,EAAIE,SAASC,KAEbF,EAD0B,WAAxB,EAAKvC,MAAM0B,SACH,mBAEA,iBAEmB,gBAAtBY,EAAIE,SAASC,OACtBF,EAAU,cAMdG,KAAwBJ,GACxB,EAAK7C,SAAS,CACZF,cAAegD,EACfjD,eAAe,S,+BA0BvB,WACE,OAAOkC,KAAKxB,MAAM2C,oBAAsB,MACtC,eAAKnC,UAAU,UAAf,UACE,eAAKA,UAAU,QAAf,UACE,aAAGA,UAAU,QAAb,UACGD,OAAE,gO,uBAYb,WACE,MAAoC,cAA7BiB,KAAKtB,MAAMX,gB,wBA+CpB,WACE,OAAOiC,KAAKtB,MAAMX,cAAgBiC,KAAKoB,gBAAkBpB,KAAKxB,MAAM6C,W,0BAGtE,WACE,IAAO3B,EAASM,KAAKxB,MAAdkB,MAEP,OACE,eACEA,MAAOA,EACPV,UACE,WACCgB,KAAKtB,MAAMZ,cAAgB,UAAY,KACvCkC,KAAKtB,MAAMX,cAAgB,kBAAoB,IALpD,WAQE,eAAKiB,UAAU,yBAAf,WACE,eAAKA,UAAU,mBACf,eAAKA,UAAU,sBACf,eAAKA,UAAU,eAAf,WACE,gBAAMA,UAAU,SAChB,gBAAMA,UAAU,SAChB,gBAAMA,UAAU,eAGpB,iBAAOiC,KAAK,SAASK,KAAK,YAAYnD,IAAK6B,KAAKuB,wBAChD,iBAAON,KAAK,SAASK,KAAK,WAAWnD,IAAK6B,KAAKwB,uBAC/C,eAAKxC,UAAU,QAAf,SAAwBgB,KAAKyB,oB,oBAKnC,WACE,IAAO9D,EAAeqC,KAAKtB,MAApBf,YAGP,OAAoB,OAAhBA,EACK,KAGJA,EAIEqC,KAAK0B,eAHH1B,KAAK2B,wB,GA7NSC,aAArBlE,E,2BAoON,Q,ulBC5PA,IAAMmE,EAAW,CACfC,QAAQ/C,OACN,kFAEFgD,MAAMhD,OAAE,oEACRiD,QAAQjD,OACN,oFAUEkD,E,wiBAKJ,WACE,MAAgCjC,KAAKxB,MAA9B0D,EAAP,EAAOA,YAAgB1D,GAAvB,YACM0B,EAA2B,WAAhBgC,EAA2B,SAAW,OACvD,OACE,QAAC,EAAD,OACM1D,GADN,IAEE2C,oBAAqC,SAAhBe,EACrBhC,SAAUA,EAHZ,UAKE,sBAAI2B,EAASK,IAAgB,c,GAdfC,aAAhBF,E,8BAAAA,E,eACkB,CACpBC,YAAa,WAkBjB","file":"chunks/U2fSign.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport * as Sentry from '@sentry/react';\nimport u2f from 'u2f-api';\n\nimport {t, tct} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport {ChallengeData} from 'app/types';\n\ntype TapParams = {\n  response: string;\n  challenge: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  silentIfUnsupported: boolean;\n  onTap: ({response, challenge}: TapParams) => Promise<void>;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  responseElement: HTMLInputElement | null;\n  formElement: HTMLFormElement | null;\n  challengeElement: HTMLInputElement | null;\n  isSupported: boolean | null;\n  hasBeenTapped: boolean;\n  deviceFailure: string | null;\n};\n\nclass U2fInterface extends React.Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n  };\n\n  async componentDidMount() {\n    const supported = await u2f.isSupported();\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    if (supported) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  invokeU2fFlow() {\n    let promise: Promise<u2f.SignResponse | u2f.RegisterResponse>;\n\n    if (this.props.flowMode === 'sign') {\n      promise = u2f.sign(this.props.challengeData.authenticateRequests);\n    } else if (this.props.flowMode === 'enroll') {\n      const {registerRequests, authenticateRequests} = this.props.challengeData;\n      promise = u2f.register(registerRequests, authenticateRequests);\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = JSON.stringify(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n        });\n      });\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already in use.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                '[p1:The Sentry server administrator modified the ' +\n                  'device registrations.]' +\n                  '[p2:You need to remove and re-add the device to continue ' +\n                  'using your U2F device. Use a different sign-in method or ' +\n                  'contact [support] for assistance.]',\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure ? ' device-failure' : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default U2fInterface;\n","import {Component} from 'react';\n\nimport {t} from 'app/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = U2fInterface['props'];\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode: 'signin' | 'enroll' | 'sudo';\n};\n\nclass U2fSign extends Component<Props> {\n  static defaultProps = {\n    displayMode: 'signin',\n  };\n\n  render() {\n    const {displayMode, ...props} = this.props;\n    const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n    return (\n      <U2fInterface\n        {...props}\n        silentIfUnsupported={displayMode === 'sudo'}\n        flowMode={flowMode}\n      >\n        <p>{MESSAGES[displayMode] || null}</p>\n      </U2fInterface>\n    );\n  }\n}\n\nexport default U2fSign;\n"],"sourceRoot":""}