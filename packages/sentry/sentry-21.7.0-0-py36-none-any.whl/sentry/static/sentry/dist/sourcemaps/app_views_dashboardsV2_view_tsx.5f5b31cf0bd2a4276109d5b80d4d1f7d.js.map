{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/dashboardsV2/orgDashboards.tsx","webpack:///./app/views/dashboardsV2/view.tsx"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","OrgDashboards","loading","reloading","error","errors","dashboards","selectedDashboard","prevProps","isEqual","params","dashboardId","this","props","remountComponent","organization","url","slug","endpoints","push","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","dashboard_id","state","Array","isArray","stateKey","data","location","length","browserHistory","pathname","query","dashboard","getDashboards","reloadData","bind","Object","values","find","resp","status","features","includes","t","AsyncComponent","ViewEditDashboard","api","DashboardBasicFeature","initialState","DashboardState","withApi","withOrganization","hookName","renderDisabled","type"],"mappings":"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","file":"chunks/app_views_dashboardsV2_view_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'app/api';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport NotFound from 'app/components/errors/notFound';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\nimport {DashboardDetails, DashboardListItem} from './types';\n\ntype OrgDashboardsChildrenProps = {\n  dashboard: DashboardDetails | null;\n  dashboards: DashboardListItem[];\n  error: boolean;\n  reloadData: () => void;\n};\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  params: {orgId: string; dashboardId?: string};\n  location: Location;\n  children: (props: OrgDashboardsChildrenProps) => React.ReactNode;\n};\n\ntype State = {\n  // endpoint response\n  dashboards: DashboardListItem[] | null;\n  /**\n   * The currently selected dashboard.\n   */\n  selectedDashboard: DashboardDetails | null;\n} & AsyncComponent['state'];\n\nclass OrgDashboards extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n\n    dashboards: [],\n    selectedDashboard: null,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.params.dashboardId, this.props.params.dashboardId)) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const url = `/organizations/${organization.slug}/dashboards/`;\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [['dashboards', url]];\n\n    if (params.dashboardId) {\n      endpoints.push(['selectedDashboard', `${url}${params.dashboardId}/`]);\n      trackAnalyticsEvent({\n        eventKey: 'dashboards2.view',\n        eventName: 'Dashboards2: View dashboard',\n        organization_id: parseInt(this.props.organization.id, 10),\n        dashboard_id: params.dashboardId,\n      });\n    }\n\n    return endpoints;\n  }\n\n  getDashboards(): DashboardListItem[] {\n    const {dashboards} = this.state;\n\n    return Array.isArray(dashboards) ? dashboards : [];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    const {params, organization, location} = this.props;\n    if (params.dashboardId || stateKey === 'selectedDashboard') {\n      return;\n    }\n\n    // If we don't have a selected dashboard, and one isn't going to arrive\n    // we can redirect to the first dashboard in the list.\n    const dashboardId = data.length ? data[0].id : 'default-overview';\n    const url = `/organizations/${organization.slug}/dashboard/${dashboardId}/`;\n    browserHistory.replace({\n      pathname: url,\n      query: {\n        ...location.query,\n      },\n    });\n  }\n\n  renderBody() {\n    const {children} = this.props;\n    const {selectedDashboard, error} = this.state;\n\n    return children({\n      error,\n      dashboard: selectedDashboard,\n      dashboards: this.getDashboards(),\n      reloadData: this.reloadData.bind(this),\n    });\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n\n    return super.renderError(error, true, true);\n  }\n\n  renderComponent() {\n    const {organization, location} = this.props;\n\n    if (!organization.features.includes('dashboards-basic')) {\n      // Redirect to Dashboards v1\n      browserHistory.replace({\n        pathname: `/organizations/${organization.slug}/dashboards/`,\n        query: {\n          ...location.query,\n        },\n      });\n      return null;\n    }\n\n    return (\n      <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n        {super.renderComponent()}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default OrgDashboards;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'app/api';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport NotFound from 'app/components/errors/notFound';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState} from './types';\n\ntype Props = RouteComponentProps<{orgId: string; dashboardId: string}, {}> & {\n  api: Client;\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nfunction ViewEditDashboard(props: Props) {\n  const {organization, params, api, location} = props;\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, reloadData}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <DashboardDetail\n              {...props}\n              initialState={DashboardState.VIEW}\n              dashboard={dashboard}\n              dashboards={dashboards}\n              reloadData={reloadData}\n            />\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withApi(withOrganization(ViewEditDashboard));\n\ntype FeatureProps = {\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nexport const DashboardBasicFeature = ({organization, children}: FeatureProps) => {\n  const renderDisabled = () => (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-page\"\n      features={['organizations:dashboards-basic']}\n      organization={organization}\n      renderDisabled={renderDisabled}\n    >\n      {children}\n    </Feature>\n  );\n};\n"],"sourceRoot":""}