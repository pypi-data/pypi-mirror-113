{"version":3,"sources":["webpack:///./app/data/forms/apiApplication.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/apiApplications/details.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///../node_modules/core-js/internals/date-to-primitive.js","webpack:///../node_modules/core-js/modules/es.date.to-primitive.js","webpack:///../node_modules/core-js/modules/es.symbol.to-primitive.js"],"names":["forms","title","fields","name","type","required","label","help","setValue","value","getDynamicText","fixed","placeholder","multiline","getValue","val","extractMultilineFields","convertMultilineFieldValue","AsyncView","this","getTitle","renderComponent","AsyncComponent","ApiApplicationsDetails","props","params","appId","t","urlPrefix","ConfigStore","apiMethod","apiEndpoint","saveOnBlur","allowUndo","initialData","state","app","onSubmitError","addErrorMessage","apiApplication","FormPanel","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","highlighted","React","JsonForm","location","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","features","formGroup","i","renderForm","withRouter","anObject","toPrimitive","module","exports","hint","TypeError","createNonEnumerableProperty","dateToPrimitive","TO_PRIMITIVE","wellKnownSymbol","DatePrototype","Date","prototype","defineWellKnownSymbol"],"mappings":"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","file":"chunks/app_views_settings_account_apiApplications_details_tsx-node_modules_core-js_modules_es_date_t-6e2771.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {convertMultilineFieldValue, extractMultilineFields} from 'app/utils';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\nconst forms: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Application Details',\n    fields: [\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Name',\n        help: 'e.g. My Application',\n        setValue: value => getDynamicText({value, fixed: 'CI_APPLICATION_NAME'}),\n      },\n      {\n        name: 'homepageUrl',\n        type: 'string',\n        required: false,\n        label: 'Homepage',\n        placeholder: 'e.g. https://example.com/',\n        help: \"An optional link to your application's homepage\",\n      },\n      {\n        name: 'privacyUrl',\n        type: 'string',\n        label: 'Privacy Policy',\n        placeholder: 'e.g. https://example.com/privacy',\n        help: 'An optional link to your Privacy Policy',\n      },\n      {\n        name: 'termsUrl',\n        type: 'string',\n        label: 'Terms of Service',\n        placeholder: 'e.g. https://example.com/terms',\n        help: 'An optional link to your Terms of Service agreement',\n      },\n    ],\n  },\n\n  {\n    title: 'Security',\n    fields: [\n      {\n        name: 'redirectUris',\n        type: 'string',\n        multiline: true,\n        placeholder: 'e.g. https://example.com/oauth/complete',\n        label: 'Authorized Redirect URIs',\n        help: 'Separate multiple entries with a newline.',\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'allowedOrigins',\n        type: 'string',\n        multiline: true,\n        placeholder: 'e.g. example.com',\n        label: 'Authorized JavaScript Origins',\n        help: 'Separate multiple entries with a newline.',\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n    ],\n  },\n];\n\nexport default forms;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport apiApplication from 'app/data/forms/apiApplication';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport {ApiApplication} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport FormField from 'app/views/settings/components/forms/formField';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype Props = RouteComponentProps<{appId: string}, {}>;\ntype State = {\n  app: ApiApplication;\n} & AsyncView['state'];\n\nclass ApiApplicationsDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['app', `/api-applications/${this.props.params.appId}/`]];\n  }\n\n  getTitle() {\n    return t('Application Details');\n  }\n\n  renderBody() {\n    const urlPrefix = ConfigStore.get('urlPrefix');\n\n    return (\n      <div>\n        <SettingsPageHeader title={this.getTitle()} />\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint={`/api-applications/${this.props.params.appId}/`}\n          saveOnBlur\n          allowUndo\n          initialData={this.state.app}\n          onSubmitError={() => addErrorMessage('Unable to save change')}\n        >\n          <JsonForm forms={apiApplication} />\n\n          <Panel>\n            <PanelHeader>{t('Credentials')}</PanelHeader>\n\n            <PanelBody>\n              <FormField name=\"clientID\" label=\"Client ID\">\n                {({value}) => (\n                  <div>\n                    <TextCopyInput>\n                      {getDynamicText({value, fixed: 'CI_CLIENT_ID'})}\n                    </TextCopyInput>\n                  </div>\n                )}\n              </FormField>\n\n              <FormField\n                name=\"clientSecret\"\n                label=\"Client Secret\"\n                help={t(`Your secret is only available briefly after application creation. Make\n                  sure to save this value!`)}\n              >\n                {({value}) =>\n                  value ? (\n                    <TextCopyInput>\n                      {getDynamicText({value, fixed: 'CI_CLIENT_SECRET'})}\n                    </TextCopyInput>\n                  ) : (\n                    <em>hidden</em>\n                  )\n                }\n              </FormField>\n\n              <FormField name=\"\" label=\"Authorization URL\">\n                {() => <TextCopyInput>{`${urlPrefix}/oauth/authorize/`}</TextCopyInput>}\n              </FormField>\n\n              <FormField name=\"\" label=\"Token URL\">\n                {() => <TextCopyInput>{`${urlPrefix}/oauth/token/`}</TextCopyInput>}\n              </FormField>\n            </PanelBody>\n          </Panel>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default ApiApplicationsDetails;\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","'use strict';\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\n// `Date.prototype[@@toPrimitive](hint)` method implementation\n// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {\n    throw TypeError('Incorrect hint');\n  } return toPrimitive(anObject(this), hint !== 'number');\n};\n","var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar dateToPrimitive = require('../internals/date-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar DatePrototype = Date.prototype;\n\n// `Date.prototype[@@toPrimitive]` method\n// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive\nif (!(TO_PRIMITIVE in DatePrototype)) {\n  createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);\n}\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toPrimitive` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.toprimitive\ndefineWellKnownSymbol('toPrimitive');\n"],"sourceRoot":""}