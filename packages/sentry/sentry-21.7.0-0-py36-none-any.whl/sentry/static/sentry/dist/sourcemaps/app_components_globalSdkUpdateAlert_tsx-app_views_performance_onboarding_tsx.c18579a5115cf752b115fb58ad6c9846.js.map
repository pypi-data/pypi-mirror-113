{"version":3,"sources":["webpack:///./app/components/globalSdkUpdateAlert.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/performance/onboarding.tsx"],"names":["recordAnalyticsSnoozed","organization","trackAnalyticsEvent","eventKey","eventName","organization_id","id","InnerGlobalSdkSuggestions","isDismissed","props","api","promptsUpdate","organizationId","feature","status","setState","this","promptsCheck","prompt","promptIsDismissed","list","selection","sdkUpdates","Wrapper","state","projects","length","ALL_ACCESS_PROJECTS","filter","update","includes","parseInt","projectId","reduce","suggestions","sdk","showBroadcastsPanel","priority","onClick","SidebarPanelActions","SidebarPanelKey","recordAnalyticsClicked","t","notice","type","icon","Content","Actions","title","snoozePrompt","React","p","theme","breakpoints","space","GlobalSdkSuggestions","withOrganization","withSdkUpdates","withGlobalSelection","withApi","OnboardingPanel","className","image","children","Container","IlloBox","StyledBox","performanceSetupUrl","docsLink","external","href","PERFORMANCE_TOUR_STEPS","src","tourMetrics","body","actions","tourCorrelate","tourAlert","tourTrace","Onboarding","PerfImage","emptyStateImg","ButtonList","gap","steps","onAdvance","step","duration","onCloseModal","doneUrl","doneText","showModal","target","ButtonBar"],"mappings":"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","file":"chunks/app_components_globalSdkUpdateAlert_tsx-app_views_performance_onboarding_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {promptsCheck, promptsUpdate} from 'app/actionCreators/prompts';\nimport SidebarPanelActions from 'app/actions/sidebarPanelActions';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';\nimport {IconUpgrade} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {\n  GlobalSelection,\n  Organization,\n  ProjectSdkUpdates,\n  SDKUpdatesSuggestion,\n} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport {promptIsDismissed} from 'app/utils/promptIsDismissed';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\nimport withSdkUpdates from 'app/utils/withSdkUpdates';\n\nimport {SidebarPanelKey} from './sidebar/types';\nimport Button from './button';\n\ntype Props = React.ComponentProps<typeof Alert> & {\n  api: Client;\n  organization: Organization;\n  sdkUpdates?: ProjectSdkUpdates[] | null;\n  selection?: GlobalSelection;\n  Wrapper?: React.ComponentType;\n};\n\ntype State = {\n  isDismissed: boolean | null;\n};\n\ntype AnalyticsOpts = {\n  organization: Organization;\n};\n\nconst recordAnalyticsSeen = ({organization}: AnalyticsOpts) =>\n  trackAnalyticsEvent({\n    eventKey: 'sdk_updates.seen',\n    eventName: 'SDK Updates: Seen',\n    organization_id: organization.id,\n  });\n\nconst recordAnalyticsSnoozed = ({organization}: AnalyticsOpts) =>\n  trackAnalyticsEvent({\n    eventKey: 'sdk_updates.snoozed',\n    eventName: 'SDK Updates: Snoozed',\n    organization_id: organization.id,\n  });\n\nconst recordAnalyticsClicked = ({organization}: AnalyticsOpts) =>\n  trackAnalyticsEvent({\n    eventKey: 'sdk_updates.clicked',\n    eventName: 'SDK Updates: Clicked',\n    organization_id: organization.id,\n  });\n\nconst flattenSuggestions = (list: ProjectSdkUpdates[]) =>\n  list.reduce<SDKUpdatesSuggestion[]>(\n    (suggestions, sdk) => [...suggestions, ...sdk.suggestions],\n    []\n  );\n\nclass InnerGlobalSdkSuggestions extends React.Component<Props, State> {\n  state: State = {\n    isDismissed: null,\n  };\n\n  componentDidMount() {\n    this.promptsCheck();\n    recordAnalyticsSeen({organization: this.props.organization});\n  }\n\n  async promptsCheck() {\n    const {api, organization} = this.props;\n\n    const prompt = await promptsCheck(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n    });\n\n    this.setState({\n      isDismissed: promptIsDismissed(prompt),\n    });\n  }\n\n  snoozePrompt = () => {\n    const {api, organization} = this.props;\n    promptsUpdate(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n      status: 'snoozed',\n    });\n\n    this.setState({isDismissed: true});\n    recordAnalyticsSnoozed({organization: this.props.organization});\n  };\n\n  render() {\n    const {\n      api: _api,\n      selection,\n      sdkUpdates,\n      organization,\n      Wrapper,\n      ...props\n    } = this.props;\n\n    const {isDismissed} = this.state;\n\n    if (!sdkUpdates || isDismissed === null || isDismissed) {\n      return null;\n    }\n\n    // withSdkUpdates explicitly only queries My Projects. This means that when\n    // looking at any projects outside of My Projects (like All Projects), this\n    // will only show the updates relevant to the to user.\n    const projectSpecificUpdates =\n      selection?.projects.length === 0 || selection?.projects === [ALL_ACCESS_PROJECTS]\n        ? sdkUpdates\n        : sdkUpdates.filter(update =>\n            selection?.projects?.includes(parseInt(update.projectId, 10))\n          );\n\n    // Are there any updates?\n    if (flattenSuggestions(projectSpecificUpdates).length === 0) {\n      return null;\n    }\n\n    const showBroadcastsPanel = (\n      <Button\n        priority=\"link\"\n        onClick={() => {\n          SidebarPanelActions.activatePanel(SidebarPanelKey.Broadcasts);\n          recordAnalyticsClicked({organization});\n        }}\n      >\n        {t('Review updates')}\n      </Button>\n    );\n\n    const notice = (\n      <Alert type=\"info\" icon={<IconUpgrade />} {...props}>\n        <Content>\n          {t(\n            `You have outdated SDKs in your projects. Update them for important fixes and features.`\n          )}\n          <Actions>\n            <Button\n              priority=\"link\"\n              title={t('Dismiss for the next two weeks')}\n              onClick={this.snoozePrompt}\n            >\n              {t('Remind me later')}\n            </Button>\n            |{showBroadcastsPanel}\n          </Actions>\n        </Content>\n      </Alert>\n    );\n\n    return Wrapper ? <Wrapper>{notice}</Wrapper> : notice;\n  }\n}\n\nconst Content = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    justify-content: space-between;\n  }\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(3, max-content);\n  grid-gap: ${space(1)};\n`;\n\nconst GlobalSdkSuggestions = withOrganization(\n  withSdkUpdates(withGlobalSelection(withApi(InnerGlobalSdkSuggestions)))\n);\n\nexport default GlobalSdkSuggestions;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\n\ntype Props = React.PropsWithChildren<{\n  image: React.ReactNode;\n  className?: string;\n}>;\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/performance-empty-state.svg';\nimport tourAlert from 'sentry-images/spot/performance-tour-alert.svg';\nimport tourCorrelate from 'sentry-images/spot/performance-tour-correlate.svg';\nimport tourMetrics from 'sentry-images/spot/performance-tour-metrics.svg';\nimport tourTrace from 'sentry-images/spot/performance-tour-trace.svg';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport FeatureTourModal, {\n  TourImage,\n  TourStep,\n  TourText,\n} from 'app/components/modals/featureTourModal';\nimport OnboardingPanel from 'app/components/onboardingPanel';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\nconst performanceSetupUrl =\n  'https://docs.sentry.io/performance-monitoring/getting-started/';\n\nconst docsLink = (\n  <Button external href={performanceSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const PERFORMANCE_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Track Application Metrics'),\n    image: <TourImage src={tourMetrics} />,\n    body: (\n      <TourText>\n        {t(\n          'Monitor your slowest pageloads and APIs to see which users are having the worst time.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Correlate Errors and Performance'),\n    image: <TourImage src={tourCorrelate} />,\n    body: (\n      <TourText>\n        {t(\n          'See what errors occurred within a transaction and the impact of those errors.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Watch and Alert'),\n    image: <TourImage src={tourAlert} />,\n    body: (\n      <TourText>\n        {t(\n          'Highlight mission-critical pages and APIs and set latency alerts to notify you before things go wrong.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Trace Across Systems'),\n    image: <TourImage src={tourTrace} />,\n    body: (\n      <TourText>\n        {t(\n          \"Follow a trace from a user's session and drill down to identify any bottlenecks that occur.\"\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n};\n\nfunction Onboarding({organization}: Props) {\n  function handleAdvance(step: number, duration: number) {\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.tour.advance',\n      eventName: 'Performance Views: Tour Advance',\n      organization_id: parseInt(organization.id, 10),\n      step,\n      duration,\n    });\n  }\n\n  function handleClose(step: number, duration: number) {\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.tour.close',\n      eventName: 'Performance Views: Tour Close',\n      organization_id: parseInt(organization.id, 10),\n      step,\n      duration,\n    });\n  }\n\n  return (\n    <OnboardingPanel image={<PerfImage src={emptyStateImg} />}>\n      <h3>{t('Pinpoint problems')}</h3>\n      <p>\n        {t(\n          'Something seem slow? Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        <FeatureTourModal\n          steps={PERFORMANCE_TOUR_STEPS}\n          onAdvance={handleAdvance}\n          onCloseModal={handleClose}\n          doneUrl={performanceSetupUrl}\n          doneText={t('Start Setup')}\n        >\n          {({showModal}) => (\n            <Button\n              priority=\"default\"\n              onClick={() => {\n                trackAnalyticsEvent({\n                  eventKey: 'performance_views.tour.start',\n                  eventName: 'Performance Views: Tour Start',\n                  organization_id: parseInt(organization.id, 10),\n                });\n                showModal();\n              }}\n            >\n              {t('Take a Tour')}\n            </Button>\n          )}\n        </FeatureTourModal>\n        <Button\n          priority=\"primary\"\n          target=\"_blank\"\n          href=\"https://docs.sentry.io/performance-monitoring/getting-started/\"\n        >\n          {t('Start Setup')}\n        </Button>\n      </ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst PerfImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    max-width: unset;\n    user-select: none;\n    position: absolute;\n    top: 50px;\n    bottom: 0;\n    width: 450px;\n    margin-top: auto;\n    margin-bottom: auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    width: 480px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    width: 600px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n"],"sourceRoot":""}