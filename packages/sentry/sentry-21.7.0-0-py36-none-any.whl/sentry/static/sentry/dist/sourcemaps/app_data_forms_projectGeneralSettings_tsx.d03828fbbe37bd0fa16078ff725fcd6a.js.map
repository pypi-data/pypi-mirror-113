{"version":3,"sources":["webpack:///./app/data/forms/projectGeneralSettings.tsx","webpack:///./app/utils/slugify.tsx"],"names":["route","RESOLVE_AGE_ALLOWED_VALUES","i","values","push","getResolveAgeAllowedValues","ORG_DISABLED_REASON","t","fields","slug","name","type","required","label","placeholder","help","transformInput","slugify","saveOnBlur","saveMessageAlertType","saveMessage","platform","choices","platforms","id","PlatformWrapper","StyledPlatformIcon","subjectPrefix","resolveAge","allowedValues","formatLabel","val","Number","tn","tct","Caution","allowedDomains","multiline","autosize","maxRows","rows","getValue","extractMultilineFields","setValue","convertMultilineFieldValue","scrapeJavaScript","disabled","organization","disabledReason","props","securityToken","value","getDynamicText","fixed","securityTokenHeader","verifySSL","PlatformIcon","space","str","toLowerCase","replace"],"mappings":"6zBAYaA,EAAQ,wCAsBfC,EApB6B,WAGjC,IAFA,IAAIC,EAAI,EACFC,EAAmB,GAClBD,GAAK,KACVC,EAAOC,KAAKF,GAEVA,GADEA,EAAI,GACD,EACIA,EAAI,GACR,EACIA,EAAI,GACR,EACIA,EAAI,GACR,GAEA,GAGT,OAAOC,EAG0BE,GAE7BC,GAAsBC,OAC1B,iGAGWC,EAAgC,CAC3CC,KAAM,CACJC,KAAM,OACNC,KAAM,SACNC,UAAU,EACVC,OAAON,OAAE,QACTO,aAAaP,OAAE,mBACfQ,MAAMR,OAAE,6CACRS,eAAgBC,IAEhBC,YAAY,EACZC,qBAAsB,OACtBC,aAAab,OAAE,gEAGjBc,SAAU,CACRX,KAAM,WACNC,KAAM,SACNE,OAAON,OAAE,YACTe,QAAS,kBACPC,SAAc,gBAAEC,EAAF,EAAEA,GAAId,EAAN,EAAMA,KAAN,MAAgB,CAC5Bc,GACA,QAACC,EAAD,YACE,QAACC,EAAD,CAAoBL,SAAUG,IAC7Bd,IAFmBc,QAK1BT,MAAMR,OAAE,0CAGVoB,cAAe,CACbjB,KAAM,gBACNC,KAAM,SACNE,OAAON,OAAE,kBACTO,aAAaP,OAAE,iBACfQ,MAAMR,OAAE,wDAGVqB,WAAY,CACVlB,KAAM,aACNC,KAAM,QACNkB,cAAe5B,EACfY,OAAON,OAAE,gBACTQ,MAAMR,OACJ,iFAEFuB,YAAa,SAAAC,GAEX,OAAY,KADZA,EAAMC,OAAOD,KAEJxB,OAAE,YAGPwB,EAAM,IAAMA,EAAM,IAAO,GAE3BA,GAAY,IACLE,QAAG,SAAU,UAAWF,KAG1BE,QAAG,UAAW,WAAYF,IAEnCb,YAAY,EACZE,aAAac,QACX,0IAEA,CACEC,SAAS,yCAGbhB,qBAAsB,WAExBiB,eAAgB,CACd1B,KAAM,iBACNC,KAAM,SACN0B,WAAW,EACXC,UAAU,EACVC,QAAS,GACTC,KAAM,EACN1B,aAAaP,OAAE,sCACfM,OAAON,OAAE,mBACTQ,MAAMR,OAAE,4CACRkC,SAAU,SAAAV,GAAG,OAAIW,QAAuBX,IACxCY,SAAU,SAAAZ,GAAG,OAAIa,QAA2Bb,KAE9Cc,iBAAkB,CAChBnC,KAAM,mBACNC,KAAM,UAENmC,SAAU,qBAAEC,aAAF,EAAgBrC,OAC1BsC,eAAgB1C,EAEhBqC,SAAU,SAACZ,EAAKkB,GAAN,OAAgBA,EAAMF,cAAgBE,EAAMF,aAAaE,EAAMvC,OAASqB,GAClFlB,OAAON,OAAE,qCACTQ,MAAMR,OAAE,2EAEV2C,cAAe,CACbxC,KAAM,gBACNC,KAAM,SACNE,OAAON,OAAE,kBACTQ,MAAMR,OACJ,sGAEFoC,SAAU,SAAAQ,GAAK,OAAIC,OAAe,CAACD,QAAOE,MAAO,yBAEnDC,oBAAqB,CACnB5C,KAAM,sBACNC,KAAM,SACNG,aAAaP,OAAE,kBACfM,OAAON,OAAE,yBACTQ,MAAMR,OACJ,uGAGJgD,UAAW,CACT7C,KAAM,YACNC,KAAM,UACNE,OAAON,OAAE,kBACTQ,MAAMR,OAAE,4EAINkB,GAAkB,OAAO,MAAP,qBAAH,0DAIfC,GAAqB,OAAO8B,IAAP,qBAAH,iBACNC,OAAM,GADA,M,uDClKT,SAASxC,EAAQyC,GAC9B,MAAsB,iBAARA,EAAmBA,EAAIC,cAAcC,QAAQ,IAAK,KAAO,G","file":"chunks/app_data_forms_projectGeneralSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import styled from '@emotion/styled';\nimport {PlatformIcon} from 'platformicons';\n\nimport platforms from 'app/data/platforms';\nimport {t, tct, tn} from 'app/locale';\nimport space from 'app/styles/space';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'app/utils';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport slugify from 'app/utils/slugify';\nimport {Field} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/';\n\nconst getResolveAgeAllowedValues = () => {\n  let i = 0;\n  const values: number[] = [];\n  while (i <= 720) {\n    values.push(i);\n    if (i < 12) {\n      i += 1;\n    } else if (i < 24) {\n      i += 3;\n    } else if (i < 36) {\n      i += 6;\n    } else if (i < 48) {\n      i += 12;\n    } else {\n      i += 24;\n    }\n  }\n  return values;\n};\n\nconst RESOLVE_AGE_ALLOWED_VALUES = getResolveAgeAllowedValues();\n\nconst ORG_DISABLED_REASON = t(\n  \"This option is enforced by your organization's settings and cannot be customized per-project.\"\n);\n\nexport const fields: Record<string, Field> = {\n  slug: {\n    name: 'slug',\n    type: 'string',\n    required: true,\n    label: t('Name'),\n    placeholder: t('my-service-name'),\n    help: t('A unique ID used to identify this project'),\n    transformInput: slugify,\n\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('You will be redirected to the new project slug after saving'),\n  },\n\n  platform: {\n    name: 'platform',\n    type: 'select',\n    label: t('Platform'),\n    choices: () =>\n      platforms.map(({id, name}) => [\n        id,\n        <PlatformWrapper key={id}>\n          <StyledPlatformIcon platform={id} />\n          {name}\n        </PlatformWrapper>,\n      ]),\n    help: t('The primary platform for this project'),\n  },\n\n  subjectPrefix: {\n    name: 'subjectPrefix',\n    type: 'string',\n    label: t('Subject Prefix'),\n    placeholder: t('e.g. [my-org]'),\n    help: t('Choose a custom prefix for emails from this project'),\n  },\n\n  resolveAge: {\n    name: 'resolveAge',\n    type: 'range',\n    allowedValues: RESOLVE_AGE_ALLOWED_VALUES,\n    label: t('Auto Resolve'),\n    help: t(\n      \"Automatically resolve an issue if it hasn't been seen for this amount of time\"\n    ),\n    formatLabel: val => {\n      val = Number(val);\n      if (val === 0) {\n        return t('Disabled');\n      }\n\n      if (val > 23 && val % 24 === 0) {\n        // Based on allowed values, val % 24 should always be true\n        val = val / 24;\n        return tn('%s day', '%s days', val);\n      }\n\n      return tn('%s hour', '%s hours', val);\n    },\n    saveOnBlur: false,\n    saveMessage: tct(\n      '[Caution]: Enabling auto resolve will immediately resolve anything that has ' +\n        'not been seen within this period of time. There is no undo!',\n      {\n        Caution: <strong>Caution</strong>,\n      }\n    ),\n    saveMessageAlertType: 'warning',\n  },\n  allowedDomains: {\n    name: 'allowedDomains',\n    type: 'string',\n    multiline: true,\n    autosize: true,\n    maxRows: 10,\n    rows: 1,\n    placeholder: t('https://example.com or example.com'),\n    label: t('Allowed Domains'),\n    help: t('Separate multiple entries with a newline'),\n    getValue: val => extractMultilineFields(val),\n    setValue: val => convertMultilineFieldValue(val),\n  },\n  scrapeJavaScript: {\n    name: 'scrapeJavaScript',\n    type: 'boolean',\n    // if this is off for the organization, it cannot be enabled for the project\n    disabled: ({organization, name}) => !organization[name],\n    disabledReason: ORG_DISABLED_REASON,\n    // `props` are the props given to FormField\n    setValue: (val, props) => props.organization && props.organization[props.name] && val,\n    label: t('Enable JavaScript source fetching'),\n    help: t('Allow Sentry to scrape missing JavaScript source context when possible'),\n  },\n  securityToken: {\n    name: 'securityToken',\n    type: 'string',\n    label: t('Security Token'),\n    help: t(\n      'Outbound requests matching Allowed Domains will have the header \"{token_header}: {token}\" appended'\n    ),\n    setValue: value => getDynamicText({value, fixed: '__SECURITY_TOKEN__'}),\n  },\n  securityTokenHeader: {\n    name: 'securityTokenHeader',\n    type: 'string',\n    placeholder: t('X-Sentry-Token'),\n    label: t('Security Token Header'),\n    help: t(\n      'Outbound requests matching Allowed Domains will have the header \"{token_header}: {token}\" appended'\n    ),\n  },\n  verifySSL: {\n    name: 'verifySSL',\n    type: 'boolean',\n    label: t('Verify TLS/SSL'),\n    help: t('Outbound requests will verify TLS (sometimes known as SSL) connections'),\n  },\n};\n\nconst PlatformWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin-right: ${space(1)};\n`;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n"],"sourceRoot":""}