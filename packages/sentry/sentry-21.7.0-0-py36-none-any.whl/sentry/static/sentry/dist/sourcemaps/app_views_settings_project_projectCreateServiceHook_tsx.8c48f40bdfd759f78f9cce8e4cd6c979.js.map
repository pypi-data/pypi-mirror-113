{"version":3,"sources":["webpack:///./app/views/settings/components/forms/booleanField.tsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/views/settings/project/projectCreateServiceHook.tsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.tsx"],"names":["BooleanField","value","onChange","onBlur","e","newValue","coerceValue","this","props","confirm","fieldProps","resetOnError","field","disabled","handleChange","bind","switchProps","size","isActive","isDisabled","toggle","renderMessage","toString","onConfirm","open","React","TextField","type","ProjectCreateServiceHook","params","orgId","projectId","title","t","Fragment","initialData","events","EVENT_CHOICES","map","ServiceHookSettingsForm","browserHistory","hookId","endpoint","apiMethod","apiEndpoint","onSubmitSuccess","footerStyle","marginTop","paddingRight","submitLabel","name","label","required","help","inline","choices","Component"],"mappings":"4xEAaqBA,E,goBAKJ,SACbC,EACAC,EACAC,EACAC,GAGA,IAAMC,EAAW,EAAKC,aAAaL,GACnCC,EAASG,EAAUD,GACnBD,EAAOE,EAAUD,M,4CAbnB,SAAYH,GACV,QAASA,I,oBAeX,WAAS,WACP,EAAiCM,KAAKC,MAA/BC,EAAP,EAAOA,QAAYC,GAAnB,YAEA,OACE,QAAC,IAAD,OACMA,GADN,IAEEC,cAAY,EACZC,MAAO,YAWD,IAVJV,EAUI,EAVJA,SACAC,EASI,EATJA,OACAF,EAQI,EARJA,MACAY,EAOI,EAPJA,SACGL,GAMC,YAEEM,EAAe,EAAKA,aAAaC,KAAK,EAAMd,EAAOC,EAAUC,GAE7Da,EAAc,EAAH,KACZR,GADY,IAEfS,KAAM,KACNC,WAAYjB,EACZkB,WAAYN,EACZO,OAAQN,IAGV,OAAIL,GAEA,QAAC,IAAD,CACEY,cAAe,kBAAMZ,IAAUR,GAAOqB,aACtCC,UAAW,kBAAMT,EAAa,KAFhC,SAIG,gBAAEU,EAAF,EAAEA,KAAF,OACC,QAAC,IAAD,OACMR,GADN,IAEEI,OAAQ,SAAChB,GAGHK,IAAUR,GAAOqB,YAEnBE,IAIFV,EAAaV,WAQlB,QAAC,IAAD,KAAYY,Y,GAzEaS,aAArBzB,E,2zCCTN,SAAS0B,EAAUlB,GAChC,OAAO,QAAC,IAAD,OAAgBA,GAAhB,IAAuBmB,KAAK,UADbD,E,udCMxB,SAASE,EAAT,GAAmD,IAAhBC,EAAgB,EAAhBA,OAC1BC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,UACRC,GAAQC,OAAE,uBAChB,OACE,QAAC,IAAD,CAAeD,MAAK,UAAKA,EAAL,aAApB,UACE,QAAC,EAAAE,SAAD,YACE,QAAC,IAAD,CAAoBF,MAAOA,KAC3B,QAAC,IAAD,CACEF,MAAOA,EACPC,UAAWA,EACXI,YAAa,CAACC,OAAQ,GAAIlB,UAAU,UAVrCU,E,uCAiBT,a,k0CCfA,IAAMS,EAAyB,CAAC,cAAe,iBAAiBC,KAAI,SAAAlC,GAAC,MAAI,CAACA,EAAGA,MASxDmC,E,moBACD,WAChB,MAA2B,EAAK/B,MAAzBsB,EAAP,EAAOA,MAAOC,EAAd,EAAcA,UACdS,sBAAA,oBAAiCV,EAAjC,qBAAmDC,EAAnD,e,uCAGF,WACE,MAAgDxB,KAAKC,MAA9C2B,EAAP,EAAOA,YAAaL,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,UAAWU,EAAtC,EAAsCA,OAEhCC,EAAWD,EAAM,oBACNX,EADM,YACGC,EADH,kBACsBU,EADtB,yBAENX,EAFM,YAEGC,EAFH,WAIvB,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CACEY,UAAWF,EAAS,MAAQ,OAC5BG,YAAaF,EACbP,YAAaA,EACbU,gBAAiBtC,KAAKsC,gBACtBC,YAAa,CACXC,UAAW,EACXC,aAAc,IAEhBC,YAAaR,GAASR,OAAE,iBAAkBA,OAAE,eAT9C,WAWE,QAAC,KAAD,WAAcA,OAAE,yBAChB,QAAC,IAAD,YACE,QAAC,IAAD,CAAciB,KAAK,WAAWC,OAAOlB,OAAE,aACvC,QAAC,IAAD,CACEiB,KAAK,MACLC,OAAOlB,OAAE,OACTmB,UAAQ,EACRC,MAAMpB,OAAE,yCAEV,QAAC,IAAD,CACEiB,KAAK,SACLC,OAAOlB,OAAE,UACTqB,QAAQ,EACRD,MAAMpB,OAAE,6CAJV,SAMG,gBAAEhC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACC,QAAC,IAAD,CACEA,SAAUA,EACVD,MAAOA,EACPsD,QAASlB,mB,GA7C0BmB,aAAhCjB,E","file":"chunks/app_views_settings_project_projectCreateServiceHook_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport Switch from 'app/components/switchButton';\nimport InputField, {onEvent} from 'app/views/settings/components/forms/inputField';\n\ntype Props = {\n  confirm?: {\n    true?: React.ReactNode;\n    false?: React.ReactNode;\n  };\n} & InputField['props'];\n\nexport default class BooleanField extends React.Component<Props> {\n  coerceValue(value: any) {\n    return !!value;\n  }\n\n  handleChange = (\n    value: any,\n    onChange: onEvent,\n    onBlur: onEvent,\n    e: React.FormEvent<HTMLInputElement>\n  ) => {\n    // We need to toggle current value because Switch is not an input\n    const newValue = this.coerceValue(!value);\n    onChange(newValue, e);\n    onBlur(newValue, e);\n  };\n\n  render() {\n    const {confirm, ...fieldProps} = this.props;\n\n    return (\n      <InputField\n        {...fieldProps}\n        resetOnError\n        field={({\n          onChange,\n          onBlur,\n          value,\n          disabled,\n          ...props\n        }: {\n          onChange: onEvent;\n          onBlur: onEvent;\n          value: any;\n          disabled: boolean;\n        }) => {\n          // Create a function with required args bound\n          const handleChange = this.handleChange.bind(this, value, onChange, onBlur);\n\n          const switchProps = {\n            ...props,\n            size: 'lg' as React.ComponentProps<typeof Switch>['size'],\n            isActive: !!value,\n            isDisabled: disabled,\n            toggle: handleChange,\n          };\n\n          if (confirm) {\n            return (\n              <Confirm\n                renderMessage={() => confirm[(!value).toString()]}\n                onConfirm={() => handleChange({})}\n              >\n                {({open}) => (\n                  <Switch\n                    {...switchProps}\n                    toggle={(e: React.MouseEvent) => {\n                      // If we have a `confirm` prop and enabling switch\n                      // Then show confirm dialog, otherwise propagate change as normal\n                      if (confirm[(!value).toString()]) {\n                        // Open confirm modal\n                        open();\n                        return;\n                      }\n\n                      handleChange(e);\n                    }}\n                  />\n                )}\n              </Confirm>\n            );\n          }\n\n          return <Switch {...switchProps} />;\n        }}\n      />\n    );\n  }\n}\n","import InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n","import {Fragment} from 'react';\nimport DocumentTitle from 'react-document-title';\nimport {RouteComponentProps} from 'react-router';\n\nimport {t} from 'app/locale';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport ServiceHookSettingsForm from 'app/views/settings/project/serviceHookSettingsForm';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nfunction ProjectCreateServiceHook({params}: Props) {\n  const {orgId, projectId} = params;\n  const title = t('Create Service Hook');\n  return (\n    <DocumentTitle title={`${title} - Sentry`}>\n      <Fragment>\n        <SettingsPageHeader title={title} />\n        <ServiceHookSettingsForm\n          orgId={orgId}\n          projectId={projectId}\n          initialData={{events: [], isActive: true}}\n        />\n      </Fragment>\n    </DocumentTitle>\n  );\n}\n\nexport default ProjectCreateServiceHook;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {Choices, ServiceHook} from 'app/types';\nimport ApiForm from 'app/views/settings/components/forms/apiForm';\nimport BooleanField from 'app/views/settings/components/forms/booleanField';\nimport MultipleCheckbox from 'app/views/settings/components/forms/controls/multipleCheckbox';\nimport FormField from 'app/views/settings/components/forms/formField';\nimport TextField from 'app/views/settings/components/forms/textField';\n\nconst EVENT_CHOICES: Choices = ['event.alert', 'event.created'].map(e => [e, e]);\n\ntype Props = {\n  orgId: string;\n  projectId: string;\n  initialData: Partial<ServiceHook> & {isActive: boolean};\n  hookId?: string;\n};\n\nexport default class ServiceHookSettingsForm extends Component<Props> {\n  onSubmitSuccess = () => {\n    const {orgId, projectId} = this.props;\n    browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n  };\n\n  render() {\n    const {initialData, orgId, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`\n      : `/projects/${orgId}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({value, onChange}) => (\n                <MultipleCheckbox\n                  onChange={onChange}\n                  value={value}\n                  choices={EVENT_CHOICES}\n                />\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n"],"sourceRoot":""}