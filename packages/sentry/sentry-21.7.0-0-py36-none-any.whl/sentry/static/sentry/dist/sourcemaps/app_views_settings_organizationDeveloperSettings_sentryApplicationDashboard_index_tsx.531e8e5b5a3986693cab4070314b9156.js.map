{"version":3,"sources":["webpack:///./app/components/charts/lineChart.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx"],"names":["LineChart","this","props","series","seriesOptions","map","seriesName","data","dataArray","options","LineSeries","name","value","animation","animationThreshold","animationDuration","React","AsyncView","title","getTitle","renderComponent","AsyncComponent","ALL_EVENTS","t","getEventTypes","memoize","app","issueLinkEvents","issueLinkComponent","schema","elements","find","element","type","hasSelectUri","fields","some","field","createHasSelectUri","create","required_fields","optional_fields","linkHasSelectUri","link","componentHasSelectUri","push","status","events","includes","isAlertable","ResponseCode","code","Tags","StyledTag","TimestampLink","date","href","StyledIconOpen","size","RequestLog","eventType","setState","currentPage","remountComponent","errorsOnly","state","requests","length","slug","query","renderBody","currentRequests","slice","RequestLogFilters","label","menuWidth","button","isOpen","getActorProps","StyledDropdownButton","onSelect","handleChangeEventType","eventKey","isActive","StyledErrorsOnlyButton","onClick","handleChangeErrorsOnly","ErrorsOnlyCheckbox","checked","onChange","TableLayout","hasOrganization","loading","request","idx","errorUrl","responseCode","organization","OverflowBox","webhookUrl","icon","PaginationButtons","direction","handlePrevPage","disabled","hasPrevPage","handleNextPage","hasNextPage","p","space","DropdownButton","theme","zIndex","header","Button","IconOpen","subText","Tag","SentryApplicationDashboard","appSlug","params","now","Math","floor","Date","getTime","ninety_days_ago","since","until","stats","totalUninstalls","totalInstalls","Fragment","Row","datePublished","StatsSection","StatsHeader","dateOnly","renderInstallCharts","installStats","uninstallStats","installSeries","point","uninstallSeries","ChartWrapper","height","stacked","isGroupedByDate","legend","show","orient","itemWidth","yAxis","minInterval","max","xAxis","grid","left","right","views","interactions","orgId","InteractionsChart","Views","StyledFooter","to","componentInteractions","componentInteractionsDetails","Object","keys","component","renderInstallData","renderIntegrationViews","renderComponentInteractions","elementInteractionsSeries","key"],"mappings":"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","file":"chunks/app_views_settings_organizationDeveloperSettings_sentryApplicationDashboard_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport {EChartOption} from 'echarts';\n\nimport {Series} from 'app/types/echarts';\n\nimport LineSeries from './series/lineSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = React.ComponentProps<typeof BaseChart>;\n\nexport type LineChartSeries = Series &\n  Omit<EChartOption.SeriesLine, 'data' | 'name'> & {\n    dataArray?: EChartOption.SeriesLine['data'];\n  };\n\ntype Props = Omit<ChartProps, 'series'> & {\n  series: LineChartSeries[];\n  seriesOptions?: EChartOption.SeriesLine;\n};\n\nexport default class LineChart extends React.Component<Props> {\n  render() {\n    const {series, seriesOptions, ...props} = this.props;\n\n    return (\n      <BaseChart\n        {...props}\n        series={series.map(({seriesName, data, dataArray, ...options}) =>\n          LineSeries({\n            ...seriesOptions,\n            ...options,\n            name: seriesName,\n            data: dataArray || data.map(({value, name}) => [name, value]),\n            animation: false,\n            animationThreshold: 1,\n            animationDuration: 0,\n          })\n        )}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment-timezone';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport Checkbox from 'app/components/checkbox';\nimport DateTime from 'app/components/dateTime';\nimport DropdownButton from 'app/components/dropdownButton';\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport ExternalLink from 'app/components/links/externalLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tag from 'app/components/tag';\nimport {IconChevron, IconFlag, IconOpen} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {SentryApp, SentryAppSchemaIssueLink, SentryAppWebhookRequest} from 'app/types';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nconst ALL_EVENTS = t('All Events');\nconst MAX_PER_PAGE = 10;\n\nconst componentHasSelectUri = (issueLinkComponent: SentryAppSchemaIssueLink): boolean => {\n  const hasSelectUri = (fields: any[]): boolean =>\n    fields.some(field => field.type === 'select' && 'uri' in field);\n\n  const createHasSelectUri =\n    hasSelectUri(issueLinkComponent.create.required_fields) ||\n    hasSelectUri(issueLinkComponent.create.optional_fields || []);\n\n  const linkHasSelectUri =\n    hasSelectUri(issueLinkComponent.link.required_fields) ||\n    hasSelectUri(issueLinkComponent.link.optional_fields || []);\n\n  return createHasSelectUri || linkHasSelectUri;\n};\n\nconst getEventTypes = memoize((app: SentryApp) => {\n  // TODO(nola): ideally this would be kept in sync with EXTENDED_VALID_EVENTS on the backend\n\n  let issueLinkEvents: string[] = [];\n  const issueLinkComponent = (app.schema.elements || []).find(\n    element => element.type === 'issue-link'\n  );\n  if (issueLinkComponent) {\n    issueLinkEvents = ['external_issue.created', 'external_issue.linked'];\n    if (componentHasSelectUri(issueLinkComponent as SentryAppSchemaIssueLink)) {\n      issueLinkEvents.push('select_options.requested');\n    }\n  }\n\n  const events = [\n    ALL_EVENTS,\n    // Internal apps don't have installation webhooks\n    ...(app.status !== 'internal'\n      ? ['installation.created', 'installation.deleted']\n      : []),\n    ...(app.events.includes('error') ? ['error.created'] : []),\n    ...(app.events.includes('issue')\n      ? ['issue.created', 'issue.resolved', 'issue.ignored', 'issue.assigned']\n      : []),\n    ...(app.isAlertable\n      ? [\n          'event_alert.triggered',\n          'metric_alert.open',\n          'metric_alert.resolved',\n          'metric_alert.critical',\n          'metric_alert.warning',\n        ]\n      : []),\n    ...issueLinkEvents,\n  ];\n\n  return events;\n});\n\nconst ResponseCode = ({code}: {code: number}) => {\n  let type: React.ComponentProps<typeof Tag>['type'] = 'error';\n  if (code <= 399 && code >= 300) {\n    type = 'warning';\n  } else if (code <= 299 && code >= 100) {\n    type = 'success';\n  }\n\n  return (\n    <Tags>\n      <StyledTag type={type}>{code === 0 ? 'timeout' : code}</StyledTag>\n    </Tags>\n  );\n};\n\nconst TimestampLink = ({date, link}: {date: moment.MomentInput; link?: string}) =>\n  link ? (\n    <ExternalLink href={link}>\n      <DateTime date={date} />\n      <StyledIconOpen size=\"12px\" />\n    </ExternalLink>\n  ) : (\n    <DateTime date={date} />\n  );\n\ntype Props = AsyncComponent['props'] & {\n  app: SentryApp;\n};\n\ntype State = AsyncComponent['state'] & {\n  eventType: string;\n  errorsOnly: boolean;\n  currentPage: number;\n  requests: SentryAppWebhookRequest[];\n};\n\nexport default class RequestLog extends AsyncComponent<Props, State> {\n  shouldReload = true;\n\n  get hasNextPage() {\n    return (this.state.currentPage + 1) * MAX_PER_PAGE < this.state.requests.length;\n  }\n\n  get hasPrevPage() {\n    return this.state.currentPage > 0;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {slug} = this.props.app;\n\n    const query: any = {};\n    if (this.state) {\n      if (this.state.eventType !== ALL_EVENTS) {\n        query.eventType = this.state.eventType;\n      }\n      if (this.state.errorsOnly) {\n        query.errorsOnly = true;\n      }\n    }\n\n    return [['requests', `/sentry-apps/${slug}/requests/`, {query}]];\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      requests: [],\n      eventType: ALL_EVENTS,\n      errorsOnly: false,\n      currentPage: 0,\n    };\n  }\n\n  handleChangeEventType = (eventType: string) => {\n    this.setState(\n      {\n        eventType,\n        currentPage: 0,\n      },\n      this.remountComponent\n    );\n  };\n\n  handleChangeErrorsOnly = () => {\n    this.setState(\n      {\n        errorsOnly: !this.state.errorsOnly,\n        currentPage: 0,\n      },\n      this.remountComponent\n    );\n  };\n\n  handleNextPage = () => {\n    this.setState({\n      currentPage: this.state.currentPage + 1,\n    });\n  };\n\n  handlePrevPage = () => {\n    this.setState({\n      currentPage: this.state.currentPage - 1,\n    });\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {requests, eventType, errorsOnly, currentPage} = this.state;\n    const {app} = this.props;\n\n    const currentRequests = requests.slice(\n      currentPage * MAX_PER_PAGE,\n      (currentPage + 1) * MAX_PER_PAGE\n    );\n\n    return (\n      <React.Fragment>\n        <h5>{t('Request Log')}</h5>\n\n        <div>\n          <p>\n            {t(\n              'This log shows the status of any outgoing webhook requests from Sentry to your integration.'\n            )}\n          </p>\n\n          <RequestLogFilters>\n            <DropdownControl\n              label={eventType}\n              menuWidth=\"220px\"\n              button={({isOpen, getActorProps}) => (\n                <StyledDropdownButton {...getActorProps()} isOpen={isOpen}>\n                  {eventType}\n                </StyledDropdownButton>\n              )}\n            >\n              {getEventTypes(app).map(type => (\n                <DropdownItem\n                  key={type}\n                  onSelect={this.handleChangeEventType}\n                  eventKey={type}\n                  isActive={eventType === type}\n                >\n                  {type}\n                </DropdownItem>\n              ))}\n            </DropdownControl>\n\n            <StyledErrorsOnlyButton onClick={this.handleChangeErrorsOnly}>\n              <ErrorsOnlyCheckbox>\n                <Checkbox checked={errorsOnly} onChange={() => {}} />\n                {t('Errors Only')}\n              </ErrorsOnlyCheckbox>\n            </StyledErrorsOnlyButton>\n          </RequestLogFilters>\n        </div>\n\n        <Panel>\n          <PanelHeader>\n            <TableLayout hasOrganization={app.status !== 'internal'}>\n              <div>{t('Time')}</div>\n              <div>{t('Status Code')}</div>\n              {app.status !== 'internal' && <div>{t('Organization')}</div>}\n              <div>{t('Event Type')}</div>\n              <div>{t('Webhook URL')}</div>\n            </TableLayout>\n          </PanelHeader>\n\n          {!this.state.loading ? (\n            <PanelBody>\n              {currentRequests.length > 0 ? (\n                currentRequests.map((request, idx) => (\n                  <PanelItem key={idx}>\n                    <TableLayout hasOrganization={app.status !== 'internal'}>\n                      <TimestampLink date={request.date} link={request.errorUrl} />\n                      <ResponseCode code={request.responseCode} />\n                      {app.status !== 'internal' && (\n                        <div>\n                          {request.organization ? request.organization.name : null}\n                        </div>\n                      )}\n                      <div>{request.eventType}</div>\n                      <OverflowBox>{request.webhookUrl}</OverflowBox>\n                    </TableLayout>\n                  </PanelItem>\n                ))\n              ) : (\n                <EmptyMessage icon={<IconFlag size=\"xl\" />}>\n                  {t('No requests found in the last 30 days.')}\n                </EmptyMessage>\n              )}\n            </PanelBody>\n          ) : (\n            <LoadingIndicator />\n          )}\n        </Panel>\n\n        <PaginationButtons>\n          <Button\n            icon={<IconChevron direction=\"left\" size=\"sm\" />}\n            onClick={this.handlePrevPage}\n            disabled={!this.hasPrevPage}\n            label={t('Previous page')}\n          />\n          <Button\n            icon={<IconChevron direction=\"right\" size=\"sm\" />}\n            onClick={this.handleNextPage}\n            disabled={!this.hasNextPage}\n            label={t('Next page')}\n          />\n        </PaginationButtons>\n      </React.Fragment>\n    );\n  }\n}\n\nconst TableLayout = styled('div')<{hasOrganization: boolean}>`\n  display: grid;\n  grid-template-columns: 1fr 0.5fr ${p => (p.hasOrganization ? '1fr' : '')} 1fr 1fr;\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n  align-items: center;\n`;\n\nconst OverflowBox = styled('div')`\n  word-break: break-word;\n`;\n\nconst PaginationButtons = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n\n  > :first-child {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n\n  > :nth-child(2) {\n    margin-left: -1px;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n`;\n\nconst RequestLogFilters = styled('div')`\n  display: flex;\n  align-items: center;\n  padding-bottom: ${space(1)};\n`;\n\nconst ErrorsOnlyCheckbox = styled('div')`\n  input {\n    margin: 0 ${space(1)} 0 0;\n  }\n\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  z-index: ${p => p.theme.zIndex.header - 1};\n  white-space: nowrap;\n\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n`;\n\nconst StyledErrorsOnlyButton = styled(Button)`\n  margin-left: -1px;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`;\n\nconst StyledIconOpen = styled(IconOpen)`\n  margin-left: 6px;\n  color: ${p => p.theme.subText};\n`;\n\nconst Tags = styled('div')`\n  margin: -${space(0.5)};\n`;\n\nconst StyledTag = styled(Tag)`\n  padding: ${space(0.5)};\n  display: inline-flex;\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport BarChart from 'app/components/charts/barChart';\nimport LineChart from 'app/components/charts/lineChart';\nimport DateTime from 'app/components/dateTime';\nimport Link from 'app/components/links/link';\nimport {Panel, PanelBody, PanelFooter, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {SentryApp} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport RequestLog from './requestLog';\n\ntype Props = RouteComponentProps<{appSlug: string; orgId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  stats: {\n    totalUninstalls: number;\n    totalInstalls: number;\n    installStats: [number, number][];\n    uninstallStats: [number, number][];\n  };\n  interactions: {\n    componentInteractions: {\n      [key: string]: [number, number][];\n    };\n    views: [number, number][];\n  };\n  app: SentryApp;\n};\n\nexport default class SentryApplicationDashboard extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {appSlug} = this.props.params;\n\n    // Default time range for now: 90 days ago to now\n    const now = Math.floor(new Date().getTime() / 1000);\n    const ninety_days_ago = 3600 * 24 * 90;\n\n    return [\n      [\n        'stats',\n        `/sentry-apps/${appSlug}/stats/`,\n        {query: {since: now - ninety_days_ago, until: now}},\n      ],\n\n      [\n        'interactions',\n        `/sentry-apps/${appSlug}/interaction/`,\n        {query: {since: now - ninety_days_ago, until: now}},\n      ],\n      ['app', `/sentry-apps/${appSlug}/`],\n    ];\n  }\n\n  getTitle() {\n    return t('Integration Dashboard');\n  }\n\n  renderInstallData() {\n    const {app, stats} = this.state;\n    const {totalUninstalls, totalInstalls} = stats;\n    return (\n      <Fragment>\n        <h5>{t('Installation & Interaction Data')}</h5>\n        <Row>\n          {app.datePublished ? (\n            <StatsSection>\n              <StatsHeader>{t('Date published')}</StatsHeader>\n              <DateTime dateOnly date={app.datePublished} />\n            </StatsSection>\n          ) : null}\n          <StatsSection>\n            <StatsHeader>{t('Total installs')}</StatsHeader>\n            <p>{totalInstalls}</p>\n          </StatsSection>\n          <StatsSection>\n            <StatsHeader>{t('Total uninstalls')}</StatsHeader>\n            <p>{totalUninstalls}</p>\n          </StatsSection>\n        </Row>\n        {this.renderInstallCharts()}\n      </Fragment>\n    );\n  }\n\n  renderInstallCharts() {\n    const {installStats, uninstallStats} = this.state.stats;\n\n    const installSeries = {\n      data: installStats.map(point => ({\n        name: point[0] * 1000,\n        value: point[1],\n      })),\n      seriesName: t('installed'),\n    };\n    const uninstallSeries = {\n      data: uninstallStats.map(point => ({\n        name: point[0] * 1000,\n        value: point[1],\n      })),\n      seriesName: t('uninstalled'),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Installations/Uninstallations over Last 90 Days')}</PanelHeader>\n        <ChartWrapper>\n          <BarChart\n            series={[installSeries, uninstallSeries]}\n            height={150}\n            stacked\n            isGroupedByDate\n            legend={{\n              show: true,\n              orient: 'horizontal',\n              data: ['installed', 'uninstalled'],\n              itemWidth: 15,\n            }}\n            yAxis={{type: 'value', minInterval: 1, max: 'dataMax'}}\n            xAxis={{type: 'time'}}\n            grid={{left: space(4), right: space(4)}}\n          />\n        </ChartWrapper>\n      </Panel>\n    );\n  }\n\n  renderIntegrationViews() {\n    const {views} = this.state.interactions;\n    const {appSlug, orgId} = this.props.params;\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Integration Views')}</PanelHeader>\n        <PanelBody>\n          <InteractionsChart data={{Views: views}} />\n        </PanelBody>\n\n        <PanelFooter>\n          <StyledFooter>\n            {t('Integration views are measured through views on the ')}\n            <Link to={`/sentry-apps/${appSlug}/external-install/`}>\n              {t('external installation page')}\n            </Link>\n            {t(' and views on the Learn More/Install modal on the ')}\n            <Link to={`/settings/${orgId}/integrations/`}>{t('integrations page')}</Link>\n          </StyledFooter>\n        </PanelFooter>\n      </Panel>\n    );\n  }\n\n  renderComponentInteractions() {\n    const {componentInteractions} = this.state.interactions;\n    const componentInteractionsDetails = {\n      'stacktrace-link': t(\n        'Each link click or context menu open counts as one interaction'\n      ),\n      'issue-link': t('Each open of the issue link modal counts as one interaction'),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Component Interactions')}</PanelHeader>\n\n        <PanelBody>\n          <InteractionsChart data={componentInteractions} />\n        </PanelBody>\n\n        <PanelFooter>\n          <StyledFooter>\n            {Object.keys(componentInteractions).map(\n              (component, idx) =>\n                componentInteractionsDetails[component] && (\n                  <Fragment key={idx}>\n                    <strong>{`${component}: `}</strong>\n                    {componentInteractionsDetails[component]}\n                    <br />\n                  </Fragment>\n                )\n            )}\n          </StyledFooter>\n        </PanelFooter>\n      </Panel>\n    );\n  }\n\n  renderBody() {\n    const {app} = this.state;\n\n    return (\n      <div>\n        <SettingsPageHeader title={`${t('Integration Dashboard')} - ${app.name}`} />\n        {app.status === 'published' && this.renderInstallData()}\n        {app.status === 'published' && this.renderIntegrationViews()}\n        {app.schema.elements && this.renderComponentInteractions()}\n        <RequestLog app={app} />\n      </div>\n    );\n  }\n}\n\ntype InteractionsChartProps = {\n  data: {\n    [key: string]: [number, number][];\n  };\n};\nconst InteractionsChart = ({data}: InteractionsChartProps) => {\n  const elementInteractionsSeries = Object.keys(data).map((key: string) => {\n    const seriesData = data[key].map(point => ({\n      value: point[1],\n      name: point[0] * 1000,\n    }));\n    return {\n      seriesName: key,\n      data: seriesData,\n    };\n  });\n\n  return (\n    <ChartWrapper>\n      <LineChart\n        isGroupedByDate\n        series={elementInteractionsSeries}\n        grid={{left: space(4), right: space(4)}}\n        legend={{\n          show: true,\n          orient: 'horizontal',\n          data: Object.keys(data),\n        }}\n      />\n    </ChartWrapper>\n  );\n};\n\nconst Row = styled('div')`\n  display: flex;\n`;\n\nconst StatsSection = styled('div')`\n  margin-right: ${space(4)};\n`;\nconst StatsHeader = styled('h6')`\n  margin-bottom: ${space(1)};\n  font-size: 12px;\n  text-transform: uppercase;\n  color: ${p => p.theme.subText};\n`;\n\nconst StyledFooter = styled('div')`\n  padding: ${space(1.5)};\n`;\n\nconst ChartWrapper = styled('div')`\n  padding-top: ${space(3)};\n`;\n"],"sourceRoot":""}