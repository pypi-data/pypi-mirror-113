{"version":3,"sources":["webpack:///./app/components/forms/multiSelectControl.tsx","webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationMembers/inviteRequestRow.tsx","webpack:///./app/views/settings/organizationMembers/organizationAccessRequests.tsx","webpack:///./app/views/settings/organizationMembers/organizationRequestsView.tsx"],"names":["forwardRef","props","ref","forwardedRef","multiple","RoleSelectControl","roles","disableUnallowed","options","map","r","value","id","label","name","disabled","allowed","description","desc","components","Option","data","optionProps","RoleItem","styles","control","provided","borderBottomLeftRadius","theme","borderBottomRightRadius","menu","borderRadius","marginTop","space","width","overflow","p","fontSizeSmall","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","InviteModalHook","HookOrDefault","hookName","defaultComponent","onSendInvites","children","sendInvites","canSend","InviteRequestRow","inviteRequest","inviteRequestBusy","organization","onApprove","onDeny","onUpdate","allTeams","allRoles","role","find","roleDisallowed","willInvite","headerInfo","StyledPanelItem","style","marginBottom","UserName","email","inviteStatus","inviterName","Description","t","tct","JoinRequestIndicator","tooltipText","StyledRoleSelectControl","onChange","TeamSelectControl","placeholder","teams","team","slug","clearable","ButtonGroup","onConfirm","disableConfirmButton","message","priority","size","busy","undefined","onClick","Tag","PanelItem","fontSizeLarge","subText","MultiSelectControl","OrganizationAccessRequests","accessRequestBusy","e","stopPropagation","handleAction","isApproved","successMessage","errorMessage","api","orgId","onRemoveAccessRequest","setState","state","requestPromise","method","addSuccessMessage","addErrorMessage","requestList","length","member","requester","memberName","user","username","requesterName","StyledButton","handleApprove","handleDeny","React","Button","withApi","OrganizationRequestsView","eventKey","eventName","params","onRemoveInviteRequest","trackAnalyticsEvent","organization_id","member_id","parseInt","invite_status","approve","handleRedirect","router","showInviteRequests","push","inviteRequests","onUpdateInviteRequest","Fragment","MEMBER_ROLES","withTeams","withOrganization"],"mappings":"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","file":"chunks/app_views_settings_organizationMembers_organizationRequestsView_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {forwardRef} from 'react';\nimport ReactSelect from 'react-select';\n\nimport SelectControl, {ControlProps} from 'app/components/forms/selectControl';\nimport {SelectValue} from 'app/types';\n\nexport type MultiControlProps = Omit<ControlProps, 'onChange'> & {\n  /**\n   * Triggered when values change.\n   */\n  onChange?: (value?: SelectValue<any>[] | null) => void;\n};\n\nexport default forwardRef<ReactSelect, MultiControlProps>(function MultiSelectControl(\n  props,\n  ref\n) {\n  return <SelectControl forwardedRef={ref} {...props} multiple />;\n});\n","import {components, OptionProps} from 'react-select';\nimport styled from '@emotion/styled';\n\nimport SelectControl, {ControlProps} from 'app/components/forms/selectControl';\nimport space from 'app/styles/space';\nimport {MemberRole} from 'app/types';\nimport theme from 'app/utils/theme';\n\ntype OptionType = {\n  label: string;\n  value: string;\n  disabled: boolean;\n  description: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  roles: MemberRole[];\n  disableUnallowed: boolean;\n  value?: string;\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: disableUnallowed && !r.allowed,\n            description: r.desc,\n          } as OptionType)\n      )}\n      components={{\n        Option: ({label, data, ...optionProps}: OptionProps<OptionType>) => (\n          <components.Option label={label} {...(optionProps as any)}>\n            <RoleItem>\n              <h1>{label}</h1>\n              <div>{data.description}</div>\n            </RoleItem>\n          </components.Option>\n        ),\n      }}\n      styles={{\n        control: provided => ({\n          ...provided,\n          borderBottomLeftRadius: theme.borderRadius,\n          borderBottomRightRadius: theme.borderRadius,\n        }),\n        menu: provided => ({\n          ...provided,\n          borderRadius: theme.borderRadius,\n          marginTop: space(0.5),\n          width: '350px',\n          overflow: 'hidden',\n        }),\n      }}\n      {...props}\n    />\n  );\n}\n\nconst RoleItem = styled('div')`\n  display: grid;\n  grid-template-columns: 80px 1fr;\n  grid-gap: ${space(1)};\n\n  h1,\n  div {\n    font-size: ${p => p.theme.fontSizeSmall};\n    line-height: 1.4;\n    margin: ${space(0.25)} 0;\n  }\n`;\n\nexport default RoleSelectControl;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport MultiSelectControl, {\n  MultiControlProps,\n} from 'app/components/forms/multiSelectControl';\nimport HookOrDefault from 'app/components/hookOrDefault';\nimport {PanelItem} from 'app/components/panels';\nimport RoleSelectControl from 'app/components/roleSelectControl';\nimport Tag from 'app/components/tag';\nimport Tooltip from 'app/components/tooltip';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Member, MemberRole, Organization, Team} from 'app/types';\n\ntype Props = {\n  inviteRequest: Member;\n  inviteRequestBusy: {[key: string]: boolean};\n  organization: Organization;\n  onApprove: (inviteRequest: Member) => void;\n  onDeny: (inviteRequest: Member) => void;\n  onUpdate: (data: Partial<Member>) => void;\n  allTeams: Team[];\n  allRoles: MemberRole[];\n};\n\nconst InviteModalHook = HookOrDefault({\n  hookName: 'member-invite-modal:customization',\n  defaultComponent: ({onSendInvites, children}) =>\n    children({sendInvites: onSendInvites, canSend: true}),\n});\n\ntype InviteModalRenderFunc = React.ComponentProps<typeof InviteModalHook>['children'];\ntype OnChangeArgs = Parameters<NonNullable<MultiControlProps['onChange']>>[0];\n\nconst InviteRequestRow = ({\n  inviteRequest,\n  inviteRequestBusy,\n  organization,\n  onApprove,\n  onDeny,\n  onUpdate,\n  allTeams,\n  allRoles,\n}: Props) => {\n  const role = allRoles.find(r => r.id === inviteRequest.role);\n  const roleDisallowed = !(role && role.allowed);\n\n  // eslint-disable-next-line react/prop-types\n  const hookRenderer: InviteModalRenderFunc = ({sendInvites, canSend, headerInfo}) => (\n    <StyledPanelItem>\n      <div>\n        <h5 style={{marginBottom: space(0.5)}}>\n          <UserName>{inviteRequest.email}</UserName>\n        </h5>\n        {inviteRequest.inviteStatus === 'requested_to_be_invited' ? (\n          inviteRequest.inviterName && (\n            <Description>\n              <Tooltip\n                title={t(\n                  'An existing member has asked to invite this user to your organization'\n                )}\n              >\n                {tct('Requested by [inviterName]', {\n                  inviterName: inviteRequest.inviterName,\n                })}\n              </Tooltip>\n            </Description>\n          )\n        ) : (\n          <JoinRequestIndicator\n            tooltipText={t('This user has asked to join your organization.')}\n          >\n            {t('Join request')}\n          </JoinRequestIndicator>\n        )}\n      </div>\n\n      <StyledRoleSelectControl\n        name=\"role\"\n        disableUnallowed\n        onChange={r => onUpdate({role: r.value})}\n        value={inviteRequest.role}\n        roles={allRoles}\n      />\n\n      <TeamSelectControl\n        name=\"teams\"\n        placeholder={t('Add to teams\\u2026')}\n        onChange={(teams: OnChangeArgs) =>\n          onUpdate({teams: (teams || []).map(team => team.value)})\n        }\n        value={inviteRequest.teams}\n        options={allTeams.map(({slug}) => ({\n          value: slug,\n          label: `#${slug}`,\n        }))}\n        clearable\n      />\n\n      <ButtonGroup>\n        <Confirm\n          onConfirm={sendInvites}\n          disableConfirmButton={!canSend}\n          disabled={roleDisallowed}\n          message={\n            <React.Fragment>\n              {tct('Are you sure you want to invite [email] to your organization?', {\n                email: inviteRequest.email,\n              })}\n              {headerInfo}\n            </React.Fragment>\n          }\n        >\n          <Button\n            priority=\"primary\"\n            size=\"small\"\n            busy={inviteRequestBusy[inviteRequest.id]}\n            title={\n              roleDisallowed\n                ? t(\n                    `You do not have permission to approve a user of this role.\n                     Select a different role to approve this user.`\n                  )\n                : undefined\n            }\n          >\n            {t('Approve')}\n          </Button>\n        </Confirm>\n        <Button\n          size=\"small\"\n          busy={inviteRequestBusy[inviteRequest.id]}\n          onClick={() => onDeny(inviteRequest)}\n        >\n          {t('Deny')}\n        </Button>\n      </ButtonGroup>\n    </StyledPanelItem>\n  );\n\n  return (\n    <InviteModalHook\n      willInvite\n      organization={organization}\n      onSendInvites={() => onApprove(inviteRequest)}\n    >\n      {hookRenderer}\n    </InviteModalHook>\n  );\n};\n\nconst JoinRequestIndicator = styled(Tag)`\n  text-transform: uppercase;\n`;\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: minmax(150px, auto) minmax(100px, 140px) 220px max-content;\n  grid-gap: ${space(2)};\n  align-items: center;\n`;\n\nconst UserName = styled('div')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst Description = styled('div')`\n  display: block;\n  color: ${p => p.theme.subText};\n  font-size: 14px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst StyledRoleSelectControl = styled(RoleSelectControl)`\n  max-width: 140px;\n`;\n\nconst TeamSelectControl = styled(MultiSelectControl)`\n  max-width: 220px;\n  .Select-value-label {\n    max-width: 150px;\n    word-break: break-all;\n  }\n`;\n\nconst ButtonGroup = styled('div')`\n  display: inline-grid;\n  grid-template-columns: repeat(2, max-content);\n  grid-gap: ${space(1)};\n`;\n\nexport default InviteRequestRow;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {AccessRequest} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  orgId: string;\n  onRemoveAccessRequest: (id: string) => void;\n  requestList: AccessRequest[];\n};\n\ntype State = {\n  accessRequestBusy: Record<string, boolean>;\n};\n\ntype HandleOpts = {\n  id: string;\n  isApproved: boolean;\n  successMessage: string;\n  errorMessage: string;\n};\n\nclass OrganizationAccessRequests extends React.Component<Props, State> {\n  state: State = {\n    accessRequestBusy: {},\n  };\n\n  async handleAction({id, isApproved, successMessage, errorMessage}: HandleOpts) {\n    const {api, orgId, onRemoveAccessRequest} = this.props;\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: true},\n    }));\n\n    try {\n      await api.requestPromise(`/organizations/${orgId}/access-requests/${id}/`, {\n        method: 'PUT',\n        data: {isApproved},\n      });\n      onRemoveAccessRequest(id);\n      addSuccessMessage(successMessage);\n    } catch {\n      addErrorMessage(errorMessage);\n    }\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: false},\n    }));\n  }\n\n  handleApprove = (id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: true,\n      successMessage: t('Team request approved'),\n      errorMessage: t('Error approving team request'),\n    });\n  };\n\n  handleDeny = (id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: false,\n      successMessage: t('Team request denied'),\n      errorMessage: t('Error denying team request'),\n    });\n  };\n\n  render() {\n    const {requestList} = this.props;\n    const {accessRequestBusy} = this.state;\n\n    if (!requestList || !requestList.length) {\n      return null;\n    }\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Pending Team Requests')}</PanelHeader>\n\n        <PanelBody>\n          {requestList.map(({id, member, team, requester}) => {\n            const memberName =\n              member.user &&\n              (member.user.name || member.user.email || member.user.username);\n            const requesterName =\n              requester && (requester.name || requester.email || requester.username);\n            return (\n              <StyledPanelItem key={id}>\n                <div data-test-id=\"request-message\">\n                  {requesterName\n                    ? tct('[requesterName] requests to add [name] to the [team] team.', {\n                        requesterName,\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })\n                    : tct('[name] requests access to the [team] team.', {\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })}\n                </div>\n                <div>\n                  <StyledButton\n                    priority=\"primary\"\n                    size=\"small\"\n                    onClick={e => this.handleApprove(id, e)}\n                    busy={accessRequestBusy[id]}\n                  >\n                    {t('Approve')}\n                  </StyledButton>\n                  <Button\n                    busy={accessRequestBusy[id]}\n                    onClick={e => this.handleDeny(id, e)}\n                    size=\"small\"\n                  >\n                    {t('Deny')}\n                  </Button>\n                </div>\n              </StyledPanelItem>\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: auto max-content;\n  grid-gap: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nexport default withApi(OrganizationAccessRequests);\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {MEMBER_ROLES} from 'app/constants';\nimport {t, tct} from 'app/locale';\nimport {AccessRequest, Member, Organization, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport InviteRequestRow from './inviteRequestRow';\nimport OrganizationAccessRequests from './organizationAccessRequests';\n\ntype DefaultProps = {\n  inviteRequests: Member[];\n};\n\ntype Props = {\n  organization: Organization;\n  requestList: AccessRequest[];\n  teams: Team[];\n  onUpdateInviteRequest: (id: string, data: Partial<Member>) => void;\n  onRemoveInviteRequest: (id: string) => void;\n  onRemoveAccessRequest: (id: string) => void;\n  showInviteRequests: boolean;\n} & RouteComponentProps<{orgId: string}, {}> &\n  DefaultProps;\n\ntype State = AsyncView['state'] & {\n  inviteRequestBusy: {[key: string]: boolean};\n};\n\nclass OrganizationRequestsView extends AsyncView<Props, State> {\n  static defaultProps: DefaultProps = {\n    inviteRequests: [],\n  };\n\n  getDefaultState() {\n    const state = super.getDefaultState();\n    return {\n      ...state,\n      inviteRequestBusy: {},\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    super.UNSAFE_componentWillMount();\n    this.handleRedirect();\n  }\n\n  componentDidUpdate() {\n    this.handleRedirect();\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const orgId = this.props.organization.slug;\n\n    return [['member', `/organizations/${orgId}/members/me/`]];\n  }\n\n  handleRedirect() {\n    const {router, params, requestList, showInviteRequests} = this.props;\n\n    // redirect to the members view if the user cannot see\n    // the invite requests panel and all of the team requests\n    // have been approved or denied\n    if (showInviteRequests || requestList.length) {\n      return null;\n    }\n    return router.push(`/settings/${params.orgId}/members/`);\n  }\n\n  handleAction = async ({\n    inviteRequest,\n    method,\n    data,\n    successMessage,\n    errorMessage,\n    eventKey,\n    eventName,\n  }) => {\n    const {params, organization, onRemoveInviteRequest} = this.props;\n\n    this.setState(state => ({\n      inviteRequestBusy: {...state.inviteRequestBusy, [inviteRequest.id]: true},\n    }));\n\n    try {\n      await this.api.requestPromise(\n        `/organizations/${params.orgId}/invite-requests/${inviteRequest.id}/`,\n        {\n          method,\n          data,\n        }\n      );\n\n      onRemoveInviteRequest(inviteRequest.id);\n      addSuccessMessage(successMessage);\n      trackAnalyticsEvent({\n        eventKey,\n        eventName,\n        organization_id: organization.id,\n        member_id: parseInt(inviteRequest.id, 10),\n        invite_status: inviteRequest.inviteStatus,\n      });\n    } catch {\n      addErrorMessage(errorMessage);\n    }\n\n    this.setState(state => ({\n      inviteRequestBusy: {...state.inviteRequestBusy, [inviteRequest.id]: false},\n    }));\n  };\n\n  handleApprove = (inviteRequest: Member) => {\n    this.handleAction({\n      inviteRequest,\n      method: 'PUT',\n      data: {\n        role: inviteRequest.role,\n        teams: inviteRequest.teams,\n        approve: 1,\n      },\n      successMessage: tct('[email] has been invited', {email: inviteRequest.email}),\n      errorMessage: tct('Error inviting [email]', {email: inviteRequest.email}),\n      eventKey: 'invite_request.approved',\n      eventName: 'Invite Request Approved',\n    });\n  };\n\n  handleDeny = (inviteRequest: Member) => {\n    this.handleAction({\n      inviteRequest,\n      method: 'DELETE',\n      data: {},\n      successMessage: tct('Invite request for [email] denied', {\n        email: inviteRequest.email,\n      }),\n      errorMessage: tct('Error denying invite request for [email]', {\n        email: inviteRequest.email,\n      }),\n      eventKey: 'invite_request.denied',\n      eventName: 'Invite Request Denied',\n    });\n  };\n\n  render() {\n    const {\n      params,\n      requestList,\n      showInviteRequests,\n      inviteRequests,\n      onRemoveAccessRequest,\n      onUpdateInviteRequest,\n      organization,\n      teams,\n    } = this.props;\n    const {inviteRequestBusy, member} = this.state;\n\n    return (\n      <Fragment>\n        {showInviteRequests && (\n          <Panel>\n            <PanelHeader>{t('Pending Invite Requests')}</PanelHeader>\n            <PanelBody>\n              {inviteRequests.map(inviteRequest => (\n                <InviteRequestRow\n                  key={inviteRequest.id}\n                  organization={organization}\n                  inviteRequest={inviteRequest}\n                  inviteRequestBusy={inviteRequestBusy}\n                  allTeams={teams}\n                  allRoles={member ? member.roles : MEMBER_ROLES}\n                  onApprove={this.handleApprove}\n                  onDeny={this.handleDeny}\n                  onUpdate={data => onUpdateInviteRequest(inviteRequest.id, data)}\n                />\n              ))}\n              {inviteRequests.length === 0 && (\n                <EmptyMessage>{t('No requests found.')}</EmptyMessage>\n              )}\n            </PanelBody>\n          </Panel>\n        )}\n\n        <OrganizationAccessRequests\n          orgId={params.orgId}\n          requestList={requestList}\n          onRemoveAccessRequest={onRemoveAccessRequest}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default withTeams(withOrganization(OrganizationRequestsView));\n"],"sourceRoot":""}