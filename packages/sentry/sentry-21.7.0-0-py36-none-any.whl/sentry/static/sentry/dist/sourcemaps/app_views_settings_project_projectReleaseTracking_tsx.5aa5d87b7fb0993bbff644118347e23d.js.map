{"version":3,"sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectReleaseTracking.tsx"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","defaultState","loading","plugins","error","pageLinks","PluginStoreConfig","state","updating","Map","reset","this","getInitialState","getState","Array","from","values","init","listenTo","PluginActions","onFetchAll","onFetchAllSuccess","onFetchAllError","onUpdate","onUpdateSuccess","onUpdateError","triggerState","trigger","resetLoading","data","map","plugin","id","err","updateObj","get","newPlugin","set","_updateObj","delete","origPlugin","Reflux","WrappedComponent","WithPlugins","PluginsStore","setState","undefined","fetchPlugins","prevProps","_prevState","prevContext","props","organization","project","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","unsubscribe","projectId","orgId","React","getDisplayName","withOrganization","withProject","AsyncView","title","getTitle","renderComponent","AsyncComponent","placeholderData","token","webhookUrl","ProjectReleaseTracking","params","api","request","method","success","addSuccessMessage","t","addErrorMessage","routeTitleGen","allowError","status","hasWrite","access","includes","pluginList","filter","p","type","hasConfiguration","getDynamicText","value","fixed","icon","size","withPadding","tct","link","href","release","label","help","disabled","priority","onConfirm","handleRegenerateToken","message","getReleaseWebhookIntructions","withPlugins"],"mappings":"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","file":"chunks/app_views_settings_project_projectReleaseTracking_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import Reflux from 'reflux';\n\nimport PluginActions from 'app/actions/pluginActions';\nimport {Plugin} from 'app/types';\n\ntype PluginStoreInterface = {\n  state: {\n    loading: boolean;\n    plugins: Plugin[];\n    error: Error | null;\n    pageLinks: string | null;\n  };\n  plugins: Map<string, Plugin> | null;\n  updating: Map<string, Plugin>;\n};\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst PluginStoreConfig: Reflux.StoreDefinition & PluginStoreInterface = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    this.reset();\n    this.listenTo(PluginActions.fetchAll, this.onFetchAll);\n    this.listenTo(PluginActions.fetchAllSuccess, this.onFetchAllSuccess);\n    this.listenTo(PluginActions.fetchAllError, this.onFetchAllError);\n    this.listenTo(PluginActions.update, this.onUpdate);\n    this.listenTo(PluginActions.updateSuccess, this.onUpdateSuccess);\n    this.listenTo(PluginActions.updateError, this.onUpdateError);\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading}: {resetLoading?: boolean} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data: Plugin[], {pageLinks}: {pageLinks?: string}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\ntype PluginStore = Reflux.Store & PluginStoreInterface;\n\nconst PluginStore = Reflux.createStore(PluginStoreConfig);\n\nexport default PluginStore as PluginStore;\n","import * as React from 'react';\n\nimport {fetchPlugins} from 'app/actionCreators/plugins';\nimport PluginsStore from 'app/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  plugins: Plugin[];\n  loading: boolean;\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends React.Component<\n    Omit<P, keyof 'plugins'> & WithPluginProps,\n    State\n  > {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {WithRouterProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Alert from 'app/components/alert';\nimport AutoSelectText from 'app/components/autoSelectText';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport PluginList from 'app/components/pluginList';\nimport {IconFlag} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Organization, Plugin, Project} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withPlugins from 'app/utils/withPlugins';\nimport AsyncView from 'app/views/asyncView';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nconst TOKEN_PLACEHOLDER = 'YOUR_TOKEN';\nconst WEBHOOK_PLACEHOLDER = 'YOUR_WEBHOOK_URL';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  plugins: {plugins: Plugin[]; loading: boolean};\n} & WithRouterProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  data: {\n    token: string;\n    webhookUrl: string;\n  } | null;\n} & AsyncView['state'];\n\nconst placeholderData = {\n  token: TOKEN_PLACEHOLDER,\n  webhookUrl: WEBHOOK_PLACEHOLDER,\n};\n\nclass ProjectReleaseTracking extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Releases'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n\n    // Allow 403s\n    return [\n      [\n        'data',\n        `/projects/${orgId}/${projectId}/releases/token/`,\n        {},\n        {allowError: err => err && err.status === 403},\n      ],\n    ];\n  }\n\n  handleRegenerateToken = () => {\n    const {orgId, projectId} = this.props.params;\n    this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {\n      method: 'POST',\n      data: {project: projectId},\n      success: data => {\n        this.setState({\n          data: {\n            token: data.token,\n            webhookUrl: data.webhookUrl,\n          },\n        });\n        addSuccessMessage(\n          t(\n            'Your deploy token has been regenerated. You will need to update any existing deploy hooks.'\n          )\n        );\n      },\n      error: () => {\n        addErrorMessage(t('Unable to regenerate deploy token, please try again'));\n      },\n    });\n  };\n\n  getReleaseWebhookIntructions() {\n    const {webhookUrl} = this.state.data || placeholderData;\n    return (\n      'curl ' +\n      webhookUrl +\n      ' \\\\' +\n      '\\n  ' +\n      '-X POST \\\\' +\n      '\\n  ' +\n      \"-H 'Content-Type: application/json' \\\\\" +\n      '\\n  ' +\n      '-d \\'{\"version\": \"abcdefg\"}\\''\n    );\n  }\n\n  renderBody() {\n    const {organization, project, plugins} = this.props;\n    const hasWrite = organization.access.includes('project:write');\n\n    if (plugins.loading) {\n      return <LoadingIndicator />;\n    }\n\n    const pluginList = plugins.plugins.filter(\n      (p: Plugin) => p.type === 'release-tracking' && p.hasConfiguration\n    );\n\n    let {token, webhookUrl} = this.state.data || placeholderData;\n\n    token = getDynamicText({value: token, fixed: '__TOKEN__'});\n    webhookUrl = getDynamicText({value: webhookUrl, fixed: '__WEBHOOK_URL__'});\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Release Tracking')} />\n        {!hasWrite && (\n          <Alert icon={<IconFlag size=\"md\" />} type=\"warning\">\n            {t(\n              'You do not have sufficient permissions to access Release tokens, placeholders are displayed below.'\n            )}\n          </Alert>\n        )}\n        <p>\n          {t(\n            'Configure release tracking for this project to automatically record new releases of your application.'\n          )}\n        </p>\n\n        <Panel>\n          <PanelHeader>{t('Client Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                'Start by binding the [release] attribute in your application, take a look at [link] to see how to configure this for the SDK you are using.',\n                {\n                  link: (\n                    <a href=\"https://docs.sentry.io/platform-redirect/?next=/configuration/releases/\">\n                      our docs\n                    </a>\n                  ),\n                  release: <code>release</code>,\n                }\n              )}\n            </p>\n            <p>\n              {t(\n                \"This will annotate each event with the version of your application, as well as automatically create a release entity in the system the first time it's seen.\"\n              )}\n            </p>\n            <p>\n              {t(\n                'In addition you may configure a release hook (or use our API) to push a release and include additional metadata with it.'\n              )}\n            </p>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Deploy Token')}</PanelHeader>\n          <PanelBody>\n            <Field\n              label={t('Token')}\n              help={t('A unique secret which is used to generate deploy hook URLs')}\n            >\n              <TextCopyInput>{token}</TextCopyInput>\n            </Field>\n            <Field\n              label={t('Regenerate Token')}\n              help={t(\n                'If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.'\n              )}\n            >\n              <div>\n                <Confirm\n                  disabled={!hasWrite}\n                  priority=\"danger\"\n                  onConfirm={this.handleRegenerateToken}\n                  message={t(\n                    'Are you sure you want to regenerate your token? Your current token will no longer be usable.'\n                  )}\n                >\n                  <Button type=\"button\" priority=\"danger\" disabled={!hasWrite}>\n                    {t('Regenerate Token')}\n                  </Button>\n                </Confirm>\n              </div>\n            </Field>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Webhook')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {t(\n                'If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.'\n              )}\n            </p>\n\n            <AutoSelectText>\n              <pre>{webhookUrl}</pre>\n            </AutoSelectText>\n\n            <p>\n              {t(\n                'The release webhook accepts the same parameters as the \"Create a new Release\" API endpoint.'\n              )}\n            </p>\n\n            {getDynamicText({\n              value: (\n                <AutoSelectText>\n                  <pre>{this.getReleaseWebhookIntructions()}</pre>\n                </AutoSelectText>\n              ),\n              fixed: (\n                <pre>\n                  {`curl __WEBHOOK_URL__ \\\\\n  -X POST \\\\\n  -H 'Content-Type: application/json' \\\\\n  -d \\'{\"version\": \"abcdefg\"}\\'`}\n                </pre>\n              ),\n            })}\n          </PanelBody>\n        </Panel>\n\n        <PluginList\n          organization={organization}\n          project={project}\n          pluginList={pluginList}\n        />\n\n        <Panel>\n          <PanelHeader>{t('API')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {t(\n                'You can notify Sentry when you release new versions of your application via our HTTP API.'\n              )}\n            </p>\n\n            <p>\n              {tct('See the [link:releases documentation] for more information.', {\n                link: <a href=\"https://docs.sentry.io/workflow/releases/\" />,\n              })}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withPlugins(ProjectReleaseTracking);\n\n// Export for tests\nexport {ProjectReleaseTracking};\n"],"sourceRoot":""}