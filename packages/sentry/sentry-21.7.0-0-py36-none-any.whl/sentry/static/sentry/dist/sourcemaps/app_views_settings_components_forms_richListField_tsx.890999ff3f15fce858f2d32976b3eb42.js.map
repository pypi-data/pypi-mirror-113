{"version":3,"sources":["webpack:///./app/views/settings/components/forms/richListField.tsx"],"names":["RichList","items","props","disabled","onChange","onBlur","data","value","triggerChange","index","splice","item","onAddItem","addItem","onEditItem","omit","updateItem","onRemoveItem","removeItem","renderItem","removeConfirm","error","warning","Item","onClick","undefined","StatusIcon","title","containerDisplayMode","color","SettingsButton","icon","size","label","t","borderless","DeleteButtonWrapper","event","preventDefault","stopPropagation","confirmText","confirmInput","name","priority","onConfirm","DeleteButton","addDropdown","onSelect","onSelectDropdownItem","isOpen","isCircled","addButtonText","ItemList","this","map","renderDropdown","React","RichListField","field","fieldProps","otherProps","length","p","theme","button","borderRadius","fontSizeSmall","space","default","background","border","ItemButton","Button","gray300"],"mappings":"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","file":"chunks/app_views_settings_components_forms_richListField_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport Button from 'app/components/button';\nimport ConfirmDelete from 'app/components/confirmDelete';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport {Item as ListItem} from 'app/components/dropdownAutoComplete/types';\nimport DropdownButton from 'app/components/dropdownButton';\nimport Tooltip from 'app/components/tooltip';\nimport {IconAdd, IconDelete, IconSettings, IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype ConfirmDeleteProps = Partial<React.ComponentProps<typeof ConfirmDelete>>;\ntype DropdownProps = Omit<React.ComponentProps<typeof DropdownAutoComplete>, 'children'>;\n\ntype UpdatedItem = ListItem | Record<string, string>;\n\ntype DefaultProps = {\n  /**\n   * Text used for the add item button.\n   */\n  addButtonText: string;\n\n  /**\n   * Callback invoked when an item is added via the dropdown menu.\n   *\n   * The callback is expected to call `addItem(item)`\n   */\n  onAddItem: RichListCallback;\n\n  /**\n   * Callback invoked when an item is removed.\n   *\n   * The callback is expected to call `removeItem(item)`\n   */\n  onRemoveItem: RichListCallback;\n};\n\n/**\n * You can get better typing by specifying the item type\n * when using this component.\n *\n * The callback parameter accepts a more general type than `ListItem` as the\n * callback handler can perform arbitrary logic and extend the payload in\n * ways that are hard to type.\n */\nexport type RichListCallback = (\n  item: ListItem,\n  callback: (item: UpdatedItem) => void\n) => void;\n\nexport type RichListProps = {\n  /**\n   * Render function to render an item.\n   */\n  renderItem: (item: ListItem) => React.ReactNode;\n\n  /**\n   * The list of items to render.\n   */\n  value: ListItem[];\n\n  /**\n   * Configuration for the add item dropdown.\n   */\n  addDropdown: DropdownProps;\n\n  /**\n   * Disables all controls in the rich list.\n   */\n  disabled: boolean;\n\n  onBlur?: InputField['props']['onBlur'];\n  onChange?: InputField['props']['onChange'];\n\n  /**\n   * Properties for the confirm delete dialog. If missing, the item will be\n   * removed immediately.\n   */\n  removeConfirm?: Omit<ConfirmDeleteProps, 'onConfirm'> & {\n    onConfirm?: (item: ListItem) => void;\n  };\n\n  /**\n   * Callback invoked when an item is interacted with.\n   *\n   * The callback is expected to call `editItem(item)`\n   */\n  onEditItem?: RichListCallback;\n} & Partial<DefaultProps>;\n\nclass RichList extends React.PureComponent<RichListProps, {}> {\n  static defaultProps: DefaultProps = {\n    addButtonText: t('Add item'),\n    onAddItem: (item, addItem) => addItem(item),\n    onRemoveItem: (item, removeItem) => removeItem(item),\n  };\n\n  triggerChange = (items: UpdatedItem[]) => {\n    if (!this.props.disabled) {\n      this.props.onChange?.(items, {});\n      this.props.onBlur?.(items, {});\n    }\n  };\n\n  addItem = (data: UpdatedItem) => {\n    const items = [...this.props.value, data];\n    this.triggerChange(items);\n  };\n\n  updateItem = (data: UpdatedItem, index: number) => {\n    const items = [...this.props.value] as UpdatedItem[];\n    items.splice(index, 1, data);\n    this.triggerChange(items);\n  };\n\n  removeItem = (index: number) => {\n    const items = [...this.props.value];\n    items.splice(index, 1);\n    this.triggerChange(items);\n  };\n\n  onSelectDropdownItem = (item: ListItem) => {\n    if (!this.props.disabled && this.props.onAddItem) {\n      this.props.onAddItem(item, this.addItem);\n    }\n  };\n\n  onEditItem = (item: ListItem, index: number) => {\n    if (!this.props.disabled) {\n      this.props.onEditItem?.(omit(item, 'error') as ListItem, data =>\n        this.updateItem(data, index)\n      );\n    }\n  };\n\n  onRemoveItem = (item: ListItem, index: number) => {\n    if (!this.props.disabled) {\n      this.props.onRemoveItem?.(item, () => this.removeItem(index));\n    }\n  };\n\n  renderItem = (item: ListItem, index: number) => {\n    const {disabled, renderItem, onEditItem, removeConfirm} = this.props;\n\n    const error = item.error;\n    const warning = item.warning;\n\n    return (\n      <Item\n        disabled={!!disabled}\n        key={index}\n        onClick={\n          (error || warning) && onEditItem && !disabled\n            ? () => this.onEditItem(item, index)\n            : undefined\n        }\n      >\n        {renderItem(item)}\n        {error ? (\n          <StatusIcon>\n            <Tooltip title={error} containerDisplayMode=\"inline-flex\">\n              <IconWarning color=\"red300\" />\n            </Tooltip>\n          </StatusIcon>\n        ) : warning ? (\n          <StatusIcon>\n            <Tooltip title={warning} containerDisplayMode=\"inline-flex\">\n              <IconWarning color=\"yellow300\" />\n            </Tooltip>\n          </StatusIcon>\n        ) : (\n          onEditItem && (\n            <SettingsButton\n              onClick={() => this.onEditItem(item, index)}\n              disabled={disabled}\n              icon={<IconSettings />}\n              size=\"zero\"\n              label={t('Edit Item')}\n              borderless\n            />\n          )\n        )}\n        <DeleteButtonWrapper\n          onClick={event => {\n            event.preventDefault();\n            event.stopPropagation();\n          }}\n        >\n          {removeConfirm ? (\n            <ConfirmDelete\n              confirmText={t('Remove')}\n              disabled={disabled}\n              {...removeConfirm}\n              confirmInput={item.name}\n              priority=\"danger\"\n              onConfirm={() => {\n                this.onRemoveItem(item, index);\n                removeConfirm.onConfirm?.(item);\n              }}\n            >\n              <DeleteButton\n                disabled={disabled}\n                size=\"zero\"\n                icon={<IconDelete size=\"xs\" />}\n                label={t('Delete Item')}\n                borderless\n              />\n            </ConfirmDelete>\n          ) : (\n            <DeleteButton\n              disabled={disabled}\n              size=\"zero\"\n              icon={<IconDelete size=\"xs\" />}\n              label={t('Delete Item')}\n              onClick={() => this.onRemoveItem(item, index)}\n              borderless\n            />\n          )}\n        </DeleteButtonWrapper>\n      </Item>\n    );\n  };\n\n  renderDropdown = () => {\n    const {disabled} = this.props;\n\n    return (\n      <DropdownAutoComplete\n        {...this.props.addDropdown}\n        disabled={disabled}\n        onSelect={this.onSelectDropdownItem}\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            disabled={disabled}\n            icon={<IconAdd size=\"xs\" isCircled />}\n            isOpen={isOpen}\n            size=\"small\"\n          >\n            {this.props.addButtonText}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  };\n\n  render() {\n    return (\n      <ItemList>\n        {this.props.value.map(this.renderItem)}\n        {this.renderDropdown()}\n      </ItemList>\n    );\n  }\n}\n\n/**\n * A 'rich' dropdown that provides action hooks for when item\n * are selected/created/removed.\n *\n * An example usage is the debug image selector where each 'source' option\n * requires additional configuration data.\n */\nexport default function RichListField(props: RichListProps & InputField['props']) {\n  return (\n    <InputField\n      {...props}\n      field={(fieldProps: RichListProps) => {\n        const {value, ...otherProps} = fieldProps;\n\n        // We must not render this field until `setValue` has been applied by the\n        // model, which is done after the field is mounted for the first time. To\n        // check this, we cannot use Array.isArray because the value passed in by\n        // the model might actually be an ObservableArray.\n        if (typeof value === 'string' || value?.length === undefined) {\n          return null;\n        }\n        return <RichList {...otherProps} value={[...value]} />;\n      }}\n    />\n  );\n}\n\nconst ItemList = styled('ul')`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  padding: 0;\n`;\n\nconst Item = styled('li')<{\n  disabled: boolean;\n  onClick?: (event: React.MouseEvent) => void;\n}>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  border-radius: ${p => p.theme.button.borderRadius};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  line-height: ${p => p.theme.fontSizeSmall};\n  text-transform: none;\n  margin: 0 10px 5px 0;\n  white-space: nowrap;\n  padding: ${space(1)} 36px ${space(1)} ${space(1.5)};\n  /* match adjacent elements */\n  height: 32px;\n  overflow: hidden;\n  background-color: ${p => p.theme.button.default.background};\n  border: 1px solid ${p => p.theme.button.default.border};\n  color: ${p => p.theme.button.default.color};\n  opacity: ${p => (p.disabled ? 0.65 : null)};\n  cursor: ${p => (p.disabled ? 'not-allowed' : p.onClick ? 'pointer' : 'default')};\n`;\n\nconst ItemButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n  &:hover {\n    color: ${p => (p.disabled ? p.theme.gray300 : p.theme.button.default.color)};\n  }\n`;\n\nconst SettingsButton = styled(ItemButton)`\n  margin-left: 10px;\n`;\n\nconst DeleteButton = styled(ItemButton)`\n  height: 100%;\n  width: 100%;\n`;\n\nconst StatusIcon = styled('div')`\n  margin-left: 10px;\n  display: inline-flex;\n`;\n\nconst DeleteButtonWrapper = styled('div')`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1;\n  right: 0;\n  width: 36px;\n  height: 100%;\n`;\n"],"sourceRoot":""}