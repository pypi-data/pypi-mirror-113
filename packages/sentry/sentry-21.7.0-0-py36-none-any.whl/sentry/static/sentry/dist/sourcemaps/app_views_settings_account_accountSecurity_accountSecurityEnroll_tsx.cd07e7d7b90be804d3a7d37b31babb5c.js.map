{"version":3,"sources":["webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityEnroll.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx"],"names":["U2fInterface","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","setState","invokeU2fFlow","ref","form","value","JSON","stringify","props","challengeData","state","supportMail","ConfigStore","support","href","t","className","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","onClick","onTryAgain","u2f","supported","this","promise","flowMode","authenticateRequests","Error","registerRequests","then","data","u2fResponse","challenge","onTap","response","catch","submit","err","failure","metaData","type","Sentry","silentIfUnsupported","renderFailure","children","name","bindChallengeElement","bindResponseElement","renderBody","renderPrompt","renderUnsupported","React","MESSAGES","signin","sudo","enroll","U2fSign","displayMode","Component","getPendingInvite","Cookies","queryString","AsyncView","title","getTitle","renderComponent","AsyncComponent","AccountSecurityEnroll","FormModel","hasSentCode","remountComponent","dataModel","authenticator","phone","otp","undefined","secret","sendingCode","addLoadingMessage","api","requestPromise","enrollEndpoint","formModel","resetForm","addErrorMessage","handleEnrollSuccess","addSuccessMessage","tapData","deviceName","getValue","loading","handleEnrollError","method","id","handleSmsSubmit","handleTotpSubmit","authId","authenticatorEndpoint","router","push","params","allowError","alreadyEnrolled","status","responseJSON","details","pendingInvitation","fetchOrganizationByMember","memberId","toString","addOrg","fetchOrgDetails","openRecoveryOptions","authenticatorName","fields","onSmsReset","onU2fTap","CodeContainer","StyledQRCode","qrcode","size","label","Actions","priority","disabled","required","gap","find","marginBottom","getFields","handleSmsReset","handleU2fTap","defaultValues","filter","field","defaultValue","map","reduce","acc","Fragment","css","enabled","isEnrolled","action","removeButton","onConfirm","handleRemove","description","length","model","apiMethod","apiEndpoint","onSubmit","handleSubmit","initialData","hideFooter","forms","PanelItem","QRCode","space","withRouter","ConfirmHeader","message","RemoveConfirm","FormPanel","access","additionalFieldProps","renderFooter","renderHeader","otherProps","sanitizeQuerySelector","fieldWithoutDefaultValue","disabledReason","highlighted","JsonForm","location","hash","scrollToHash","nextProps","toHash","scrollToElement","decodeURIComponent","align","offset","fieldsWithVisibleProp","defined","visible","every","formPanelProps","shouldDisplayForm","features","formGroup","i","renderForm"],"mappings":"2tDA8BMA,E,0nBACW,CACbC,YAAa,KACbC,YAAa,KACbC,iBAAkB,KAClBC,eAAe,EACfC,cAAe,KACfC,gBAAiB,Q,gCAuFN,WACX,EAAKC,SACH,CAACH,eAAe,EAAOC,cAAe,OACtC,WAAW,EAAKG,uB,0CAIwC,SAAAC,GAC1D,EAAKF,SAAS,CACZJ,iBAAkBM,EAClBP,YAAaO,GAAOA,EAAIC,OAGtBD,IACFA,EAAIE,MAAQC,KAAKC,UAAU,EAAKC,MAAMC,oB,yCAIiB,SAAAN,GAAG,OAC5D,EAAKF,SAAS,CAACD,gBAAiBG,Q,mCAuBlB,WACd,IAAOJ,EAAiB,EAAKW,MAAtBX,cACDY,EAAcC,QAAgB,gBAC9BC,EAAUF,GACd,aAAGG,KAAM,UAAYH,EAArB,SAAmCA,KAEnC,0BAAOI,OAAE,aAEX,OACE,eAAKC,UAAU,kBAAf,WACE,0BACE,4BAASD,OAAE,aAAqB,IAE9B,CACEE,eAAeF,OAAE,kDACjBG,cAAcH,OAAE,sCAChBI,kBAAkBJ,OAAE,kCACpBK,gBAAgBL,OAAE,+CAClBM,WAAWC,QACT,8NAKA,CACEC,IAAI,gBACJC,IAAI,gBACJX,aAGJd,GAAiB,OAGtB,EAAK0B,cACJ,eAAKC,MAAO,CAACC,UAAW,IAAxB,UACE,aAAGC,QAAS,EAAKC,WAAYb,UAAU,kBAAvC,UACGD,OAAE,uB,uEAlKf,oGAC0Be,kBAD1B,OACQC,EADR,OAIEC,KAAK/B,SAAS,CAACN,YAAaoC,IAExBA,GACFC,KAAK9B,gBAPT,gD,wEAWA,WAAgB,IACV+B,EADU,OAGd,GAA4B,SAAxBD,KAAKxB,MAAM0B,SACbD,EAAUH,SAASE,KAAKxB,MAAMC,cAAc0B,0BACvC,IAA4B,WAAxBH,KAAKxB,MAAM0B,SAIpB,MAAM,IAAIE,MAAJ,iCAAoCJ,KAAKxB,MAAM0B,SAA/C,MAHN,MAAiDF,KAAKxB,MAAMC,cAArD4B,EAAP,EAAOA,iBAAkBF,EAAzB,EAAyBA,qBACzBF,EAAUH,aAAaO,EAAkBF,GAK3CF,EACGK,MAAK,SAAAC,GACJ,EAAKtC,SACH,CACEH,eAAe,IAEjB,WACE,IAQuB,EARjB0C,EAAclC,KAAKC,UAAUgC,GAC7BE,EAAYnC,KAAKC,UAAU,EAAKC,MAAMC,eAExC,EAAKC,MAAMV,kBAEb,EAAKU,MAAMV,gBAAgBK,MAAQmC,GAGhC,EAAKhC,MAAMkC,MAKhB,EAAKlC,MACFkC,MAAM,CACLC,SAAUH,EACVC,cAEDG,OAAM,WAEL,EAAK3C,SAAS,CACZF,cAAe,gBACfD,eAAe,OAbnB,YAAKY,MAAMd,mBAAX,SAAwBiD,eAmB/BD,OAAM,SAAAE,GACL,IAAIC,EAAU,eAGVD,EAAIE,WACoB,sBAAtBF,EAAIE,SAASC,KAEbF,EAD0B,WAAxB,EAAKvC,MAAM0B,SACH,mBAEA,iBAEmB,gBAAtBY,EAAIE,SAASC,OACtBF,EAAU,cAMdG,KAAwBJ,GACxB,EAAK7C,SAAS,CACZF,cAAegD,EACfjD,eAAe,S,+BA0BvB,WACE,OAAOkC,KAAKxB,MAAM2C,oBAAsB,MACtC,eAAKnC,UAAU,UAAf,UACE,eAAKA,UAAU,QAAf,UACE,aAAGA,UAAU,QAAb,UACGD,OAAE,gO,uBAYb,WACE,MAAoC,cAA7BiB,KAAKtB,MAAMX,gB,wBA+CpB,WACE,OAAOiC,KAAKtB,MAAMX,cAAgBiC,KAAKoB,gBAAkBpB,KAAKxB,MAAM6C,W,0BAGtE,WACE,IAAO3B,EAASM,KAAKxB,MAAdkB,MAEP,OACE,eACEA,MAAOA,EACPV,UACE,WACCgB,KAAKtB,MAAMZ,cAAgB,UAAY,KACvCkC,KAAKtB,MAAMX,cAAgB,kBAAoB,IALpD,WAQE,eAAKiB,UAAU,yBAAf,WACE,eAAKA,UAAU,mBACf,eAAKA,UAAU,sBACf,eAAKA,UAAU,eAAf,WACE,gBAAMA,UAAU,SAChB,gBAAMA,UAAU,SAChB,gBAAMA,UAAU,eAGpB,iBAAOiC,KAAK,SAASK,KAAK,YAAYnD,IAAK6B,KAAKuB,wBAChD,iBAAON,KAAK,SAASK,KAAK,WAAWnD,IAAK6B,KAAKwB,uBAC/C,eAAKxC,UAAU,QAAf,SAAwBgB,KAAKyB,oB,oBAKnC,WACE,IAAO9D,EAAeqC,KAAKtB,MAApBf,YAGP,OAAoB,OAAhBA,EACK,KAGJA,EAIEqC,KAAK0B,eAHH1B,KAAK2B,wB,GA7NSC,aAArBlE,E,2BAoON,Q,ulBC5PA,IAAMmE,EAAW,CACfC,QAAQ/C,OACN,kFAEFgD,MAAMhD,OAAE,oEACRiD,QAAQjD,OACN,oFAUEkD,E,wiBAKJ,WACE,MAAgCjC,KAAKxB,MAA9B0D,EAAP,EAAOA,YAAgB1D,GAAvB,YACM0B,EAA2B,WAAhBgC,EAA2B,SAAW,OACvD,OACE,QAAC,EAAD,OACM1D,GADN,IAEE2C,oBAAqC,SAAhBe,EACrBhC,SAAUA,EAHZ,UAKE,sBAAI2B,EAASK,IAAgB,c,GAdfC,aAAhBF,E,8BAAAA,E,eACkB,CACpBC,YAAa,WAkBjB,S,4MCjCe,SAASE,IACtB,IAAM7B,EAAO8B,QAAY,kBAEzB,OAAK9B,EAIE+B,QAAkB/B,GAHhB,O,muBCLUgC,E,0iBAInB,WACE,MAAO,K,oBAGT,WACE,IAAMC,EAAQxC,KAAKyC,WACnB,OACE,QAAC,IAAD,CAAeD,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGxC,KAAK0C,wB,GATJC,KAHWJ,E,wkHC+CrB,I,4CAyFMK,E,8nBACQ,IAAIC,M,sCA0CmB,O,oCAOlB,kBAAM,EAAK5E,SAAS,CAAC6E,aAAa,GAAQ,EAAKC,sB,uEAG9C,WAAOC,GAAP,sFACqB,EAAKtE,MAAnCuE,EADS,EACTA,cAAeH,EADN,EACMA,YACfI,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,IAGTD,GAAUD,EALC,wDASV1C,EAAO,CACX2C,QAGAC,IAAKL,EAAcK,OAAMC,EACzBC,OAAQJ,EAAcI,QAIxB,EAAKpF,SAAS,CAACqF,aAAcR,IAExBA,GAGHS,SAAkBxE,OAAE,sBAFpBwE,SAAkBxE,OAAE,wBAAyBwB,EAAK2C,QArBpC,mBA2BR,EAAKM,IAAIC,eAAe,EAAKC,eAAgB,CAACnD,SA3BtC,iEA6Bd,EAAKoD,UAAUC,aAEfC,QACE,EAAKnF,MAAMoE,aAAc/D,OAAE,kBAAmBA,OAAE,sBAGlD,EAAKd,SAAS,CACZ6E,aAAa,EACbQ,aAAa,IAIf,EAAKP,mBAzCS,2BA8CXD,EAMH,EAAKgB,uBAJL,EAAK7F,SAAS,CAAC6E,aAAa,EAAMQ,aAAa,KAC/CS,SAAkBhF,OAAE,kBAAmBwB,EAAK2C,SAjD9B,0D,4HAyDH,WAAOc,GAAP,8EACPzD,EADO,GACC0D,WAAY,EAAKN,UAAUO,SAAS,eAAkBF,GAEpE,EAAK/F,SAAS,CAACkG,SAAS,IAHX,kBAML,EAAKX,IAAIC,eAAe,EAAKC,eAAgB,CAACnD,SANzC,8DAQX,EAAK6D,oBARM,2BAYb,EAAKN,sBAZQ,yD,gIAgBI,WAAOd,GAAP,0EACZ,EAAKtE,MAAMuE,cADC,wDAKX1C,EALW,OAMXyC,UAAa,IANF,IAOfK,OAAQ,EAAK3E,MAAMuE,cAAcI,SAGnC,EAAKpF,SAAS,CAACkG,SAAS,IAVP,kBAaT,EAAKX,IAAIC,eAAe,EAAKC,eAAgB,CAACW,OAAQ,OAAQ9D,SAbrD,8DAef,EAAK6D,oBAfU,2BAmBjB,EAAKN,sBAnBY,yD,0FAsBuB,SAAAvD,GAAQ,MAC1C+D,EAAE,UAAG,EAAK5F,MAAMuE,qBAAd,aAAG,EAA0BqB,GAE1B,SAAPA,EAIO,QAAPA,GACF,EAAKC,gBAAgBhE,GAJrB,EAAKiE,iBAAiBjE,O,mDAgCX,wFACN0C,EAAiB,EAAKvE,MAAtBuE,gBAEgBA,EAAcwB,OAHxB,0EAUL,EAAKjB,IAAIC,eAAe,EAAKiB,sBAAuB,CAACL,OAAQ,WAVxD,+DAYXR,SAAgB9E,OAAE,iCAZP,2BAgBb,EAAKP,MAAMmG,OAAOC,KAAK,gCACvBb,SAAkBhF,OAAE,mCAjBP,0D,yCArLf,WACE,OAAOA,OAAE,c,6BAGX,WACE,mFAAoC+D,aAAa,M,iCAGnD,WACE,yCAAmC9C,KAAKxB,MAAMqG,OAAOJ,OAArD,O,0BAGF,WACE,gBAAUzE,KAAK0E,sBAAf,a,0BAGF,WAAsD,WAiBpD,MAAO,CAAC,CAAC,gBAAiB1E,KAAK0D,eAAgB,GAAI,CAACoB,WAhB/B,SAAChE,GACpB,IAAMiE,EACJjE,GACe,MAAfA,EAAIkE,QACJlE,EAAImE,cACyB,qBAA7BnE,EAAImE,aAAaC,QAQnB,OANIH,IACF,EAAKvG,MAAMmG,OAAOC,KAAK,gCACvBf,SAAgB9E,OAAE,sBAIbgG,Q,+BAMX,WACE/E,KAAKmF,mBAAoB/C,W,6BAK3B,WAAwB,QACtB,2BAAOpC,KAAKtB,MAAMuE,qBAAlB,aAAO,EAA0B3B,YAAjC,QAAyC,kB,sDAoH3C,kFAIMtB,KAAKmF,kBAJX,iCAKUC,QAA0BpF,KAAKmF,kBAAkBE,SAASC,WAAY,CAC1EC,QAAQ,EACRC,iBAAiB,IAPvB,OAWExF,KAAKxB,MAAMmG,OAAOC,KAAK,gCACvBa,yBAAoB,CAACC,kBAAmB1F,KAAK0F,oBAZ/C,gD,4EAgBA,WACE1F,KAAK/B,SAAS,CAACkG,SAAS,KACxBN,SAAgB9E,OAAE,gCAAiCiB,KAAK0F,sB,wBAwB1D,WAAa,MACX,EAAkD1F,KAAKtB,MAAhDuE,EAAP,EAAOA,cAAeH,EAAtB,EAAsBA,YAAaQ,EAAnC,EAAmCA,YAEnC,IAAKL,EACH,OAAO,KAGT,IAAM0C,EA5SQ,SAAC,GAMwB,IALzC1C,EAKyC,EALzCA,cACAH,EAIyC,EAJzCA,YACAQ,EAGyC,EAHzCA,YACAsC,EAEyC,EAFzCA,WACAC,EACyC,EADzCA,SAEOzH,EAAQ6E,EAAR7E,KAEP,OAAKA,EAIoB,SAArB6E,EAAcqB,GAChB,CACE,kBACE,QAACwB,EAAD,WACE,QAACC,EAAD,CAAc1H,MAAO4E,EAAc+C,OAAQC,KAAM,OADhC,WAIrB,wBACE,QAAC,IAAD,CAAoBC,OAAOnH,OAAE,wBAA7B,UACE,QAAC,IAAD,oBAAgBkE,EAAcI,cAA9B,QAAwC,MAD/B,YAPf,eAWKjF,GAXL,CAYE,kBACE,QAAC+H,EAAD,WACE,QAAC,KAAD,CAAQC,SAAS,UAAUnF,KAAK,SAAhC,UACGlC,OAAE,cAFM,cAWM,QAArBkE,EAAcqB,GAEhB,QACMlG,EAAK,IADX,IACeiI,SAAU/C,GAAeR,KADxC,eAEMA,EAAc,CAAC,EAAD,KAAK1E,EAAK,IAAV,IAAckI,UAAU,KAAS,IAFrD,CAGE,kBACE,QAACH,EAAD,WACE,QAAC,KAAD,CAAWI,IAAK,EAAhB,UACGzD,IAAe,QAAC,KAAD,CAAQlD,QAASgG,EAAjB,UAA8B7G,OAAE,iBAChD,QAAC,KAAD,CAAQqH,SAAS,UAAUnF,KAAK,SAAhC,SACG6B,GAAc/D,OAAE,YAAaA,OAAE,mBAJzB,iBAaM,QAArBkE,EAAcqB,GAET,CADiBlG,EAAKoI,MAAK,kBAAqB,eAArB,EAAElF,QAGlC,kBACE,QAAC,UAAD,CAEE5B,MAAO,CAAC+G,aAAc,GACtBhI,cAAewE,EAAcxC,UAC7ByB,YAAY,SACZxB,MAAOmF,GAJH,gBAUL,KA/DE,KAkSQa,CAAU,CACvBzD,gBACAH,cACAQ,cACAsC,WAAY5F,KAAK2G,eACjBd,SAAU7F,KAAK4G,eAIXC,EAAgBlB,EAClBA,EACGmB,QACC,SAAAC,GAAK,MACc,mBAAVA,QAAsD,IAAvBA,EAAMC,gBAE/CC,KAAI,SAAAF,GAAK,MAAI,CACZA,EAAMzF,KACW,mBAAVyF,EAAuBA,EAAMC,aAAe,OAEpDE,QAAO,SAACC,EAAD,GAAwB,mBAAjB7F,EAAiB,KAAXjD,EAAW,KAE9B,OADA8I,EAAI7F,GAAQjD,EACL8I,IACN,IACL,GAEJ,OACE,QAAC,EAAAC,SAAD,YACE,QAAC,IAAD,CACE5E,OACE,QAAC,EAAA4E,SAAD,YACE,yBAAOnE,EAAc3B,QACrB,QAAC,IAAD,CAAiB+F,IAAG,EAAmBC,QAASrE,EAAcsE,gBAGlEC,OACEvE,EAAcsE,YACdtE,EAAcwE,eACZ,QAAC,IAAD,CAAeC,UAAW1H,KAAK2H,aAA/B,UACE,QAAC,KAAD,CAAQvB,SAAS,SAAjB,SAA2BnD,EAAcwE,oBAMjD,QAAC,IAAD,UAAYxE,EAAc2E,gBAExB,UAAC3E,EAAc7E,YAAf,QAAC,EAAoByJ,UACrB,QAAC,IAAD,CACEC,MAAO9H,KAAK2D,UACZoE,UAAU,OACVC,YAAahI,KAAK0E,sBAClBuD,SAAUjI,KAAKkI,aACfC,YAAW,OAAMtB,GAAkB5D,GACnCmF,YAAU,EANZ,UAQE,QAAC,IAAD,CAAUC,MAAO,CAAC,CAAC7F,MAAO,gBAAiBmD,OAAQA,UAAU,gB,GA1QrCpD,KAkR9BuD,GAAgB,OAAOwC,KAAP,qBAAH,iDAIbnC,GAAU,OAAOmC,KAAP,qBAAH,oDAIPvC,GAAe,OAAOwC,IAAP,qBAAH,6BAELC,OAAM,GAFD,KAKlB,WAAeC,gBAAW7F,I,yGC7a1B,IAAM8F,GAAgB,E,kFAAA,GAAO,MAAP,sBAAH,6DAKnB,O,s8CCEA,IAAMC,GACJ,QAAC,WAAD,YACE,QAAC,IAAD,WAAgB5J,OAAE,yCAClB,QAAC,IAAD,WACGA,OACC,mGAMF6J,EAAgB,SAACpK,GAAD,OAAkB,QAAC,IAAD,OAAaA,GAAb,IAAoBmK,QAASA,MAA/DC,E,4BAEN,O,qmEC0BqBC,E,wiBAKnB,WAAS,WACP,EASI7I,KAAKxB,MARPgE,EADF,EACEA,MACAmD,EAFF,EAEEA,OACAmD,EAHF,EAGEA,OACAzC,EAJF,EAIEA,SACA0C,EALF,EAKEA,qBACAC,EANF,EAMEA,aACAC,EAPF,EAOEA,aACGC,GARL,YAWA,OACE,QAAC,KAAD,CAAO5E,GAAqB,iBAAV9B,GAAqB2G,OAAsB3G,QAASY,EAAtE,UACGZ,IAAS,QAAC,KAAD,UAAcA,KACxB,QAAC,IAAD,WAC2B,mBAAjByG,GAA+BA,EAAa,CAACzG,QAAOmD,WAE3DA,EAAOsB,KAAI,SAAAF,GACV,GAAqB,mBAAVA,EACT,OAAOA,IAG8CA,EAAhDC,aAAP,IAA2BoC,GAA3B,OAAuDrC,EAAvD,GASA,OALiB,IAAbV,IACF+C,EAAyB/C,UAAW,EACpC+C,EAAyBC,oBAAiBjG,IAI1C,QAAC,IAAD,OACE0F,OAAQA,EACRzC,SAAUA,GAEN6C,GACAH,GALN,IAMEhC,MAAOqC,EACPE,YAAa,EAAK9K,MAAM8K,cAAX,WAA+BvC,EAAMzF,QAJ7CyF,EAAMzF,SAQQ,mBAAjB0H,GAA+BA,EAAa,CAACxG,QAAOmD,qB,GAjD/B/D,aAAlBiH,E,gCAAAA,E,eACiB,CAClCE,qBAAsB,M,2zECfpBQ,E,0nBACW,CAEbD,YAAW,UAAE,EAAK9K,MAAMgL,gBAAb,aAAE,EAAqBC,O,kDAGpC,WACEzJ,KAAK0J,iB,8CAGP,SAAiCC,GAC/B,GAAI3J,KAAKxB,MAAMgL,SAASC,OAASE,EAAUH,SAASC,KAAM,CACxD,IAAMA,EAAOE,EAAUH,SAASC,KAChCzJ,KAAK0J,aAAaD,GAClBzJ,KAAK/B,SAAS,CAACqL,YAAaG,O,0BAIhC,SAAaG,GAAuB,MAE5BH,EAAOG,IAAM,UAAI5J,KAAKxB,MAAMgL,gBAAf,aAAI,EAAqBC,MAE5C,GAAKA,EAOL,IACEI,KAAgBV,OAAsBW,mBAAmBL,IAAQ,CAC/DM,MAAO,SACPC,QAAS,MAEX,MAAOlJ,GACPI,KAAwBJ,M,+BAI5B,SAAkB6E,GAChB,IAAMsE,EAAwBtE,EAAOmB,QACnC,SAAAC,GAAK,MAAqB,mBAAVA,IAAwBmD,QAAQnD,aAAD,EAACA,EAAOoD,YAGzD,GAAIxE,EAAOkC,SAAWoC,EAAsBpC,OAAQ,CAClD,MAAyC7H,KAAKxB,MAAvCuK,EAAP,EAAOA,qBAAyBvK,GAAhC,YASA,OAP2ByL,EAAsBG,OAAM,SAAArD,GACrD,MAA6B,mBAAlBA,EAAMoD,SACPpD,EAAMoD,QAAN,OAAkB3L,GAAUuK,KAE9BhC,EAAMoD,WAMlB,OAAO,I,wBAGT,YAiBG,IAhBDxE,EAgBC,EAhBDA,OACA0E,EAeC,EAfDA,eACA7H,EAcC,EAdDA,MAiBA,OAF0BxC,KAAKsK,kBAAkB3E,IAI9C0E,WAAgBrB,cAChBqB,WAAgBpB,cAKZ,QAAC,IAAD,GAAWzG,MAAOA,EAAOmD,OAAQA,GAAY0E,IAH3C,O,oBAMX,WAAS,WACP,EAYIrK,KAAKxB,MAXPsK,EADF,EACEA,OACAnD,EAFF,EAEEA,OACAnD,EAHF,EAGEA,MACA6F,EAJF,EAIEA,MACAhC,EALF,EAKEA,SACAkE,EANF,EAMEA,SACAxB,EAPF,EAOEA,qBACAC,EARF,EAQEA,aACAC,EATF,EASEA,aAEGC,GAXL,EAUEM,UAVF,aAcMa,EAAiB,CACrBvB,SACAzC,WACAkE,WACAxB,uBACAC,eACAC,eACAK,YAAatJ,KAAKtB,MAAM4K,aAG1B,OACE,qBAASJ,GAAT,mBACoB,IAAVb,GACNA,EAAMpB,KAAI,SAACuD,EAAWC,GAAZ,OACR,QAAC,WAAD,UACG,EAAKC,WAAL,GAAiBL,kBAAmBG,KADlBC,WAIP,IAAVpC,QACY,IAAX1C,GACP3F,KAAK0K,WAAW,CAAC/E,SAAQ0E,iBAAgB7H,kB,GA9H5BZ,aAAjB2H,E,uBAoIN,KAAed,gBAAWc","file":"chunks/app_views_settings_account_accountSecurity_accountSecurityEnroll_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport * as Sentry from '@sentry/react';\nimport u2f from 'u2f-api';\n\nimport {t, tct} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport {ChallengeData} from 'app/types';\n\ntype TapParams = {\n  response: string;\n  challenge: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  silentIfUnsupported: boolean;\n  onTap: ({response, challenge}: TapParams) => Promise<void>;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  responseElement: HTMLInputElement | null;\n  formElement: HTMLFormElement | null;\n  challengeElement: HTMLInputElement | null;\n  isSupported: boolean | null;\n  hasBeenTapped: boolean;\n  deviceFailure: string | null;\n};\n\nclass U2fInterface extends React.Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n  };\n\n  async componentDidMount() {\n    const supported = await u2f.isSupported();\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    if (supported) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  invokeU2fFlow() {\n    let promise: Promise<u2f.SignResponse | u2f.RegisterResponse>;\n\n    if (this.props.flowMode === 'sign') {\n      promise = u2f.sign(this.props.challengeData.authenticateRequests);\n    } else if (this.props.flowMode === 'enroll') {\n      const {registerRequests, authenticateRequests} = this.props.challengeData;\n      promise = u2f.register(registerRequests, authenticateRequests);\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = JSON.stringify(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n        });\n      });\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already in use.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                '[p1:The Sentry server administrator modified the ' +\n                  'device registrations.]' +\n                  '[p2:You need to remove and re-add the device to continue ' +\n                  'using your U2F device. Use a different sign-in method or ' +\n                  'contact [support] for assistance.]',\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure ? ' device-failure' : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default U2fInterface;\n","import {Component} from 'react';\n\nimport {t} from 'app/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = U2fInterface['props'];\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode: 'signin' | 'enroll' | 'sudo';\n};\n\nclass U2fSign extends Component<Props> {\n  static defaultProps = {\n    displayMode: 'signin',\n  };\n\n  render() {\n    const {displayMode, ...props} = this.props;\n    const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n    return (\n      <U2fInterface\n        {...props}\n        silentIfUnsupported={displayMode === 'sudo'}\n        flowMode={flowMode}\n      >\n        <p>{MESSAGES[displayMode] || null}</p>\n      </U2fInterface>\n    );\n  }\n}\n\nexport default U2fSign;\n","import Cookies from 'js-cookie';\nimport * as queryString from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return queryString.parse(data) as any;\n}\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps, withRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport QRCode from 'qrcode.react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {openRecoveryOptions} from 'app/actionCreators/modal';\nimport {fetchOrganizationByMember} from 'app/actionCreators/organizations';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport {PanelItem} from 'app/components/panels';\nimport U2fsign from 'app/components/u2f/u2fsign';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Authenticator} from 'app/types';\nimport getPendingInvite from 'app/utils/getPendingInvite';\nimport AsyncView from 'app/views/asyncView';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport FormModel from 'app/views/settings/components/forms/model';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype getFieldsOpts = {\n  authenticator: Authenticator;\n  /**\n   * Flag to track if totp has been sent\n   */\n  hasSentCode: boolean;\n  /**\n   * Flag to track if we are currently sending the otp code\n   */\n  sendingCode: boolean;\n  /**\n   * Callback to reset SMS 2fa enrollment\n   */\n  onSmsReset: () => void;\n  /**\n   * Callback when u2f device is activated\n   */\n  onU2fTap: U2fsign['props']['onTap'];\n};\n\n/**\n * Retrieve additional form fields (or modify ones) based on 2fa method\n */\nconst getFields = ({\n  authenticator,\n  hasSentCode,\n  sendingCode,\n  onSmsReset,\n  onU2fTap,\n}: getFieldsOpts): null | FieldObject[] => {\n  const {form} = authenticator;\n\n  if (!form) {\n    return null;\n  }\n\n  if (authenticator.id === 'totp') {\n    return [\n      () => (\n        <CodeContainer key=\"qrcode\">\n          <StyledQRCode value={authenticator.qrcode} size={228} />\n        </CodeContainer>\n      ),\n      () => (\n        <Field key=\"secret\" label={t('Authenticator secret')}>\n          <TextCopyInput>{authenticator.secret ?? ''}</TextCopyInput>\n        </Field>\n      ),\n      ...form,\n      () => (\n        <Actions key=\"confirm\">\n          <Button priority=\"primary\" type=\"submit\">\n            {t('Confirm')}\n          </Button>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Sms Form needs a start over button + confirm button\n  // Also inputs being disabled vary based on hasSentCode\n  if (authenticator.id === 'sms') {\n    // Ideally we would have greater flexibility when rendering footer\n    return [\n      {...form[0], disabled: sendingCode || hasSentCode},\n      ...(hasSentCode ? [{...form[1], required: true}] : []),\n      () => (\n        <Actions key=\"sms-footer\">\n          <ButtonBar gap={1}>\n            {hasSentCode && <Button onClick={onSmsReset}>{t('Start Over')}</Button>}\n            <Button priority=\"primary\" type=\"submit\">\n              {hasSentCode ? t('Confirm') : t('Send Code')}\n            </Button>\n          </ButtonBar>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Need to render device name field + U2f component\n  if (authenticator.id === 'u2f') {\n    const deviceNameField = form.find(({name}) => name === 'deviceName')!;\n    return [\n      deviceNameField,\n      () => (\n        <U2fsign\n          key=\"u2f-enroll\"\n          style={{marginBottom: 0}}\n          challengeData={authenticator.challenge}\n          displayMode=\"enroll\"\n          onTap={onU2fTap}\n        />\n      ),\n    ];\n  }\n\n  return null;\n};\n\ntype Props = AsyncView['props'] & RouteComponentProps<{authId: string}, {}> & {};\n\ntype State = AsyncView['state'] & {\n  authenticator: Authenticator | null;\n  hasSentCode: boolean;\n  sendingCode: boolean;\n};\n\ntype PendingInvite = ReturnType<typeof getPendingInvite>;\n\n/**\n * Renders necessary forms in order to enroll user in 2fa\n */\nclass AccountSecurityEnroll extends AsyncView<Props, State> {\n  formModel = new FormModel();\n\n  getTitle() {\n    return t('Security');\n  }\n\n  getDefaultState() {\n    return {...super.getDefaultState(), hasSentCode: false};\n  }\n\n  get authenticatorEndpoint() {\n    return `/users/me/authenticators/${this.props.params.authId}/`;\n  }\n\n  get enrollEndpoint() {\n    return `${this.authenticatorEndpoint}enroll/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const errorHandler = (err: any) => {\n      const alreadyEnrolled =\n        err &&\n        err.status === 400 &&\n        err.responseJSON &&\n        err.responseJSON.details === 'Already enrolled';\n\n      if (alreadyEnrolled) {\n        this.props.router.push('/settings/account/security/');\n        addErrorMessage(t('Already enrolled'));\n      }\n\n      // Allow the endpoint to fail if the user is already enrolled\n      return alreadyEnrolled;\n    };\n\n    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];\n  }\n\n  componentDidMount() {\n    this.pendingInvitation = getPendingInvite();\n  }\n\n  pendingInvitation: PendingInvite = null;\n\n  get authenticatorName() {\n    return this.state.authenticator?.name ?? 'Authenticator';\n  }\n\n  // This resets state so that user can re-enter their phone number again\n  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);\n\n  // Handles SMS authenticators\n  handleSmsSubmit = async (dataModel: any) => {\n    const {authenticator, hasSentCode} = this.state;\n    const {phone, otp} = dataModel;\n\n    // Don't submit if empty\n    if (!phone || !authenticator) {\n      return;\n    }\n\n    const data = {\n      phone,\n      // Make sure `otp` is undefined if we are submitting OTP verification\n      // Otherwise API will think that we are on verification step (e.g. after submitting phone)\n      otp: hasSentCode ? otp : undefined,\n      secret: authenticator.secret,\n    };\n\n    // Only show loading when submitting OTP\n    this.setState({sendingCode: !hasSentCode});\n\n    if (!hasSentCode) {\n      addLoadingMessage(t('Sending code to %s...', data.phone));\n    } else {\n      addLoadingMessage(t('Verifying OTP...'));\n    }\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (error) {\n      this.formModel.resetForm();\n\n      addErrorMessage(\n        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')\n      );\n\n      this.setState({\n        hasSentCode: false,\n        sendingCode: false,\n      });\n\n      // Re-mount because we want to fetch a fresh secret\n      this.remountComponent();\n\n      return;\n    }\n\n    if (!hasSentCode) {\n      // Just successfully finished sending OTP to user\n      this.setState({hasSentCode: true, sendingCode: false});\n      addSuccessMessage(t('Sent code to %s', data.phone));\n    } else {\n      // OTP was accepted and SMS was added as a 2fa method\n      this.handleEnrollSuccess();\n    }\n  };\n\n  // Handle u2f device tap\n  handleU2fTap = async (tapData: any) => {\n    const data = {deviceName: this.formModel.getValue('deviceName'), ...tapData};\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Currently only TOTP uses this\n  handleTotpSubmit = async (dataModel: any) => {\n    if (!this.state.authenticator) {\n      return;\n    }\n\n    const data = {\n      ...(dataModel ?? {}),\n      secret: this.state.authenticator.secret,\n    };\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  handleSubmit: Form['props']['onSubmit'] = data => {\n    const id = this.state.authenticator?.id;\n\n    if (id === 'totp') {\n      this.handleTotpSubmit(data);\n      return;\n    }\n    if (id === 'sms') {\n      this.handleSmsSubmit(data);\n      return;\n    }\n  };\n\n  // Handler when we successfully add a 2fa device\n  async handleEnrollSuccess() {\n    // If we're pending approval of an invite, the user will have just joined\n    // the organization when completing 2fa enrollment. We should reload the\n    // organization context in that case to assign them to the org.\n    if (this.pendingInvitation) {\n      await fetchOrganizationByMember(this.pendingInvitation.memberId.toString(), {\n        addOrg: true,\n        fetchOrgDetails: true,\n      });\n    }\n\n    this.props.router.push('/settings/account/security/');\n    openRecoveryOptions({authenticatorName: this.authenticatorName});\n  }\n\n  // Handler when we failed to add a 2fa device\n  handleEnrollError() {\n    this.setState({loading: false});\n    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));\n  }\n\n  // Removes an authenticator\n  handleRemove = async () => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // `authenticator.authId` is NOT the same as `props.params.authId` This is\n    // for backwards compatability with API endpoint\n    try {\n      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticator'));\n      return;\n    }\n\n    this.props.router.push('/settings/account/security/');\n    addSuccessMessage(t('Authenticator has been removed'));\n  };\n\n  renderBody() {\n    const {authenticator, hasSentCode, sendingCode} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const fields = getFields({\n      authenticator,\n      hasSentCode,\n      sendingCode,\n      onSmsReset: this.handleSmsReset,\n      onU2fTap: this.handleU2fTap,\n    });\n\n    // Attempt to extract `defaultValue` from server generated form fields\n    const defaultValues = fields\n      ? fields\n          .filter(\n            field =>\n              typeof field !== 'function' && typeof field.defaultValue !== 'undefined'\n          )\n          .map(field => [\n            field.name,\n            typeof field !== 'function' ? field.defaultValue : '',\n          ])\n          .reduce((acc, [name, value]) => {\n            acc[name] = value;\n            return acc;\n          }, {})\n      : {};\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator css={{marginLeft: 6}} enabled={authenticator.isEnrolled} />\n            </Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <RemoveConfirm onConfirm={this.handleRemove}>\n                <Button priority=\"danger\">{authenticator.removeButton}</Button>\n              </RemoveConfirm>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        {!!authenticator.form?.length && (\n          <Form\n            model={this.formModel}\n            apiMethod=\"POST\"\n            apiEndpoint={this.authenticatorEndpoint}\n            onSubmit={this.handleSubmit}\n            initialData={{...defaultValues, ...authenticator}}\n            hideFooter\n          >\n            <JsonForm forms={[{title: 'Configuration', fields: fields ?? []}]} />\n          </Form>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst CodeContainer = styled(PanelItem)`\n  justify-content: center;\n`;\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nconst StyledQRCode = styled(QRCode)`\n  background: white;\n  padding: ${space(2)};\n`;\n\nexport default withRouter(AccountSecurityEnroll);\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import * as React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n"],"sourceRoot":""}