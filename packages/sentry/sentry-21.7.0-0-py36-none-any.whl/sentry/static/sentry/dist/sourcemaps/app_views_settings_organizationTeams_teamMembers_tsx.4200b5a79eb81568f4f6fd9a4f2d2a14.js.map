{"version":3,"sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/views/settings/organizationTeams/teamMembers.tsx"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","teamId","request","orgId","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","TeamMembers","loading","dropdownBusy","teamMemberList","orgMemberList","debounce","query","setState","fetchMembersRequest","props","t","duration","selection","debouncedFetchMembersRequest","value","orgMember","state","find","member","undefined","concat","e","target","this","fetchData","nextProps","filter","m","hasWriteAccess","existingMembers","Set","map","canAddMembers","openMembership","items","has","searchKey","email","label","StyledUserListElement","StyledAvatar","user","size","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","to","onClick","openInviteMembersModal","source","alignMenu","onSelect","addTeamMember","openTeamAccessRequestModal","emptyMessage","onChange","handleMemberFilterChange","busy","onClose","isOpen","icon","isCircled","removeMember","onRetry","config","access","includes","hasButtons","style","textTransform","renderDropdown","length","isSelf","canRemoveMember","StyledMemberContainer","avatarSize","useLink","removeButton","React","PanelItem","space","p","theme","fontSizeSmall","overflowEllipsis","fontSizeExtraSmall","Link","withConfig","withApi","withOrganization"],"mappings":"6jBAaMA,EAAa,WAId,QAHHC,EAGG,uDAHuB,GAC1BC,EAEG,0DADAC,EACA,iCADAA,EACA,kBACHC,eAAA,GAAeH,EAAOC,IAAtB,OAAgCC,KA+B3B,SAASE,EACdC,EACAL,EACAM,GAGA,OADAC,iBAAyBP,EAAOQ,QACzBH,EAAII,QAAJ,iBAAsBT,EAAOU,MAA7B,YAAsCV,EAAOQ,OAA7C,KAAwD,CAC7DG,QAAS,SAAAC,GACPL,wBAAgCP,EAAOQ,OAAQI,GAC/Cb,EAAWO,EAAS,UAAWM,IAEjCC,MAAO,SAAAA,GACLN,sBAA8BP,EAAOQ,OAAQK,GAC7Cd,EAAWO,EAAS,QAASO,MAK5B,SAASC,EAAkBN,EAAkCI,GAClEL,kBAA0BC,EAAQI,GAG7B,SAASG,EACdV,EACAL,EACAM,GAEA,IAAMU,EAAW,UAAH,OAAahB,EAAOU,MAApB,YAA6BV,EAAOQ,OAApC,KAGd,OAFAD,WAAmBP,EAAOQ,OAAQR,EAAOY,MAElCP,EAAII,QAAQO,EAAU,CAC3BC,OAAQ,MACRL,KAAMZ,EAAOY,KACbD,QAAS,SAAAC,GACPE,EAAkBd,EAAOQ,OAAQI,GACjCb,EAAWO,EAAS,UAAWM,IAEjCC,MAAO,SAAAA,GACLN,gBAAwBP,EAAOQ,OAAQK,GACvCd,EAAWO,EAAS,QAASO,MAK5B,SAASK,EACdb,EACAL,EACAM,GACA,MACMU,EAAW,kBAAH,OAAqBhB,EAAOU,MAA5B,8BACZV,EAAOmB,gBADK,QACO,KADP,kBAEJnB,EAAOQ,OAFH,KAGRY,GAAKC,SAIX,OAFAd,WAAmBa,EAAIpB,EAAOQ,QAEvBH,EAAII,QAAQO,EAAU,CAC3BC,OAAQ,OACRN,QAAS,SAAAC,GACPL,kBAA0BP,EAAOQ,OAAQI,GACzCb,EAAWO,EAAS,UAAWM,IAEjCC,MAAO,SAAAA,GACLN,gBAAwBa,EAAIpB,EAAOQ,OAAQK,GAC3Cd,EAAWO,EAAS,QAASO,MAK5B,SAASS,EACdjB,EACAL,EACAM,GAEA,IAAMU,EAAW,kBAAH,OAAqBhB,EAAOU,MAA5B,oBACZV,EAAOmB,UAAY,KADP,kBAEJnB,EAAOQ,OAFH,KAGRY,GAAKC,SAIX,OAFAd,WAAmBa,EAAIpB,EAAOQ,QAEvBH,EAAII,QAAQO,EAAU,CAC3BC,OAAQ,SACRN,QAAS,SAAAC,GACPL,kBAA0BP,EAAOQ,OAAQI,GACzCb,EAAWO,EAAS,UAAWM,IAEjCC,MAAO,SAAAA,GACLN,gBAAwBa,EAAIpB,EAAOQ,OAAQK,GAC3Cd,EAAWO,EAAS,QAASO,MAK5B,SAASU,EAAWlB,EAAamB,EAA0BxB,GAGhE,OAFAO,eAAuBiB,GAEhBnB,EACJoB,eADI,yBAC6BzB,EAAOU,MADpC,WACoD,CACvDO,OAAQ,OACRL,KAAMY,IAEPE,MACC,SAAAd,GAQE,OAPAL,sBAA8BK,IAC9Be,SACEC,QAAI,2DAA4D,CAC9DJ,KAAM,IAAF,OAAMZ,EAAKiB,MACfC,aAAc9B,EAAOU,SAGlBE,KAET,SAAAmB,GAQE,MAPAxB,oBAA4BiB,EAAKK,KAAME,IACvCC,SACEJ,QAAI,6DAA8D,CAChEJ,KAAM,IAAF,OAAMA,EAAKK,MACfC,aAAc9B,EAAOU,SAGnBqB,KAKP,SAASE,EAAW5B,EAAaL,GAGtC,OAFAO,eAAuBP,EAAOQ,QAEvBH,EACJoB,eADI,iBACqBzB,EAAOU,MAD5B,YACqCV,EAAOQ,OAD5C,KACuD,CAC1DS,OAAQ,WAETS,MACC,SAAAd,GAQE,OAPAL,sBAA8BP,EAAOQ,OAAQI,IAC7Ce,SACEC,QAAI,+DAAgE,CAClEJ,KAAM,IAAF,OAAMxB,EAAOQ,QACjBsB,aAAc9B,EAAOU,SAGlBE,KAET,SAAAmB,GAQE,MAPAxB,oBAA4BP,EAAOQ,OAAQuB,IAC3CC,SACEJ,QAAI,+DAAgE,CAClEJ,KAAM,IAAF,OAAMxB,EAAOQ,QACjBsB,aAAc9B,EAAOU,SAGnBqB,O,6gGCtJRG,E,wnBACW,CACbC,SAAS,EACTtB,OAAO,EACPuB,cAAc,EACdC,eAAgB,GAChBC,cAAe,M,iDAuBcC,KAC7B,SAACC,GAAD,OACE,EAAKC,SAAS,CAACL,cAAc,IAAO,kBAAM,EAAKM,oBAAoBF,QACrE,O,2EA2BoB,WAAOA,GAAP,wFACE,EAAKG,MAApB3C,EADa,EACbA,OAAQK,EADK,EACLA,IACRK,EAASV,EAATU,MAFa,kBAKCL,EAAIoB,eAAJ,yBAAqCf,EAArC,aAAuD,CACxE8B,MAAO,CAACA,WANQ,OAKZ5B,EALY,OAQlB,EAAK6B,SAAS,CACZH,cAAe1B,EACfwB,cAAc,IAVE,iDAalBJ,SAAgBY,OAAE,wCAAyC,CACzDC,SAAU,MAGZ,EAAKJ,SAAS,CACZL,cAAc,IAlBE,yD,wGAuBV,mGACY,EAAKO,MAApBtC,EADG,EACHA,IAAKL,EADF,EACEA,OADF,kBAIWK,EAAIoB,eAAJ,iBACPzB,EAAOU,MADA,YACSV,EAAOQ,OADhB,cAJX,OAIFI,EAJE,OAOR,EAAK6B,SAAS,CACZJ,eAAgBzB,EAChBuB,SAAS,EACTtB,OAAO,IAVD,gDAaR,EAAK4B,SAAS,CACZN,SAAS,EACTtB,OAAO,IAfD,QAmBV,EAAK6B,oBAAoB,IAnBf,2D,mCAsBI,SAACI,GACf,IAAO9C,EAAU,EAAK2C,MAAf3C,OAEP,EAAKyC,SAAS,CAACN,SAAS,IAGxB,EAAKY,6BAA6B,KAElC7B,QACE,EAAKyB,MAAMtC,IACX,CACEK,MAAOV,EAAOU,MACdF,OAAQR,EAAOQ,OACfW,SAAU2B,EAAUE,OAEtB,CACErC,QAAS,WACP,IAAMsC,EAAY,EAAKC,MAAMZ,cAAca,MACzC,SAAAC,GAAM,OAAIA,EAAOhC,KAAO0B,EAAUE,cAElBK,IAAdJ,IAGJ,EAAKR,SAAS,CACZN,SAAS,EACTtB,OAAO,EACPwB,eAAgB,EAAKa,MAAMb,eAAeiB,OAAO,CAACL,OAEpDtB,SAAkBiB,OAAE,yCAEtB/B,MAAO,WACL,EAAK4B,SAAS,CACZN,SAAS,KAEXH,SAAgBY,OAAE,sC,8CAWC,SAACW,GAC1B,EAAKd,SAAS,CAACL,cAAc,IAC7B,EAAKW,6BAA6BQ,EAAEC,OAAOR,U,kDA9I7C,WACES,KAAKC,c,8CAGP,SAAiCC,GAC/B,IAAM3D,EAASyD,KAAKd,MAAM3C,OAExB2D,EAAU3D,OAAOQ,SAAWR,EAAOQ,QACnCmD,EAAU3D,OAAOU,QAAUV,EAAOU,OAElC+C,KAAKhB,SACH,CACEN,SAAS,EACTtB,OAAO,GAET4C,KAAKC,a,0BAWX,SAAaN,GAAgB,WACpBpD,EAAUyD,KAAKd,MAAf3C,QACPsB,OACEmC,KAAKd,MAAMtC,IACX,CACEK,MAAOV,EAAOU,MACdF,OAAQR,EAAOQ,OACfW,SAAUiC,EAAOhC,IAEnB,CACET,QAAS,WACP,EAAK8B,SAAS,CACZJ,eAAgB,EAAKa,MAAMb,eAAeuB,QAAO,SAAAC,GAAC,OAAIA,EAAEzC,KAAOgC,EAAOhC,SAExEO,SAAkBiB,OAAE,4CAEtB/B,MAAO,kBACLmB,SACEY,OAAE,2E,4BAqGZ,SAAekB,GAAyB,WACtC,EAA+BL,KAAKd,MAA7Bb,EAAP,EAAOA,aAAc9B,EAArB,EAAqBA,OACf+D,EAAkB,IAAIC,IAAIP,KAAKP,MAAMb,eAAe4B,KAAI,SAAAb,GAAM,OAAIA,EAAOhC,OAKzE8C,IADsBpC,YAAcqC,iBACCL,EAErCM,GAASX,KAAKP,MAAMZ,eAAiB,IACxCsB,QAAO,SAAAC,GAAC,OAAKE,EAAgBM,IAAIR,EAAEzC,OACnC6C,KAAI,SAAAJ,GAAC,MAAK,CACTS,UAAW,GAAF,OAAKT,EAAE5D,KAAP,YAAe4D,EAAEU,OAC1BvB,MAAOa,EAAEzC,GACToD,OACE,QAACC,EAAD,YACE,QAACC,EAAD,CAAcC,KAAMd,EAAGe,KAAM,GAAIC,UAAU,YAC3C,QAACC,EAAD,UAAoBjB,EAAE5D,MAAQ4D,EAAEU,eAKlCQ,GACJ,QAACC,EAAD,YACGpC,OAAE,YACH,QAACqC,EAAD,CACEC,GAAG,GACHC,QAAS,kBAAMC,4BAAuB,CAACC,OAAQ,WAC/C,eAAa,gBAHf,UAKGzC,OAAE,sBAKT,OACE,QAAC,IAAD,CACEwB,MAAOA,EACPkB,UAAU,QACVC,SACErB,EACIT,KAAK+B,cACL,SAAA1C,GAAS,OACP2C,gCAA2B,CACzBjF,OAAQR,EAAOQ,OACfE,MAAOV,EAAOU,MACdS,SAAU2B,EAAUE,SAG9B+B,WAAYA,EACZW,cAAc9C,OAAE,cAChB+C,SAAUlC,KAAKmC,yBACfC,KAAMpC,KAAKP,MAAMd,aACjB0D,QAAS,kBAAM,EAAK/C,6BAA6B,KAjBnD,SAmBG,gBAAEgD,EAAF,EAAEA,OAAF,OACC,QAAC,IAAD,CAAgBA,OAAQA,EAAQnB,KAAK,SAAS,eAAa,aAA3D,UACGhC,OAAE,qB,0BAOb,SAAaQ,GAAgB,WAC3B,OACE,QAAC,KAAD,CACEwB,KAAK,QACLoB,MAAM,QAAC,KAAD,CAAcpB,KAAK,KAAKqB,WAAS,IACvCd,QAAS,kBAAM,EAAKe,aAAa9C,IACjCoB,OAAO5B,OAAE,UAJX,UAMGA,OAAE,c,oBAKT,WAAS,WACP,GAAIa,KAAKP,MAAMf,QACb,OAAO,QAAC,IAAD,IAGT,GAAIsB,KAAKP,MAAMrC,MACb,OAAO,QAAC,IAAD,CAAcsF,QAAS1C,KAAKC,YAGrC,MAAuCD,KAAKd,MAArC3C,EAAP,EAAOA,OAAQ8B,EAAf,EAAeA,aAAcsE,EAA7B,EAA6BA,OACtBC,EAAUvE,EAAVuE,OACDvC,EAAiBuC,EAAOC,SAAS,cAAgBD,EAAOC,SAAS,cAEvE,OACE,QAAC,KAAD,YACE,QAAC,KAAD,CAAaC,YAAU,EAAvB,WACE,yBAAM3D,OAAE,cACR,eAAK4D,MAAO,CAACC,cAAe,QAA5B,SAAsChD,KAAKiD,eAAe5C,QAE3DL,KAAKP,MAAMb,eAAesE,OACzBlD,KAAKP,MAAMb,eAAe4B,KAAI,SAAAb,GAC5B,IAAMwD,EAASxD,EAAOmB,QAAU6B,EAAOzB,KAAKJ,MACtCsC,EAAkB/C,GAAkB8C,EAC1C,OACE,QAACE,EAAD,YACE,QAAC,IAAD,CAASC,WAAY,GAAI3D,OAAQA,EAAQ4D,SAAO,EAACtG,MAAOV,EAAOU,QAC9DmG,GAAmB,EAAKI,aAAa7D,KAFZA,EAAOhC,QAOvC,QAAC,IAAD,CAAc4E,MAAM,QAAC,KAAD,CAAUpB,KAAK,OAASA,KAAK,QAAjD,UACGhC,OAAE,qC,GAvQWsE,aAApBhF,E,0BA+QN,IAAM4E,GAAwB,OAAOK,KAAP,qBAAH,2EAKrB1C,GAAwB,OAAO,MAAP,qBAAH,gEAGb2C,OAAM,IAHO,wBAOrBtC,GAAoB,OAAO,MAAP,qBAAH,cACR,SAAAuC,GAAC,OAAIA,EAAEC,MAAMC,gBADL,IAEnBC,IAFmB,KAKjB9C,GAAe,QAAO,SAAA/B,GAAK,OAAI,QAAC,I,qWAAD,IAAgBA,MAAhC,qBAAH,uFAOZqC,GAAqB,OAAO,MAAP,qBAAH,+DAGXoC,OAAM,GAHK,iBAIT,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,qBAJJ,8BAQlBxC,GAAyB,OAAOyC,IAAP,qBAAH,8CAI5B,WAAeC,QAAWC,QAAQC,OAAiB3F","file":"chunks/app_views_settings_organizationTeams_teamMembers_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {\n  openInviteMembersModal,\n  openTeamAccessRequestModal,\n} from 'app/actionCreators/modal';\nimport {joinTeam, leaveTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport Button from 'app/components/button';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport {Item} from 'app/components/dropdownAutoComplete/types';\nimport DropdownButton from 'app/components/dropdownButton';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelHeader, PanelItem} from 'app/components/panels';\nimport {IconSubtract, IconUser} from 'app/icons';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Config, Member, Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withConfig from 'app/utils/withConfig';\nimport withOrganization from 'app/utils/withOrganization';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype RouteParams = {\n  orgId: string;\n  teamId: string;\n};\n\ntype Props = {\n  api: Client;\n  config: Config;\n  organization: Organization;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  dropdownBusy: boolean;\n  teamMemberList: Member[];\n  orgMemberList: Member[];\n};\n\nclass TeamMembers extends React.Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    dropdownBusy: false,\n    teamMemberList: [],\n    orgMemberList: [],\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    const params = this.props.params;\n    if (\n      nextProps.params.teamId !== params.teamId ||\n      nextProps.params.orgId !== params.orgId\n    ) {\n      this.setState(\n        {\n          loading: true,\n          error: false,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  debouncedFetchMembersRequest = debounce(\n    (query: string) =>\n      this.setState({dropdownBusy: true}, () => this.fetchMembersRequest(query)),\n    200\n  );\n\n  removeMember(member: Member) {\n    const {params} = this.props;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMemberList: this.state.teamMemberList.filter(m => m.id !== member.id),\n          });\n          addSuccessMessage(t('Successfully removed member from team.'));\n        },\n        error: () =>\n          addErrorMessage(\n            t('There was an error while trying to remove a member from the team.')\n          ),\n      }\n    );\n  }\n\n  fetchMembersRequest = async (query: string) => {\n    const {params, api} = this.props;\n    const {orgId} = params;\n\n    try {\n      const data = await api.requestPromise(`/organizations/${orgId}/members/`, {\n        query: {query},\n      });\n      this.setState({\n        orgMemberList: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  fetchData = async () => {\n    const {api, params} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/teams/${params.orgId}/${params.teamId}/members/`\n      );\n      this.setState({\n        teamMemberList: data,\n        loading: false,\n        error: false,\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        error: true,\n      });\n    }\n\n    this.fetchMembersRequest('');\n  };\n\n  addTeamMember = (selection: Item) => {\n    const {params} = this.props;\n\n    this.setState({loading: true});\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = this.state.orgMemberList.find(\n            member => member.id === selection.value\n          );\n          if (orgMember === undefined) {\n            return;\n          }\n          this.setState({\n            loading: false,\n            error: false,\n            teamMemberList: this.state.teamMemberList.concat([orgMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n          });\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown(hasWriteAccess: boolean) {\n    const {organization, params} = this.props;\n    const existingMembers = new Set(this.state.teamMemberList.map(member => member.id));\n\n    // members can add other members to a team if the `Open Membership` setting is enabled\n    // otherwise, `org:write` or `team:admin` permissions are required\n    const hasOpenMembership = !!organization?.openMembership;\n    const canAddMembers = hasOpenMembership || hasWriteAccess;\n\n    const items = (this.state.orgMemberList || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => ({\n        searchKey: `${m.name} ${m.email}`,\n        value: m.id,\n        label: (\n          <StyledUserListElement>\n            <StyledAvatar user={m} size={24} className=\"avatar\" />\n            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n          </StyledUserListElement>\n        ),\n      }));\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          to=\"\"\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        items={items}\n        alignMenu=\"right\"\n        onSelect={\n          canAddMembers\n            ? this.addTeamMember\n            : selection =>\n                openTeamAccessRequestModal({\n                  teamId: params.teamId,\n                  orgId: params.orgId,\n                  memberId: selection.value,\n                })\n        }\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n      >\n        {({isOpen}) => (\n          <DropdownButton isOpen={isOpen} size=\"xsmall\" data-test-id=\"add-member\">\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  removeButton(member: Member) {\n    return (\n      <Button\n        size=\"small\"\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        onClick={() => this.removeMember(member)}\n        label={t('Remove')}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {params, organization, config} = this.props;\n    const {access} = organization;\n    const hasWriteAccess = access.includes('org:write') || access.includes('team:admin');\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          <div>{t('Members')}</div>\n          <div style={{textTransform: 'none'}}>{this.renderDropdown(hasWriteAccess)}</div>\n        </PanelHeader>\n        {this.state.teamMemberList.length ? (\n          this.state.teamMemberList.map(member => {\n            const isSelf = member.email === config.user.email;\n            const canRemoveMember = hasWriteAccess || isSelf;\n            return (\n              <StyledMemberContainer key={member.id}>\n                <IdBadge avatarSize={36} member={member} useLink orgId={params.orgId} />\n                {canRemoveMember && this.removeButton(member)}\n              </StyledMemberContainer>\n            );\n          })\n        ) : (\n          <EmptyMessage icon={<IconUser size=\"xl\" />} size=\"large\">\n            {t('This team has no members')}\n          </EmptyMessage>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst StyledMemberContainer = styled(PanelItem)`\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst StyledUserListElement = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n`;\n\nconst StyledMembersLabel = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  padding: ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  text-transform: none;\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n"],"sourceRoot":""}