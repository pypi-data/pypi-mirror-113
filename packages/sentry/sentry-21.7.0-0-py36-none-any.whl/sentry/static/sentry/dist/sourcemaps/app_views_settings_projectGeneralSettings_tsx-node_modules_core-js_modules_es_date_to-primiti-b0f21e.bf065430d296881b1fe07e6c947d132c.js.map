{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectGeneralSettings.tsx","webpack:///../node_modules/core-js/internals/date-to-primitive.js","webpack:///../node_modules/core-js/modules/es.date.to-primitive.js","webpack:///../node_modules/core-js/modules/es.symbol.to-primitive.js"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","FormPanel","props","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","field","defaultValue","fieldWithoutDefaultValue","disabledReason","highlighted","name","React","JsonForm","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","state","formGroup","i","renderForm","withRouter","PermissionAlert","hasAccess","type","icon","size","t","ProjectGeneralSettings","value","_form","orgId","project","data","removeProject","api","then","window","assign","handleXhrErrorResponse","email","transferProject","status","Set","organization","has","projectId","routeTitleGen","isProjectAdmin","isInternal","label","help","tct","slug","linebreak","onConfirm","handleRemoveProject","priority","confirmText","message","className","handleTransferProject","renderMessage","confirm","hideFooter","onFieldChange","handleTransferFieldChange","onSubmit","_data","_onSuccess","_onError","e","stopPropagation","placeholder","required","endpoint","jsonFormProps","team","teams","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","resp","changeProjectSlug","onChangeSlug","ProjectActions","noMargin","link","href","Origin","Referer","renderRemoveProject","renderTransferProject","ProjectGeneralSettingsContainer","ProjectsStore","onProjectsUpdate","unsubscribe","changedSlug","browserHistory","newSlug","Component","withOrganization","anObject","toPrimitive","module","exports","hint","TypeError","createNonEnumerableProperty","dateToPrimitive","TO_PRIMITIVE","wellKnownSymbol","DatePrototype","Date","prototype","defineWellKnownSymbol"],"mappings":"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","file":"chunks/app_views_settings_projectGeneralSettings_tsx-node_modules_core-js_modules_es_date_to-primiti-b0f21e.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component} from 'react';\nimport {browserHistory, WithRouterProps} from 'react-router';\n\nimport {\n  changeProjectSlug,\n  removeProject,\n  transferProject,\n} from 'app/actionCreators/projects';\nimport ProjectActions from 'app/actions/projectActions';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelAlert, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/projectGeneralSettings';\nimport {t, tct} from 'app/locale';\nimport ProjectsStore from 'app/stores/projectsStore';\nimport {Organization, Project} from 'app/types';\nimport handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {FieldValue} from 'app/views/settings/components/forms/model';\nimport TextField from 'app/views/settings/components/forms/textField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\n\ntype Props = AsyncView['props'] &\n  WithRouterProps<{orgId: string; projectId: string}> & {\n    organization: Organization;\n    onChangeSlug: (slug: string) => void;\n  };\n\ntype State = AsyncView['state'] & {\n  data: Project;\n};\n\nclass ProjectGeneralSettings extends AsyncView<Props, State> {\n  private _form: Record<string, FieldValue> = {};\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Project Settings'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n\n    return [['data', `/projects/${orgId}/${projectId}/`]];\n  }\n\n  handleTransferFieldChange = (id: string, value: FieldValue) => {\n    this._form[id] = value;\n  };\n\n  handleRemoveProject = () => {\n    const {orgId} = this.props.params;\n    const project = this.state.data;\n    if (!project) {\n      return;\n    }\n\n    removeProject(this.api, orgId, project).then(() => {\n      // Need to hard reload because lots of components do not listen to Projects Store\n      window.location.assign('/');\n    }, handleXhrErrorResponse('Unable to remove project'));\n  };\n\n  handleTransferProject = async () => {\n    const {orgId} = this.props.params;\n    const project = this.state.data;\n    if (!project) {\n      return;\n    }\n    if (typeof this._form.email !== 'string' || this._form.email.length < 1) {\n      return;\n    }\n\n    try {\n      await transferProject(this.api, orgId, project, this._form.email);\n      // Need to hard reload because lots of components do not listen to Projects Store\n      window.location.assign('/');\n    } catch (err) {\n      if (err.status >= 500) {\n        handleXhrErrorResponse('Unable to transfer project')(err);\n      }\n    }\n  };\n\n  isProjectAdmin = () => new Set(this.props.organization.access).has('project:admin');\n\n  renderRemoveProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <Field\n        label={t('Remove Project')}\n        help={tct(\n          'Remove the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to remove this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be removed. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleRemoveProject}\n            priority=\"danger\"\n            confirmText={t('Remove project')}\n            message={\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Removing this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t('This will also remove all associated event data.')}\n                </TextBlock>\n              </div>\n            }\n          >\n            <div>\n              <Button className=\"ref-remove-project\" type=\"button\" priority=\"danger\">\n                {t('Remove Project')}\n              </Button>\n            </div>\n          </Confirm>\n        )}\n      </Field>\n    );\n  }\n\n  renderTransferProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <Field\n        label={t('Transfer Project')}\n        help={tct(\n          'Transfer the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to transfer this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be transferred. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleTransferProject}\n            priority=\"danger\"\n            confirmText={t('Transfer project')}\n            renderMessage={({confirm}) => (\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Transferring this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t(\n                    'Please enter the email of an organization owner to whom you would like to transfer this project.'\n                  )}\n                </TextBlock>\n                <Panel>\n                  <Form\n                    hideFooter\n                    onFieldChange={this.handleTransferFieldChange}\n                    onSubmit={(_data, _onSuccess, _onError, e) => {\n                      e.stopPropagation();\n                      confirm();\n                    }}\n                  >\n                    <TextField\n                      name=\"email\"\n                      label={t('Organization Owner')}\n                      placeholder=\"admin@example.com\"\n                      required\n                      help={t(\n                        'A request will be emailed to this address, asking the organization owner to accept the project transfer.'\n                      )}\n                    />\n                  </Form>\n                </Panel>\n              </div>\n            )}\n          >\n            <div>\n              <Button className=\"ref-transfer-project\" type=\"button\" priority=\"danger\">\n                {t('Transfer Project')}\n              </Button>\n            </div>\n          </Confirm>\n        )}\n      </Field>\n    );\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const project = this.state.data;\n    const {orgId, projectId} = this.props.params;\n    const endpoint = `/projects/${orgId}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n    const team = project.teams.length ? project.teams?.[0] : undefined;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Project Settings')} />\n        <PermissionAlert />\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={{\n            ...project,\n            team,\n          }}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={resp => {\n            this.setState({data: resp});\n            if (projectId !== resp.slug) {\n              changeProjectSlug(projectId, resp.slug);\n              // Container will redirect after stores get updated with new slug\n              this.props.onChangeSlug(resp.slug);\n            }\n            // This will update our project context\n            ProjectActions.updateSuccess(resp);\n          }}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Project Details')}\n            fields={[fields.slug, fields.platform]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Email')}\n            fields={[fields.subjectPrefix]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Event Settings')}\n            fields={[fields.resolveAge]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Client Security')}\n            fields={[\n              fields.allowedDomains,\n              fields.scrapeJavaScript,\n              fields.securityToken,\n              fields.securityTokenHeader,\n              fields.verifySSL,\n            ]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                <TextBlock noMargin>\n                  {tct(\n                    'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',\n                    {\n                      link: (\n                        <a href=\"https://github.com/getsentry/sentry-javascript\">\n                          sentry-javascript\n                        </a>\n                      ),\n                    }\n                  )}{' '}\n                  {tct(\n                    'This will restrict requests based on the [Origin] and [Referer] headers.',\n                    {\n                      Origin: <code>Origin</code>,\n                      Referer: <code>Referer</code>,\n                    }\n                  )}\n                </TextBlock>\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Project Administration')}</PanelHeader>\n          {this.renderRemoveProject()}\n          {this.renderTransferProject()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype ContainerProps = {\n  organization: Organization;\n} & WithRouterProps<{orgId: string; projectId: string}>;\n\nclass ProjectGeneralSettingsContainer extends Component<ContainerProps> {\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  changedSlug: string | undefined = undefined;\n  unsubscribe = ProjectsStore.listen(() => this.onProjectsUpdate(), undefined);\n\n  onProjectsUpdate() {\n    if (!this.changedSlug) {\n      return;\n    }\n    const project = ProjectsStore.getBySlug(this.changedSlug);\n\n    if (!project) {\n      return;\n    }\n\n    browserHistory.replace(\n      recreateRoute('', {\n        ...this.props,\n        params: {\n          ...this.props.params,\n          projectId: this.changedSlug,\n        },\n      })\n    );\n  }\n\n  render() {\n    return (\n      <ProjectGeneralSettings\n        onChangeSlug={(newSlug: string) => (this.changedSlug = newSlug)}\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(ProjectGeneralSettingsContainer);\n","'use strict';\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\n// `Date.prototype[@@toPrimitive](hint)` method implementation\n// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {\n    throw TypeError('Incorrect hint');\n  } return toPrimitive(anObject(this), hint !== 'number');\n};\n","var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar dateToPrimitive = require('../internals/date-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar DatePrototype = Date.prototype;\n\n// `Date.prototype[@@toPrimitive]` method\n// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive\nif (!(TO_PRIMITIVE in DatePrototype)) {\n  createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);\n}\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toPrimitive` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.toprimitive\ndefineWellKnownSymbol('toPrimitive');\n"],"sourceRoot":""}