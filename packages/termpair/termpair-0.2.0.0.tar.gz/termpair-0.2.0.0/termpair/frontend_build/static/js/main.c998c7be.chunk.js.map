{"version":3,"sources":["encryption.tsx","logo.png","App.tsx","index.tsx"],"names":["IV_LENGTH","getSecretKey","a","b64EncodedKey","window","location","hash","substring","length","keyData","Buffer","from","crypto","subtle","importKey","name","console","error","decrypt","secretKey","encryptedPayloadB64","ivAndPayload","iv","subarray","encryptedTerminalOutput","decryptedTerminalOutput","toString","encrypt","utf8Payload","getRandomValues","Uint8Array","TextEncoder","encode","encryptedArrayBuffer","ivAndEncryptedPayload","_combineBuffers","base64EncryptedString","_arrayBufferToBase64","buffer1","buffer2","tmp","byteLength","set","buffer","bytes","binary","len","i","String","fromCharCode","btoa","showSettings","atom","key","default","Settings","props","useRecoilState","showSetting","setShowSettings","className","style","zIndex","onClick","TopBar","href","pathname","src","logo","alt","BottomBar","connected","status","terminalId","canType","title","terminalData","allow_browser_control","connectedClients","numClients","startTime","moment","broadcast_start_time_iso","format","terminalDimensions","terminalSize","rows","cols","ErrorBoundary","state","hasError","errorInfo","this","children","React","Component","cannotTypeMsg","toastStatus","debounce","toast","dark","redXtermText","text","writeInstructions","xterm","writeln","host","protocol","hostname","port","App","useState","terminalServerData","setTerminalServerData","setNumClients","setTerminalSize","resizeTimeout","setResizeTimeout","setStatus","prevStatus","setPrevStatus","Xterm","cursorBlink","macOptionIsMeta","scrollback","URLSearchParams","search","get","secretEncryptionKey","setSecretEncryptionKey","useLayoutEffect","el","document","getElementById","open","useEffect","indexOf","_","Error","handleStatusChange","isSecureContext","fetch","response","json","getTerminalData","clearTimeout","setTimeout","resize","terminal_id","onDataDispose","ws_protocol","webSocket","WebSocket","attachCustomKeyEventHandler","terminal","sendInputToTerminal","customKeyEventHandler","e","type","ctrlKey","shiftKey","toLowerCase","navigator","clipboard","readText","then","toPaste","toCopy","getSelection","writeText","focus","getCustomKeyEventHandler","newInput","send","addEventListener","event","onData","data","dispose","message","JSON","parse","encryptedBase64Payload","payload","decryptedPayload","write","num_clients","setupWebsocketConnection","content","id","position","limit","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c998c7be.chunk.js","sourcesContent":["// Symmetric encryption with aes gcm\n// https://github.com/mdn/dom-examples/blob/master/web-crypto/encrypt-decrypt/aes-gcm.js\n\nconst IV_LENGTH = 12;\n\nexport async function getSecretKey(): Promise<Nullable<CryptoKey>> {\n  try {\n    const b64EncodedKey = window.location.hash.substring(\n      1, // skip the '#' symbol\n      window.location.hash.length - 1\n    );\n    if (!b64EncodedKey) {\n      return null;\n    }\n    const keyData = Buffer.from(b64EncodedKey, \"base64\");\n    return await window.crypto.subtle.importKey(\n      \"raw\",\n      keyData,\n      {\n        name: \"AES-GCM\",\n      },\n      false, // extractable\n      [\"encrypt\", \"decrypt\"]\n    );\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n}\n\nexport async function decrypt(\n  secretKey: CryptoKey,\n  encryptedPayloadB64: string\n) {\n  // decode base64 data to unencrypted iv and encrypted data\n  const ivAndPayload = Buffer.from(encryptedPayloadB64, \"base64\");\n\n  // iv is prepended to encrypted payload\n  const iv = ivAndPayload.subarray(0, IV_LENGTH);\n\n  // remaining bytes are encrypted utf-8 output of terminal\n  const encryptedTerminalOutput = ivAndPayload.subarray(IV_LENGTH);\n\n  const decryptedTerminalOutput = Buffer.from(\n    await window.crypto.subtle.decrypt(\n      {\n        name: \"AES-GCM\",\n        iv: iv,\n      },\n      secretKey,\n      encryptedTerminalOutput\n    )\n  ).toString(\"utf-8\");\n  return decryptedTerminalOutput;\n}\n\nexport async function encrypt(secretKey: CryptoKey, utf8Payload: string) {\n  // The same iv must never be reused with a given key\n  const iv = window.crypto.getRandomValues(new Uint8Array(IV_LENGTH));\n  const encryptedArrayBuffer = await window.crypto.subtle.encrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv,\n    },\n    secretKey,\n    new TextEncoder().encode(utf8Payload)\n  );\n  // prepend unencrypted iv to encrypted payload\n  const ivAndEncryptedPayload = _combineBuffers(iv, encryptedArrayBuffer);\n\n  // send as ascii\n  // TODO send as binary\n  const base64EncryptedString = _arrayBufferToBase64(ivAndEncryptedPayload);\n  return base64EncryptedString;\n}\n\nfunction _combineBuffers(\n  buffer1: Uint8Array,\n  buffer2: ArrayBuffer\n): ArrayBufferLike {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\nfunction _arrayBufferToBase64(buffer: ArrayBuffer) {\n  const bytes = new Uint8Array(buffer);\n  let binary = \"\";\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    // returns a utf-16 character, considered \"binary\"\n    binary += String.fromCharCode(bytes[i]);\n  }\n  // \"binary to ascii\"\n  return window.btoa(binary);\n}\n","export default __webpack_public_path__ + \"static/media/logo.0cb35f08.png\";","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState, useLayoutEffect } from \"react\";\nimport \"xterm/css/xterm.css\";\nimport logo from \"./logo.png\"; // logomakr.com/4N54oK\n// import { CogIcon } from \"@heroicons/react/solid\";\nimport { Terminal as Xterm, IDisposable } from \"xterm\";\nimport moment from \"moment\";\nimport { getSecretKey, decrypt, encrypt } from \"./encryption\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { atom, useRecoilState } from \"recoil\";\nimport { debounce } from \"debounce\";\n\nconst showSettings = atom({\n  key: \"showSettings\",\n  default: false,\n});\n\nfunction Settings(props: any) {\n  const [showSetting, setShowSettings] = useRecoilState(showSettings);\n  if (!showSetting) {\n    return null;\n  }\n  return (\n    <div\n      className=\"w-full h-full bg-gray-900 absolute bg-opacity-90  text-black\"\n      style={{ zIndex: 2000 }}\n    >\n      <div className=\"w-11/12 h-5/6 m-10 p-5 bg-gray-400 flex items-center flex-col\">\n        <div className=\"text-xl mb-10\">TermPair Settings</div>\n        <div className=\"flex-grow\">Body</div>\n        <div>\n          <button\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full\"\n            onClick={() => setShowSettings(false)}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction TopBar(props: any) {\n  // const [showSetting, setShowSettings] = useRecoilState(showSettings);\n\n  return (\n    <div className=\"flex bg-black h-10 items-center justify-between\">\n      <div className=\"h-full\">\n        <a href={window.location.pathname}>\n          <img className=\"h-full\" src={logo} alt=\"logo\" />\n        </a>\n      </div>\n      {/* <div className=\"text-white m-5\">\n        <div className=\"my-auto\">\n          <button\n            className=\"my-auto\"\n            onClick={() => setShowSettings(!showSetting)}\n          >\n            <CogIcon className=\"h-6 w-6 text-white\" />\n          </button>\n        </div>\n      </div> */}\n    </div>\n  );\n}\n\nfunction BottomBar(props: {\n  status: Status;\n  terminalData: Nullable<TerminalServerData>;\n  terminalId: Nullable<string>;\n  terminalSize: TerminalSize;\n  numClients: number;\n}) {\n  const connected = props.status === \"Connected\";\n  const hasTerminalId = props.terminalId != null;\n  const status = hasTerminalId ? <div>{props.status}</div> : null;\n\n  const canType = connected ? (\n    <div\n      title=\"Whether you are allowed to send data to the terminal's input.\n    This setting is controlled when initially sharing the terminal, and cannot be changed\n    after sharing has begun.\"\n    >\n      {props.terminalData?.allow_browser_control && props.status === \"Connected\"\n        ? \"can type\"\n        : \"cannot type\"}\n    </div>\n  ) : null;\n\n  const connectedClients = connected ? (\n    <div title=\"Number of other browsers connected to this terminal\">\n      {props.numClients ? props.numClients : \"0\"} Connected Client(s)\n    </div>\n  ) : null;\n\n  const startTime = connected ? (\n    <div>\n      Started at{\" \"}\n      {moment(props.terminalData?.broadcast_start_time_iso).format(\n        \"h:mm a on MMM Do, YYYY\"\n      )}\n    </div>\n  ) : null;\n\n  const terminalDimensions = connected ? (\n    <span title=\"Dimensions of terminal, rows x cols\">\n      {props.terminalSize.rows}x{props.terminalSize.cols}\n    </span>\n  ) : null;\n\n  return (\n    <>\n      <div\n        className={`flex ${\n          connected ? \"bg-green-900\" : \"bg-red-900\"\n        }   justify-evenly text-gray-300`}\n      >\n        {status}\n        {terminalDimensions}\n        {canType}\n        {connectedClients}\n        {startTime}\n      </div>\n      <div className=\"flex bg-black  justify-evenly text-gray-300\">\n        <div>\n          <a href=\"https://chadsmith.dev\">chadsmith.dev</a>\n        </div>\n        <div>\n          <a href=\"https://github.com/cs01\"> GitHub</a>\n        </div>\n      </div>\n    </>\n  );\n}\n\nclass ErrorBoundary extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nconst cannotTypeMsg =\n  \"Terminal was shared in read only mode. Unable to send data to terminal's input.\";\n\ntype Status =\n  | null\n  | \"Connecting...\"\n  | \"Connected\"\n  | \"Disconnected\"\n  | \"Connection Error\"\n  | \"Terminal ID is invalid\"\n  | \"Browser is not running in a secure context\"\n  | \"No Terminal provided\"\n  | \"Invalid encryption key\";\n\ntype TerminalServerData = {\n  terminal_id: string;\n  allow_browser_control: boolean;\n  num_clients: number;\n  broadcast_start_time_iso: string;\n};\n\ntype TerminalSize = {\n  rows: number;\n  cols: number;\n};\n\nconst toastStatus = debounce((status: any) => {\n  toast.dark(status);\n}, 500);\n\nfunction redXtermText(text: string): string {\n  return \"\\x1b[1;31m\" + text + \"\\x1b[0m\";\n}\n\nfunction handleStatusChange(\n  xterm: Xterm,\n  terminalId: Nullable<string>,\n  status: Status,\n  prevStatus: Status\n): void {\n  switch (status) {\n    case null:\n      break;\n    case \"Connected\":\n      xterm.writeln(\"Connection established with end-to-end encryption 🔒.\");\n      xterm.writeln(\n        \"The termpair server and third parties can't read transmitted data.\"\n      );\n      xterm.writeln(\"\");\n      xterm.writeln(\n        \"You can copy text with ctrl+shift+c or ctrl+shift+x, and paste with ctrl+shift+v.\"\n      );\n      xterm.writeln(\"\");\n      break;\n    case \"Disconnected\":\n      if (prevStatus === \"Connected\") {\n        xterm.writeln(redXtermText(\"Terminal session has ended\"));\n        xterm.writeln(\"\");\n        writeInstructions(xterm);\n      }\n      break;\n    case \"Terminal ID is invalid\":\n      xterm.writeln(\n        redXtermText(\n          `An invalid Terminal ID (${terminalId}) was provided. ` +\n            `Check that the session is still being broadcast and that the ID is entered correctly.`\n        )\n      );\n      xterm.writeln(\"\");\n      writeInstructions(xterm);\n      break;\n    case \"Invalid encryption key\":\n      xterm.writeln(\n        redXtermText(\n          `Did not receive a valid secret encryption key. Confirm the full and correct url was entered.`\n        )\n      );\n      xterm.writeln(\"\");\n      writeInstructions(xterm);\n      break;\n\n    case \"Browser is not running in a secure context\":\n      xterm.writeln(\n        redXtermText(\n          \"Fatal Error: TermPair only works on secure connections. Ensure url starts with https. \" +\n            \"See https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts and `termpair serve --help` for more information.\"\n        )\n      );\n      xterm.writeln(\"\");\n      writeInstructions(xterm);\n      break;\n\n    case \"Connecting...\":\n      break;\n\n    case \"Connection Error\":\n      xterm.writeln(\n        redXtermText(\n          \"An error occurred in the websocket connection to the server. Connection has been closed.\"\n        )\n      );\n      writeInstructions(xterm);\n      break;\n\n    case \"No Terminal provided\":\n      writeInstructions(xterm);\n      break;\n\n    default:\n      ((_: \"Unhandled switch case\"): never => {\n        throw Error;\n      })(status);\n  }\n  return status as never;\n}\n\nfunction App() {\n  const [terminalServerData, setTerminalServerData] =\n    useState<Nullable<TerminalServerData>>(null);\n  const [numClients, setNumClients] = useState(0);\n  const [terminalSize, setTerminalSize] = useState<TerminalSize>({\n    rows: 20,\n    cols: 81,\n  });\n  const [resizeTimeout, setResizeTimeout] =\n    useState<Nullable<NodeJS.Timeout>>(null);\n  const [status, setStatus] = useState<Status>(null);\n  const [prevStatus, setPrevStatus] = useState<Status>(null);\n\n  const [xterm] = useState(\n    new Xterm({\n      cursorBlink: true,\n      macOptionIsMeta: true,\n      scrollback: 1000,\n    })\n  );\n  const [terminalId] = useState(\n    new URLSearchParams(window.location.search).get(\"terminal_id\")\n  );\n\n  const [secretEncryptionKey, setSecretEncryptionKey] =\n    useState<Nullable<CryptoKey>>(null);\n\n  useLayoutEffect(() => {\n    const el = document.getElementById(\"terminal\");\n    if (!el) {\n      console.error(\"no terminal element, aborting\");\n      return;\n    }\n    xterm.open(el);\n    xterm.writeln(`Welcome to TermPair! https://github.com/cs01/termpair`);\n    xterm.writeln(\"\");\n  }, []);\n\n  useEffect(() => {\n    // console.log(`Terminal connection status: ${status}`);\n    const noToast = [\"No Terminal provided\"];\n    if (status && noToast.indexOf(status) === -1) {\n      // @ts-ignore\n      toastStatus(<div>Terminal status: {status}</div>);\n    }\n    handleStatusChange(xterm, terminalId, status, prevStatus);\n    setPrevStatus(status);\n  }, [status]);\n\n  useEffect(() => {\n    async function getTerminalData() {\n      if (!terminalId) {\n        setTerminalServerData(null);\n        setStatus(\"No Terminal provided\");\n        return;\n      }\n      if (!window.isSecureContext) {\n        setStatus(\"Browser is not running in a secure context\");\n        return;\n      }\n      const secretEncryptionKey = await getSecretKey();\n      setSecretEncryptionKey(secretEncryptionKey);\n      if (!secretEncryptionKey) {\n        setStatus(\"Invalid encryption key\");\n      }\n\n      const response = await fetch(`terminal/${terminalId}`);\n      if (response.status === 200) {\n        setTerminalServerData(await response.json());\n      } else {\n        setStatus(\"Terminal ID is invalid\");\n        setTerminalServerData(null);\n      }\n    }\n    getTerminalData();\n  }, [terminalId]);\n\n  useEffect(() => {\n    if (resizeTimeout) {\n      clearTimeout(resizeTimeout);\n    }\n    setResizeTimeout(\n      setTimeout(() => {\n        xterm.resize(terminalSize.cols, terminalSize.rows);\n      }, 500)\n    );\n  }, [terminalSize, xterm]);\n\n  useEffect(() => {\n    function setupWebsocketConnection() {\n      if (status !== null) {\n        return;\n      }\n      if (!(terminalServerData?.terminal_id && secretEncryptionKey)) {\n        return;\n      }\n      setStatus(\"Connecting...\");\n\n      const ws_protocol = window.location.protocol === \"https:\" ? \"wss\" : \"ws\";\n      const webSocket = new WebSocket(\n        `${ws_protocol}://${window.location.hostname}:${window.location.port}${window.location.pathname}connect_browser_to_terminal?terminal_id=${terminalServerData.terminal_id}`\n      );\n\n      xterm.attachCustomKeyEventHandler(\n        getCustomKeyEventHandler(\n          xterm,\n          terminalServerData?.allow_browser_control,\n          async (newInput: any) => {\n            try {\n              webSocket.send(await encrypt(secretEncryptionKey, newInput));\n            } catch (e) {\n              // TODO display in popup to user\n              console.error(\"Failed to send data over websocket\", e);\n            }\n          }\n        )\n      );\n      let onDataDispose: Nullable<IDisposable>;\n      webSocket.addEventListener(\"open\", (event) => {\n        setStatus(\"Connected\");\n        onDataDispose = xterm.onData(async (data: any) => {\n          try {\n            if (terminalServerData.allow_browser_control === false) {\n              toastStatus(cannotTypeMsg);\n              return;\n            }\n            webSocket.send(await encrypt(secretEncryptionKey, data));\n          } catch (e) {\n            // TODO display in popup to user\n            console.error(\"Failed to send data over websocket\", e);\n          }\n        });\n      });\n      webSocket.addEventListener(\"close\", (event) => {\n        if (onDataDispose) {\n          // stop trying to send data since the connection is closed\n          onDataDispose.dispose();\n        }\n\n        setStatus(\"Disconnected\");\n        setNumClients(0);\n      });\n\n      webSocket.addEventListener(\"error\", (event) => {\n        if (onDataDispose) {\n          // stop trying to send data since the connection is closed\n          onDataDispose.dispose();\n        }\n\n        console.error(event);\n        setStatus(\"Connection Error\");\n        setNumClients(0);\n      });\n\n      webSocket.addEventListener(\"message\", async (message: any) => {\n        const data = JSON.parse(message.data);\n        if (data.event === \"new_output\") {\n          const encryptedBase64Payload = data.payload;\n          const decryptedPayload = await decrypt(\n            secretEncryptionKey,\n            encryptedBase64Payload\n          );\n          xterm.write(decryptedPayload);\n        } else if (data.event === \"resize\") {\n          if (data.payload.cols && data.payload.rows) {\n            setTerminalSize({\n              cols: data.payload.cols,\n              rows: data.payload.rows,\n            });\n          }\n        } else if (data.event === \"num_clients\") {\n          // @ts-ignore\n          const num_clients = data.payload;\n          // @ts-ignore\n          setNumClients(num_clients);\n        } else {\n          console.error(\"unknown event type\", data);\n        }\n      });\n    }\n    setupWebsocketConnection();\n  }, [terminalServerData, status]);\n\n  const content = (\n    <div id=\"terminal\" className=\"p-3 bg-black flex-grow text-gray-400\"></div>\n  );\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-col h-screen\">\n        <ToastContainer\n          position=\"bottom-right\"\n          limit={3}\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss={false}\n          draggable\n          pauseOnHover\n        />\n        <Settings />\n        <TopBar />\n        {content}\n        <BottomBar\n          terminalData={terminalServerData}\n          status={status}\n          terminalId={terminalId}\n          terminalSize={terminalSize}\n          numClients={numClients}\n        />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nfunction writeInstructions(xterm: Xterm) {\n  xterm.writeln(\"To broadcast a terminal, run\");\n  const host = `${window.location.protocol}//${window.location.hostname}${window.location.pathname}`;\n  xterm.writeln(\"\");\n  let port = window.location.port;\n  if (!window.location.port) {\n    if (window.location.protocol === \"https:\") {\n      // @ts-expect-error ts-migrate(2322) FIXME: Type 'number' is not assignable to type 'string'.\n      port = 443;\n    } else {\n      // @ts-expect-error ts-migrate(2322) FIXME: Type 'number' is not assignable to type 'string'.\n      port = 80;\n    }\n  }\n  xterm.writeln(`    pipx run termpair share --host \"${host}\" --port ${port}`);\n  xterm.writeln(\"\");\n  xterm.writeln(\"Then open or share the url printed to the terminal.\");\n  xterm.writeln(\"\");\n  xterm.writeln(\"To install pipx, see https://pipxproject.github.io/pipx/\");\n  xterm.writeln(\"All terminal data is end-to-end encrypted 🔒.\");\n  xterm.writeln(\n    \"The termpair server and third parties can't read transmitted data.\"\n  );\n}\n\n/**\n * The API to xterm.attachCustomKeyEventHandler is hardcoded. This function\n * provides a closure so that other variables can be used inside it.\n *\n * https://github.com/xtermjs/xterm.js/blob/70babeacb62fe05264d64324ca1f4436997efa1b/typings/xterm.d.ts#L538-L547\n *\n * @param {*} terminal - xterm object\n * @param {*} canType  - is user allowed to type (this is also enforced on the server)\n * @param {*} sendInputToTerminal - function to encode and send input over the websocket\n * @returns nothing\n */\nfunction getCustomKeyEventHandler(\n  terminal: Xterm,\n  canType: boolean | void,\n  sendInputToTerminal: (input: string) => void\n) {\n  /**\n   * Custom key event handler which is run before keys are\n   * processed, giving consumers of xterm.js ultimate control as to what keys\n   * should be processed by the terminal and what keys should not.\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\n   * propagation and/or prevent the default action. The function returns\n   * whether the event should be processed by xterm.js.\n   */\n  function customKeyEventHandler(e: KeyboardEvent): boolean {\n    if (e.type !== \"keydown\") {\n      return true;\n    }\n    if (e.ctrlKey && e.shiftKey) {\n      const key = e.key.toLowerCase();\n      if (key === \"v\") {\n        if (!canType) {\n          toastStatus(cannotTypeMsg);\n          return false;\n        }\n        navigator.clipboard.readText().then((toPaste) => {\n          sendInputToTerminal(toPaste);\n        });\n        return false;\n      } else if (key === \"c\" || key === \"x\") {\n        // 'x' is used as an alternate to 'c' because ctrl+c is taken\n        // by the terminal (SIGINT) and ctrl+shift+c is taken by the browser\n        // (open devtools).\n        // I'm not aware of ctrl+shift+x being used by anything in the terminal\n        // or browser\n        const toCopy = terminal.getSelection();\n        navigator.clipboard.writeText(toCopy);\n        terminal.focus();\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return customKeyEventHandler;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}