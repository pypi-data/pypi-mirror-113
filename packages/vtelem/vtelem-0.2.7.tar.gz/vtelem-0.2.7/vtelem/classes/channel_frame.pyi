from . import COUNT_PRIM as COUNT_PRIM, EventType as EventType, ID_PRIM as ID_PRIM, TIMESTAMP_PRIM as TIMESTAMP_PRIM
from .byte_buffer import ByteBuffer as ByteBuffer
from .type_primitive import TypePrimitive as TypePrimitive
from typing import Any, Tuple
from vtelem.enums.primitive import Primitive as Primitive, get_size as get_size, random_integer as random_integer

def time_to_int(time: float, precision: int = ...) -> int: ...

class ChannelFrame:
    mtu: Any
    used: int
    buffer: Any
    elem_buffer: Any
    id_primitive: Any
    finalized: bool
    count: Any
    crc: Any
    def __init__(self, mtu: int, frame_id: TypePrimitive, frame_type: TypePrimitive, timestamp: TypePrimitive) -> None: ...
    def finalize(self, write_crc: bool = ...) -> int: ...
    def pad(self, num_bytes: int) -> int: ...
    def pad_to_mtu(self) -> None: ...
    def raw(self) -> Tuple[bytearray, int]: ...
    def add_event(self, chan_id: int, chan_type: Primitive, prev: EventType, curr: EventType) -> bool: ...
    def add(self, chan_id: int, chan_type: Primitive, chan_val: Any) -> bool: ...
