{"version":3,"sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/components/modals/createTeamModal.tsx","webpack:///./app/components/teams/createTeamForm.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/withApi.tsx","webpack:///./app/views/settings/components/forms/textField.tsx"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","teamId","request","orgId","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","Reflux","CreateTeamModal","onSuccess","onError","props","resp","handleSuccess","catch","this","onClose","closeModal","Body","Header","Fragment","closeButton","t","onSubmit","handleSubmit","Component","withApi","CreateTeamForm","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","handleCreateTeamSuccess","requireChanges","formProps","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput","slugify","str","toLowerCase","replace","WrappedComponent","persistInFlight","Client","clear","React","getDisplayName","TextField","type"],"mappings":"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","file":"chunks/app_components_modals_createTeamModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import Reflux from 'reflux';\n\nconst TeamActions = Reflux.createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import {Component, Fragment} from 'react';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {createTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport CreateTeamForm from 'app/components/teams/createTeamForm';\nimport {t} from 'app/locale';\nimport {Organization, Team} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  onClose?: (team: Team) => void;\n} & ModalRenderProps;\n\nclass CreateTeamModal extends Component<Props> {\n  handleSubmit = (data: {slug: string}, onSuccess: Function, onError: Function) => {\n    const {organization, api} = this.props;\n    createTeam(api, data, {orgId: organization.slug})\n      .then((resp: Team) => {\n        this.handleSuccess(resp);\n        onSuccess(resp);\n      })\n      .catch((err: Error) => {\n        onError(err);\n      });\n  };\n\n  handleSuccess(team: Team) {\n    if (this.props.onClose) {\n      this.props.onClose(team);\n    }\n\n    this.props.closeModal();\n  }\n\n  render() {\n    const {Body, Header, ...props} = this.props;\n\n    return (\n      <Fragment>\n        <Header closeButton>{t('Create Team')}</Header>\n        <Body>\n          <CreateTeamForm {...props} onSubmit={this.handleSubmit} />\n        </Body>\n      </Fragment>\n    );\n  }\n}\n\nexport default withApi(CreateTeamModal);\n","import {Component, Fragment} from 'react';\n\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport slugify from 'app/utils/slugify';\nimport Form from 'app/views/settings/components/forms/form';\nimport TextField from 'app/views/settings/components/forms/textField';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  onSubmit?: (data: Payload, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n  formProps?: Partial<typeof Form>;\n};\n\nexport default class CreateTeamForm extends Component<Props> {\n  handleSubmit = (data: Record<string, any>, onSuccess: Function, onError: Function) => {\n    callIfFunction(this.props.onSubmit, data as Payload, onSuccess, onError);\n  };\n\n  handleCreateTeamSuccess = (data: Payload) => {\n    callIfFunction(this.props.onSuccess, data);\n  };\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <Fragment>\n        <p>\n          {t(\n            'Members of a team have access to specific areas, such as a new release or a new application feature.'\n          )}\n        </p>\n\n        <Form\n          submitLabel={t('Create Team')}\n          apiEndpoint={`/organizations/${organization.slug}/teams/`}\n          apiMethod=\"POST\"\n          onSubmit={this.handleSubmit}\n          onSubmitSuccess={this.handleCreateTeamSuccess}\n          requireChanges\n          data-test-id=\"create-team-form\"\n          {...this.props.formProps}\n        >\n          <TextField\n            name=\"slug\"\n            label={t('Team Name')}\n            placeholder={t('e.g. operations, web-frontend, desktop')}\n            help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n            required\n            stacked\n            flexibleControlStateSize\n            inline={false}\n            transformInput={slugify}\n          />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n","import InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n"],"sourceRoot":""}