{"version":3,"sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/isActiveSuperuser.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdModal.tsx"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","memoize","tag","query","endpointParams","props","api","organization","projectIds","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","replace","this","getEventFieldValues","cache","clear","prevProps","isEqual","measurements","fields","tags","omitTags","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","semverTags","SEMVER_TAGS","combined","has","values","predefined","getTagList","css","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","excludeEnvironment","dropdownClassName","React","withApi","withTags","SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","isActiveSuperuser","ConfigStore","isSuperuser","Cookies","undefined","measurementsFromDetails","details","entries","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","Measurements","WrappedComponent","WithTags","TagStore","setState","unsubscribe","state","getDisplayName","TransactionThresholdMetric","METRIC_CHOICES","label","t","value","TransactionThresholdModal","threshold","transactionThreshold","metric","transactionThresholdMetric","error","event","preventDefault","closeModal","transactionName","onApply","project","getProject","transactionThresholdUrl","requestPromise","method","includeAllArgs","id","data","transaction","catch","err","errorMessage","responseJSON","non_field_errors","addErrorMessage","prevState","newState","cloneDeep","set","errors","projectThresholdUrl","projects","eventView","find","proj","projectId","inline","help","showHelpInTooltip","flexibleControlStateSize","stacked","required","options","slice","onChange","option","handleFieldChange","type","pattern","target","step","min","Header","Body","Footer","summaryView","clone","getQueryWithAdditionalConditions","transactionSummaryRouteWithQuery","generateQueryStringObject","projectID","closeButton","Instruction","tct","Link","to","projectSettings","renderModalFields","gap","priority","onClick","handleReset","handleApply","space","modalCss","withProjects"],"mappings":"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","file":"chunks/app_components_events_searchBar_tsx-app_components_sentryDocumentTitle_tsx-app_utils_isActive-58aeaa.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport {ClassNames} from '@emotion/react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'app/actionCreators/tags';\nimport {Client} from 'app/api';\nimport SmartSearchBar from 'app/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'app/types';\nimport {defined} from 'app/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  TRACING_FIELDS,\n} from 'app/utils/discover/fields';\nimport Measurements from 'app/utils/measurements/measurements';\nimport withApi from 'app/utils/withApi';\nimport withTags from 'app/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\ntype SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  api: Client;\n  organization: Organization;\n  tags: TagCollection;\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n  fields?: Readonly<Field[]>;\n};\n\nclass SearchBar extends React.PureComponent<SearchBarProps> {\n  componentDidMount() {\n    // Clear memoized data on mount to make tests more consistent.\n    this.getEventFieldValues.cache.clear?.();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {\n      // Clear memoized data when projects change.\n      this.getEventFieldValues.cache.clear?.();\n    }\n  }\n\n  /**\n   * Returns array of tag values that substring match `query`; invokes `callback`\n   * with data when ready\n   */\n  getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const {api, organization, projectIds} = this.props;\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n\n  getTagList(\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) {\n    const {fields, organization, tags, omitTags} = this.props;\n\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const semverTags = organization.features.includes('semver')\n      ? Object.assign({}, SEMVER_TAGS, fieldTags)\n      : fieldTags;\n\n    const combined = assign({}, tags, semverTags);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  }\n\n  render() {\n    const {organization} = this.props;\n    return (\n      <Measurements organization={organization}>\n        {({measurements}) => {\n          const tags = this.getTagList(measurements);\n          return (\n            <ClassNames>\n              {({css}) => (\n                <SmartSearchBar\n                  {...this.props}\n                  hasRecentSearches\n                  savedSearchType={SavedSearchType.EVENT}\n                  onGetTagValues={this.getEventFieldValues}\n                  supportedTags={tags}\n                  prepareQuery={this.prepareQuery}\n                  excludeEnvironment\n                  dropdownClassName={css`\n                    max-height: 300px;\n                    overflow-y: auto;\n                  `}\n                />\n              )}\n            </ClassNames>\n          );\n        }}\n      </Measurements>\n    );\n  }\n}\n\nexport default withApi(withTags(SearchBar));\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import Cookies from 'js-cookie';\n\nimport ConfigStore from 'app/stores/configStore';\n\nconst SUPERUSER_COOKIE_NAME = 'su';\n\n/**\n * Checking for just isSuperuser on a config object may not be enough as backend often checks for *active* superuser.\n * We therefore check both isSuperuser flag AND superuser session cookie.\n */\nexport function isActiveSuperuser() {\n  const {isSuperuser} = ConfigStore.get('user') || {};\n\n  if (isSuperuser) {\n    /**\n     * Superuser cookie cannot be checked for existence as it is HttpOnly.\n     * As a workaround, we try to change it to something else and if that fails we can assume that it's being present.\n     * There may be an edgecase where it's present and expired but for current usage it's not a big deal.\n     */\n    Cookies.set(SUPERUSER_COOKIE_NAME, 'test');\n\n    if (Cookies.get(SUPERUSER_COOKIE_NAME) === undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import * as React from 'react';\n\nimport {Organization} from 'app/types';\nimport {MobileVital, WebVital} from 'app/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'app/utils/performance/vitals/constants';\nimport {Vital} from 'app/utils/performance/vitals/types';\n\ntype Measurement = {\n  name: string;\n  key: string;\n};\n\ntype MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  organization: Organization;\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({organization, children}: Props) {\n  const measurements = organization.features.includes('performance-mobile-vitals')\n    ? {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS}\n    : WEB_MEASUREMENTS;\n  return <React.Fragment>{children({measurements})}</React.Fragment>;\n}\n\nexport default Measurements;\n","import * as React from 'react';\n\nimport TagStore from 'app/stores/tagStore';\nimport {TagCollection} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends React.Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import * as React from 'react';\nimport {Link} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport FeatureBadge from 'app/components/featureBadge';\nimport SelectControl from 'app/components/forms/selectControl';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport EventView from 'app/utils/discover/eventView';\nimport withApi from 'app/utils/withApi';\nimport withProjects from 'app/utils/withProjects';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport Field from 'app/views/settings/components/forms/field';\n\nimport {transactionSummaryRouteWithQuery} from './utils';\n\nexport enum TransactionThresholdMetric {\n  TRANSACTION_DURATION = 'duration',\n  LARGEST_CONTENTFUL_PAINT = 'lcp',\n}\n\nexport const METRIC_CHOICES = [\n  {label: t('Transaction Duration'), value: 'duration'},\n  {label: t('Largest Contentful Paint'), value: 'lcp'},\n];\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  transactionName: string;\n  onApply?: (threshold, metric) => void;\n  project?: string;\n  projects: Project[];\n  eventView: EventView;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n} & ModalRenderProps;\n\ntype State = {\n  threshold: number | undefined;\n  metric: TransactionThresholdMetric | undefined;\n  error: string | null;\n};\n\nclass TransactionThresholdModal extends React.Component<Props, State> {\n  state: State = {\n    threshold: this.props.transactionThreshold,\n    metric: this.props.transactionThresholdMetric,\n    error: null,\n  };\n\n  getProject() {\n    const {projects, eventView, project} = this.props;\n\n    if (defined(project)) {\n      return projects.find(proj => proj.id === project);\n    } else {\n      const projectId = String(eventView.project[0]);\n      return projects.find(proj => proj.id === projectId);\n    }\n  }\n\n  handleApply = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'POST',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n          threshold: this.state.threshold,\n          metric: this.state.metric,\n        },\n      })\n      .then(() => {\n        closeModal();\n        if (onApply) {\n          onApply(this.state.threshold, this.state.metric);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n        const errorMessage =\n          err.responseJSON?.threshold ?? err.responseJSON?.non_field_errors ?? null;\n        addErrorMessage(errorMessage);\n      });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleReset = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'DELETE',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n        },\n      })\n      .then(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              threshold: data.threshold,\n              metric: data.metric,\n            });\n            closeModal();\n            if (onApply) {\n              onApply(this.state.threshold, this.state.metric);\n            }\n          })\n          .catch(err => {\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n      });\n  };\n\n  renderModalFields() {\n    return (\n      <React.Fragment>\n        <Field\n          data-test-id=\"response-metric\"\n          label={t('Calculation Method')}\n          inline={false}\n          help={t(\n            'This determines which duration metric is used for the Response Time Threshold.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <SelectControl\n            required\n            options={METRIC_CHOICES.slice()}\n            name=\"responseMetric\"\n            label={t('Calculation Method')}\n            value={this.state.metric}\n            onChange={(option: {label: string; value: string}) => {\n              this.handleFieldChange('metric')(option.value);\n            }}\n          />\n        </Field>\n        <Field\n          data-test-id=\"response-time-threshold\"\n          label={t('Response Time Threshold (ms)')}\n          inline={false}\n          help={t(\n            'The satisfactory response time for the calculation method defined above. This is used to calculate Apdex and User Misery scores.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <Input\n            type=\"number\"\n            name=\"threshold\"\n            required\n            pattern=\"[0-9]*(\\.[0-9]*)?\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.handleFieldChange('threshold')(event.target.value);\n            }}\n            value={this.state.threshold}\n            step={100}\n            min={100}\n          />\n        </Field>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body, Footer, organization, transactionName, eventView} = this.props;\n\n    const project = this.getProject();\n\n    const summaryView = eventView.clone();\n    summaryView.query = summaryView.getQueryWithAdditionalConditions();\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      query: summaryView.generateQueryStringObject(),\n      projectID: project?.id,\n    });\n\n    return (\n      <React.Fragment>\n        <Header closeButton>\n          <h4>\n            {t('Transaction Settings')} <FeatureBadge type=\"beta\" />\n          </h4>\n        </Header>\n        <Body>\n          <Instruction>\n            {tct(\n              'The changes below will only be applied to [transaction]. To set it at a more global level, go to [projectSettings: Project Settings].',\n              {\n                transaction: <Link to={target}>{transactionName}</Link>,\n                projectSettings: (\n                  <Link\n                    to={`/settings/${organization.slug}/projects/${project?.slug}/performance/`}\n                  />\n                ),\n              }\n            )}\n          </Instruction>\n          {this.renderModalFields()}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              priority=\"default\"\n              onClick={this.handleReset}\n              data-test-id=\"reset-all\"\n            >\n              {t('Reset All')}\n            </Button>\n            <Button\n              label={t('Apply')}\n              priority=\"primary\"\n              onClick={this.handleApply}\n              data-test-id=\"apply-threshold\"\n            >\n              {t('Apply')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n  margin: 70px auto;\n`;\n\nexport default withApi(withProjects(TransactionThresholdModal));\n"],"sourceRoot":""}