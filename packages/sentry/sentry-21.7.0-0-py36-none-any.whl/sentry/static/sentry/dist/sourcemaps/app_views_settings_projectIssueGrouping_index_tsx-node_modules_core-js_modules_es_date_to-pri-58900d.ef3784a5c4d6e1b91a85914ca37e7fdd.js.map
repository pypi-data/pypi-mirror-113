{"version":3,"sources":["webpack:///./app/data/forms/projectIssueGrouping.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/projectIssueGrouping/upgradeGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/utils.tsx","webpack:///./app/views/settings/projectIssueGrouping/index.tsx","webpack:///../node_modules/core-js/internals/date-to-primitive.js","webpack:///../node_modules/core-js/modules/es.date.to-primitive.js","webpack:///../node_modules/core-js/modules/es.symbol.to-primitive.js"],"names":["route","groupingConfigField","name","type","label","t","saveOnBlur","saveMessageAlertType","saveMessage","selectionInfoFunction","args","groupingConfigs","value","selection","find","id","changelog","Changelog","ChangelogTitle","tct","version","dangerouslySetInnerHTML","__html","marked","choices","map","hidden","toString","isHidden","help","visible","features","has","fields","fingerprintingRules","hideLabel","placeholder","multiline","monospace","autosize","inline","maxRows","formatMessageValue","Fragment","RuleDescription","pattern","docs","href","RuleExample","groupingEnhancements","validate","groupingConfig","secondaryGroupingConfig","secondaryGroupingExpiry","space","p","theme","innerBorder","backgroundSecondary","fontSizeMedium","borderRadius","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","FormPanel","props","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","sanitizeQuerySelector","undefined","field","defaultValue","fieldWithoutDefaultValue","disabledReason","highlighted","React","JsonForm","location","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","length","every","formPanelProps","shouldDisplayForm","forms","state","formGroup","i","renderForm","withRouter","UpgradeGrouping","organization","projectId","project","onUpgrade","api","hasAccess","includes","byId","updateNotes","riskLevel","latestGroupingConfig","forEach","cfg","latest","risk","next","base","Math","max","getGroupingChanges","riskNote","alertType","getGroupingRisk","noUpdates","newData","handleUpgrade","addLoadingMessage","requestPromise","slug","method","data","response","clearIndicators","ProjectActions","handleXhrErrorResponse","linebreak","onConfirm","priority","confirmText","message","params","routeTitleGen","orgId","endpoint","Set","jsonFormProps","link","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","handleSubmit","fetchData","anObject","toPrimitive","module","exports","hint","TypeError","createNonEnumerableProperty","dateToPrimitive","TO_PRIMITIVE","wellKnownSymbol","DatePrototype","Date","prototype","defineWellKnownSymbol"],"mappings":"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","file":"chunks/app_views_settings_projectIssueGrouping_index_tsx-node_modules_core-js_modules_es_date_to-pri-58900d.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {GroupingConfigItem} from 'app/components/events/groupingInfo';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport marked from 'app/utils/marked';\nimport {Field} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/issue-grouping/';\n\nconst groupingConfigField: Field = {\n  name: 'groupingConfig',\n  type: 'select',\n  label: t('Grouping Config'),\n  saveOnBlur: false,\n  saveMessageAlertType: 'info',\n  saveMessage: t(\n    'Changing grouping config will apply to future events only (can take up to a minute).'\n  ),\n  selectionInfoFunction: args => {\n    const {groupingConfigs, value} = args;\n    const selection = groupingConfigs.find(({id}) => id === value);\n    const changelog = selection?.changelog || '';\n    if (!changelog) {\n      return null;\n    }\n    return (\n      <Changelog>\n        <ChangelogTitle>\n          {tct('New in version [version]', {version: selection.id})}:\n        </ChangelogTitle>\n        <div dangerouslySetInnerHTML={{__html: marked(changelog)}} />\n      </Changelog>\n    );\n  },\n  choices: ({groupingConfigs}) =>\n    groupingConfigs.map(({id, hidden}) => [\n      id.toString(),\n      <GroupingConfigItem key={id} isHidden={hidden}>\n        {id}\n      </GroupingConfigItem>,\n    ]),\n  help: t('Sets the grouping algorithm to be used for new events.'),\n  visible: ({features}) => features.has('set-grouping-config'),\n};\n\nexport const fields: Record<string, Field> = {\n  fingerprintingRules: {\n    name: 'fingerprintingRules',\n    type: 'string',\n    label: t('Fingerprint Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'error.type:MyException -> fingerprint-value\\nstack.function:some_panic_function -> fingerprint-value'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing fingerprint rules will apply to future events only (can take up to a minute).'\n    ),\n    formatMessageValue: false,\n    help: () => (\n      <Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to modify the fingerprint rules on the server with custom rules.\n        Rules follow the pattern [pattern]. To learn more about fingerprint rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob -&gt; fingerprint, values</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/fingerprint-rules/\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# force all errors of the same type to have the same fingerprint\nerror.type:DatabaseUnavailable -> system-down\n# force all memory allocation errors to be grouped together\nstack.function:malloc -> memory-allocation-error`}\n        </RuleExample>\n      </Fragment>\n    ),\n    visible: true,\n  },\n  groupingEnhancements: {\n    name: 'groupingEnhancements',\n    type: 'string',\n    label: t('Stack Trace Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'stack.function:raise_an_exception ^-group\\nstack.function:namespace::* +app'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing stack trace rules will apply to future events only (can take up to a minute).'\n    ),\n    formatMessageValue: false,\n    help: () => (\n      <Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to enhance the grouping algorithm with custom rules.\n        Rules follow the pattern [pattern]. To learn more about stack trace rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob [v^]?[+-]flag</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/stack-trace-rules/\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# remove all frames above a certain function from grouping\nstack.function:panic_handler ^-group\n# mark all functions following a prefix in-app\nstack.function:mylibrary_* +app`}\n        </RuleExample>\n      </Fragment>\n    ),\n    validate: () => [],\n    visible: true,\n  },\n  groupingConfig: groupingConfigField,\n  secondaryGroupingConfig: {\n    ...groupingConfigField,\n    name: 'secondaryGroupingConfig',\n    label: t('Fallback/Secondary Grouping Config'),\n    help: t(\n      'Sets the secondary grouping algorithm that should be run in addition to avoid creating too many new groups. Controlled by expiration date below.'\n    ),\n  },\n  secondaryGroupingExpiry: {\n    name: 'secondaryGroupingExpiry',\n    type: 'number',\n    label: t('Expiration date of secondary grouping'),\n    help: t(\n      'If this UNIX timestamp is in the past, the secondary grouping configuration stops applying automatically.'\n    ),\n  },\n};\n\nconst RuleDescription = styled('div')`\n  margin-bottom: ${space(1)};\n  margin-top: -${space(1)};\n  margin-right: 36px;\n`;\n\nconst RuleExample = styled('pre')`\n  margin-bottom: ${space(1)};\n  margin-right: 36px;\n`;\n\nconst Changelog = styled('div')`\n  position: relative;\n  top: -1px;\n  margin-bottom: -1px;\n  padding: ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n  background: ${p => p.theme.backgroundSecondary};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:last-child {\n    border: 0;\n    border-bottom-left-radius: ${p => p.theme.borderRadius};\n    border-bottom-right-radius: ${p => p.theme.borderRadius};\n  }\n`;\n\nconst ChangelogTitle = styled('h3')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(0.75)} !important;\n`;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import {Fragment} from 'react';\n\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport ProjectActions from 'app/actions/projectActions';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {EventGroupingConfig, Organization, Project} from 'app/types';\nimport handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';\nimport marked from 'app/utils/marked';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport {getGroupingChanges, getGroupingRisk} from './utils';\n\ntype Props = {\n  groupingConfigs: EventGroupingConfig[];\n  organization: Organization;\n  projectId: string;\n  project: Project;\n  onUpgrade: () => void;\n  api: Client;\n};\n\nfunction UpgradeGrouping({\n  groupingConfigs,\n  organization,\n  projectId,\n  project,\n  onUpgrade,\n  api,\n}: Props) {\n  const hasAccess = organization.access.includes('project:write');\n  const {updateNotes, riskLevel, latestGroupingConfig} = getGroupingChanges(\n    project,\n    groupingConfigs\n  );\n  const {riskNote, alertType} = getGroupingRisk(riskLevel);\n  const noUpdates = !latestGroupingConfig;\n\n  const newData: Record<string, string> = {};\n  if (latestGroupingConfig) {\n    newData.groupingConfig = latestGroupingConfig.id;\n  }\n\n  const handleUpgrade = async () => {\n    addLoadingMessage(t('Changing grouping\\u2026'));\n    try {\n      const response = await api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/`,\n        {\n          method: 'PUT',\n          data: newData,\n        }\n      );\n      clearIndicators();\n      ProjectActions.updateSuccess(response);\n      onUpgrade();\n    } catch {\n      handleXhrErrorResponse(t('Unable to upgrade config'));\n    }\n  };\n\n  if (!groupingConfigs) {\n    return null;\n  }\n\n  function getModalMessage() {\n    return (\n      <Fragment>\n        <TextBlock>\n          <strong>{t('Upgrade Grouping Strategy')}</strong>\n        </TextBlock>\n        <TextBlock>\n          {t(\n            'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'\n          )}\n        </TextBlock>\n        <TextBlock>\n          <strong>{t('New Behavior')}</strong>\n          <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />\n        </TextBlock>\n        <TextBlock>\n          <Alert type={alertType}>{riskNote}</Alert>\n        </TextBlock>\n      </Fragment>\n    );\n  }\n\n  function getButtonTitle() {\n    if (!hasAccess) {\n      return t('You do not have sufficient permissions to do this');\n    }\n    if (noUpdates) {\n      return t('You are already on the latest version');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <Panel id=\"upgrade-grouping\">\n      <PanelHeader>{t('Upgrade Grouping')}</PanelHeader>\n      <PanelBody>\n        <Field\n          label={t('Upgrade Grouping Strategy')}\n          help={tct(\n            'If the project uses an old grouping strategy an update is possible.[linebreak]Doing so will cause new events to group differently.',\n            {\n              linebreak: <br />,\n            }\n          )}\n          disabled\n        >\n          <Confirm\n            disabled={noUpdates}\n            onConfirm={handleUpgrade}\n            priority={riskLevel >= 2 ? 'danger' : 'primary'}\n            confirmText={t('Upgrade')}\n            message={getModalMessage()}\n          >\n            <div>\n              <Button\n                disabled={!hasAccess || noUpdates}\n                title={getButtonTitle()}\n                type=\"button\"\n                priority={riskLevel >= 2 ? 'danger' : 'primary'}\n              >\n                {t('Upgrade Grouping Strategy')}\n              </Button>\n            </div>\n          </Confirm>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default UpgradeGrouping;\n","import * as React from 'react';\n\nimport Alert from 'app/components/alert';\nimport {t} from 'app/locale';\nimport {EventGroupingConfig, Project} from 'app/types';\n\nexport function getGroupingChanges(\n  project: Project,\n  groupingConfigs: EventGroupingConfig[]\n): {\n  updateNotes: string;\n  riskLevel: number;\n  latestGroupingConfig: EventGroupingConfig | null;\n} {\n  const byId: Record<string, EventGroupingConfig> = {};\n  let updateNotes: string = '';\n  let riskLevel: number = 0;\n  let latestGroupingConfig: EventGroupingConfig | null = null;\n\n  groupingConfigs.forEach(cfg => {\n    byId[cfg.id] = cfg;\n    if (cfg.latest && project.groupingConfig !== cfg.id) {\n      updateNotes = cfg.changelog;\n      latestGroupingConfig = cfg;\n      riskLevel = cfg.risk;\n    }\n  });\n\n  if (latestGroupingConfig) {\n    let next = (latestGroupingConfig as EventGroupingConfig).base ?? '';\n    while (next !== project.groupingConfig) {\n      const cfg = byId[next];\n      if (!cfg) {\n        break;\n      }\n      riskLevel = Math.max(riskLevel, cfg.risk);\n      updateNotes = cfg.changelog + '\\n' + updateNotes;\n      next = cfg.base ?? '';\n    }\n  }\n\n  return {updateNotes, riskLevel, latestGroupingConfig};\n}\n\nexport function getGroupingRisk(riskLevel: number): {\n  riskNote: React.ReactNode;\n  alertType: React.ComponentProps<typeof Alert>['type'];\n} {\n  switch (riskLevel) {\n    case 0:\n      return {\n        riskNote: t('This upgrade has the chance to create some new issues.'),\n        alertType: 'info',\n      };\n    case 1:\n      return {\n        riskNote: t('This upgrade will create some new issues.'),\n        alertType: 'warning',\n      };\n    case 2:\n      return {\n        riskNote: (\n          <strong>\n            {t(\n              'The new grouping strategy is incompatible with the current and will create entirely new issues.'\n            )}\n          </strong>\n        ),\n        alertType: 'error',\n      };\n    default:\n      return {riskNote: undefined, alertType: undefined};\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport Feature from 'app/components/acl/feature';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {fields} from 'app/data/forms/projectIssueGrouping';\nimport {t, tct} from 'app/locale';\nimport {EventGroupingConfig, Organization, Project} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport UpgradeGrouping from './upgradeGrouping';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  groupingConfigs: EventGroupingConfig[] | null;\n} & AsyncView['state'];\n\nclass ProjectDebugSymbols extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Issue Grouping'), projectId, false);\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      groupingConfigs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['groupingConfigs', '/grouping-configs/']];\n  }\n\n  handleSubmit = (response: Project) => {\n    // This will update our project context\n    ProjectActions.updateSuccess(response);\n  };\n\n  renderBody() {\n    const {groupingConfigs} = this.state;\n    const {organization, project, params} = this.props;\n    const {orgId, projectId} = params;\n    const endpoint = `/projects/${orgId}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n        groupingConfigs,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Issue Grouping')} />\n\n        <TextBlock>\n          {tct(\n            `All events have a fingerprint. Events with the same fingerprint are grouped together into an issue. To learn more about issue grouping, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={project}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleSubmit}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Fingerprint Rules')}\n            fields={[fields.fingerprintingRules]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Stack Trace Rules')}\n            fields={[fields.groupingEnhancements]}\n          />\n\n          <Feature features={['set-grouping-config']} organization={organization}>\n            <JsonForm\n              {...jsonFormProps}\n              title={t('Change defaults')}\n              fields={[\n                fields.groupingConfig,\n                fields.secondaryGroupingConfig,\n                fields.secondaryGroupingExpiry,\n              ]}\n            />\n          </Feature>\n\n          <UpgradeGrouping\n            groupingConfigs={groupingConfigs ?? []}\n            organization={organization}\n            projectId={params.projectId}\n            project={project}\n            api={this.api}\n            onUpgrade={this.fetchData}\n          />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nexport default ProjectDebugSymbols;\n","'use strict';\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\n// `Date.prototype[@@toPrimitive](hint)` method implementation\n// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {\n    throw TypeError('Incorrect hint');\n  } return toPrimitive(anObject(this), hint !== 'number');\n};\n","var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar dateToPrimitive = require('../internals/date-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar DatePrototype = Date.prototype;\n\n// `Date.prototype[@@toPrimitive]` method\n// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive\nif (!(TO_PRIMITIVE in DatePrototype)) {\n  createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);\n}\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toPrimitive` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.toprimitive\ndefineWellKnownSymbol('toPrimitive');\n"],"sourceRoot":""}