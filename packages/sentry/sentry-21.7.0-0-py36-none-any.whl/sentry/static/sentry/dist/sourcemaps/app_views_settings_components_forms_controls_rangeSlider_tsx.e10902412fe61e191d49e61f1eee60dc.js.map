{"version":3,"sources":["webpack:///./app/views/settings/components/forms/controls/rangeSlider.tsx"],"names":["RangeSlider","value","allowedValues","showCustomInput","name","disabled","placeholder","formatLabel","className","onBlur","onChange","forwardRef","showLabel","props","useState","indexOf","Number","sliderValue","setSliderValue","handleInput","e","newSliderValue","parseInt","target","getActualValue","handleBlur","useEffect","defined","newSliderValueIndex","updateSliderValue","min","max","step","actualValue","displayValue","length","t","getSliderData","ref","Label","htmlFor","SliderAndInputWrapper","Slider","type","onInput","onMouseUp","onKeyUp","hasLabel","RangeSliderContainer","React","p","theme","grid","border","background","active","subText","space"],"mappings":"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","file":"chunks/app_views_settings_components_forms_controls_rangeSlider_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, MouseEvent, useEffect, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {defined} from 'app/utils';\nimport Input from 'app/views/settings/components/forms/controls/input';\n\ntype Props = {\n  name: string;\n\n  /**\n   * String is a valid type here only for empty string\n   * Otherwise react complains:\n   * \"`value` prop on `input` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.\"\n   *\n   * And we want this to be a controlled input when value is empty\n   */\n  value: number | '';\n\n  /**\n   * min allowed value, not needed if using `allowedValues`\n   */\n  min?: number;\n\n  /**\n   * max allowed value, not needed if using `allowedValues`\n   */\n  max?: number;\n\n  step?: number;\n  disabled?: boolean;\n\n  /**\n   * Render prop for slider's label\n   * Is passed the value as an argument\n   */\n  formatLabel?: (value: number | '') => React.ReactNode;\n\n  /**\n   * Array of allowed values. Make sure `value` is in this list.\n   * THIS NEEDS TO BE SORTED\n   */\n  allowedValues?: number[];\n\n  /**\n   * Show input control for custom values\n   */\n  showCustomInput?: boolean;\n  /**\n   * Show label with current value\n   */\n  showLabel?: boolean;\n\n  /**\n   * Placeholder for custom input\n   */\n  placeholder?: string;\n\n  /**\n   * This is called when *any* MouseUp or KeyUp event happens.\n   * Used for \"smart\" Fields to trigger a \"blur\" event. `onChange` can\n   * be triggered quite frequently\n   */\n  onBlur?: (\n    event: MouseEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>\n  ) => void;\n  onChange?: (value: Props['value'], event: ChangeEvent<HTMLInputElement>) => void;\n  className?: string;\n  forwardRef?: React.Ref<HTMLDivElement>;\n};\n\nfunction RangeSlider({\n  value,\n  allowedValues,\n  showCustomInput,\n  name,\n  disabled,\n  placeholder,\n  formatLabel,\n  className,\n  onBlur,\n  onChange,\n  forwardRef,\n  showLabel = true,\n  ...props\n}: Props) {\n  const [sliderValue, setSliderValue] = useState(\n    allowedValues ? allowedValues.indexOf(Number(value || 0)) : value\n  );\n\n  useEffect(() => {\n    updateSliderValue();\n  }, [value]);\n\n  function updateSliderValue() {\n    if (!defined(value)) {\n      return;\n    }\n\n    const newSliderValueIndex = allowedValues?.indexOf(Number(value || 0)) ?? -1;\n\n    // If `allowedValues` is defined, then `sliderValue` represents index to `allowedValues`\n    if (newSliderValueIndex > -1) {\n      setSliderValue(newSliderValueIndex);\n      return;\n    }\n\n    setSliderValue(value);\n  }\n\n  function getActualValue(newSliderValue: Props['value']): Props['value'] {\n    if (!allowedValues) {\n      return newSliderValue;\n    }\n\n    // If `allowedValues` is defined, then `sliderValue` represents index to `allowedValues`\n    return allowedValues[newSliderValue];\n  }\n\n  function handleInput(e: ChangeEvent<HTMLInputElement>) {\n    const newSliderValue = parseInt(e.target.value, 10);\n    setSliderValue(newSliderValue);\n    onChange?.(getActualValue(newSliderValue), e);\n  }\n\n  function handleCustomInputChange(e: ChangeEvent<HTMLInputElement>) {\n    setSliderValue(parseInt(e.target.value, 10) || 0);\n  }\n\n  function handleBlur(e: MouseEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>) {\n    if (typeof onBlur !== 'function') {\n      return;\n    }\n\n    onBlur(e);\n  }\n\n  function getSliderData() {\n    if (!allowedValues) {\n      const {min, max, step} = props;\n      return {\n        min,\n        max,\n        step,\n        actualValue: sliderValue,\n        displayValue: sliderValue,\n      };\n    }\n\n    const actualValue = allowedValues[sliderValue];\n\n    return {\n      step: 1,\n      min: 0,\n      max: allowedValues.length - 1,\n      actualValue,\n      displayValue: defined(actualValue) ? actualValue : t('Invalid value'),\n    };\n  }\n\n  const {min, max, step, actualValue, displayValue} = getSliderData();\n\n  return (\n    <div className={className} ref={forwardRef}>\n      {!showCustomInput && showLabel && (\n        <Label htmlFor={name}>{formatLabel?.(actualValue) ?? displayValue}</Label>\n      )}\n      <SliderAndInputWrapper showCustomInput={showCustomInput}>\n        <Slider\n          type=\"range\"\n          name={name}\n          min={min}\n          max={max}\n          step={step}\n          disabled={disabled}\n          onInput={handleInput}\n          onMouseUp={handleBlur}\n          onKeyUp={handleBlur}\n          value={sliderValue}\n          hasLabel={!showCustomInput}\n        />\n        {showCustomInput && (\n          <Input\n            placeholder={placeholder}\n            value={sliderValue}\n            onChange={handleCustomInputChange}\n            onBlur={handleInput}\n          />\n        )}\n      </SliderAndInputWrapper>\n    </div>\n  );\n}\n\nconst RangeSliderContainer = React.forwardRef(function RangeSliderContainer(\n  props: Props,\n  ref: React.Ref<any>\n) {\n  return <RangeSlider {...props} forwardRef={ref} />;\n});\n\nexport default RangeSliderContainer;\n\nexport const Slider = styled('input')<{hasLabel: boolean}>`\n  /* stylelint-disable-next-line property-no-vendor-prefix */\n  -webkit-appearance: none;\n  width: 100%;\n  background: transparent;\n  margin: ${p => p.theme.grid}px 0 ${p => p.theme.grid * (p.hasLabel ? 2 : 1)}px;\n\n  &::-webkit-slider-runnable-track {\n    width: 100%;\n    height: 3px;\n    cursor: pointer;\n    background: ${p => p.theme.border};\n    border-radius: 3px;\n    border: 0;\n  }\n\n  &::-moz-range-track {\n    width: 100%;\n    height: 3px;\n    cursor: pointer;\n    background: ${p => p.theme.border};\n    border-radius: 3px;\n    border: 0;\n  }\n\n  &::-ms-track {\n    width: 100%;\n    height: 3px;\n    cursor: pointer;\n    background: ${p => p.theme.border};\n    border-radius: 3px;\n    border: 0;\n  }\n\n  &::-webkit-slider-thumb {\n    box-shadow: 0 0 0 3px ${p => p.theme.background};\n    height: 17px;\n    width: 17px;\n    border-radius: 50%;\n    background: ${p => p.theme.active};\n    cursor: pointer;\n    /* stylelint-disable-next-line property-no-vendor-prefix */\n    -webkit-appearance: none;\n    margin-top: -7px;\n    border: 0;\n  }\n\n  &::-moz-range-thumb {\n    box-shadow: 0 0 0 3px ${p => p.theme.background};\n    height: 17px;\n    width: 17px;\n    border-radius: 50%;\n    background: ${p => p.theme.active};\n    cursor: pointer;\n    /* stylelint-disable-next-line property-no-vendor-prefix */\n    -webkit-appearance: none;\n    margin-top: -7px;\n    border: 0;\n  }\n\n  &::-ms-thumb {\n    box-shadow: 0 0 0 3px ${p => p.theme.background};\n    height: 17px;\n    width: 17px;\n    border-radius: 50%;\n    background: ${p => p.theme.active};\n    cursor: pointer;\n    /* stylelint-disable-next-line property-no-vendor-prefix */\n    -webkit-appearance: none;\n    margin-top: -7px;\n    border: 0;\n  }\n\n  &::-ms-fill-lower {\n    background: ${p => p.theme.border};\n    border: 0;\n    border-radius: 50%;\n  }\n\n  &::-ms-fill-upper {\n    background: ${p => p.theme.border};\n    border: 0;\n    border-radius: 50%;\n  }\n\n  &:focus {\n    outline: none;\n\n    &::-webkit-slider-runnable-track {\n      background: ${p => p.theme.border};\n    }\n\n    &::-ms-fill-upper {\n      background: ${p => p.theme.border};\n    }\n\n    &::-ms-fill-lower {\n      background: ${p => p.theme.border};\n    }\n  }\n\n  &[disabled] {\n    &::-webkit-slider-thumb {\n      background: ${p => p.theme.border};\n      cursor: default;\n    }\n\n    &::-moz-range-thumb {\n      background: ${p => p.theme.border};\n      cursor: default;\n    }\n\n    &::-ms-thumb {\n      background: ${p => p.theme.border};\n      cursor: default;\n    }\n\n    &::-webkit-slider-runnable-track {\n      cursor: default;\n    }\n\n    &::-moz-range-track {\n      cursor: default;\n    }\n\n    &::-ms-track {\n      cursor: default;\n    }\n  }\n`;\n\nconst Label = styled('label')`\n  font-size: 14px;\n  margin-bottom: ${p => p.theme.grid}px;\n  color: ${p => p.theme.subText};\n`;\n\nconst SliderAndInputWrapper = styled('div')<{showCustomInput?: boolean}>`\n  display: grid;\n  align-items: center;\n  grid-auto-flow: column;\n  grid-template-columns: 4fr ${p => p.showCustomInput && '1fr'};\n  grid-gap: ${space(1)};\n`;\n"],"sourceRoot":""}