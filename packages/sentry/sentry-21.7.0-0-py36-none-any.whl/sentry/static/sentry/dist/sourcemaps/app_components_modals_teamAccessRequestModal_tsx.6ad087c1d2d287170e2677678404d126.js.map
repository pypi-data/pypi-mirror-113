{"version":3,"sources":["webpack:///./app/components/modals/teamAccessRequestModal.tsx","webpack:///./app/utils/withApi.tsx"],"names":["CreateTeamAccessRequest","createBusy","props","api","memberId","orgId","teamId","closeModal","setState","requestPromise","method","addSuccessMessage","t","addErrorMessage","this","Body","Footer","Fragment","tct","team","ButtonGroup","onClick","priority","handleClick","busy","state","autoFocus","Component","space","withApi","WrappedComponent","persistInFlight","Client","clear","React","getDisplayName"],"mappings":"yyCAuBMA,E,wnBACW,CACbC,YAAY,K,kDAGA,uGACuC,EAAKC,MAAjDC,EADK,EACLA,IAAKC,EADA,EACAA,SAAUC,EADV,EACUA,MAAOC,EADjB,EACiBA,OAAQC,EADzB,EACyBA,WAErC,EAAKC,SAAS,CAACP,YAAY,IAHf,kBAMJE,EAAIM,eAAJ,yBACcJ,EADd,oBAC+BD,EAD/B,kBACiDE,EADjD,KAEJ,CACEI,OAAQ,SATF,QAYVC,SAAkBC,OAAE,mCAZV,iDAcVC,SAAgBD,OAAE,gCAdR,QAgBZ,EAAKJ,SAAS,CAACP,YAAY,IAC3BM,IAjBY,0D,uCAoBd,WACE,MAA2CO,KAAKZ,MAAzCa,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAQT,EAArB,EAAqBA,WAAYD,EAAjC,EAAiCA,OAEjC,OACE,QAAC,EAAAW,SAAD,YACE,QAACF,EAAD,WACGG,QACC,sIACA,CAACC,KAAMb,OAGX,QAACU,EAAD,WACE,QAACI,EAAD,YACE,QAAC,KAAD,CAAQC,QAASd,EAAjB,UAA8BK,OAAE,aAChC,QAAC,KAAD,CACEU,SAAS,UACTD,QAASP,KAAKS,YACdC,KAAMV,KAAKW,MAAMxB,WACjByB,WAAS,EAJX,UAMGd,OAAE,0B,GA7CqBe,aAAhC3B,E,sCAsDN,IAAMoB,GAAc,OAAO,MAAP,qBAAH,wEAGHQ,OAAM,GAHH,KAMjB,WAAeC,OAAQ7B,I,qvEC9BvB,IA1BgB,SACd8B,GADc,iEAEmB,GAAhCC,EAFa,EAEbA,gBAFa,+CAOZ,WAAY7B,GAAwB,4BAClC,cAAMA,IAD4B,gCAElC,EAAKC,IAAM,IAAI6B,KAFmB,EAPxB,mDAYZ,WACOD,GACHjB,KAAKX,IAAI8B,UAdD,oBAoBZ,WACE,MAAwBnB,KAAKZ,MAAtBC,EAAP,EAAOA,IAAQD,GAAf,YACA,OAAO,QAAC4B,EAAD,QAAwB3B,IAAKA,UAAOW,KAAKX,KAAQD,SAtB9C,GAIAgC,cAJA,0CAKoBC,OAAeL,GALnC","file":"chunks/app_components_modals_teamAccessRequestModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {ModalRenderProps, TeamAccessRequestModalOptions} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\n\ntype Props = ModalRenderProps &\n  TeamAccessRequestModalOptions & {\n    api: Client;\n    memberId: string;\n    teamId: string;\n    orgId: string;\n  };\n\ntype State = {\n  createBusy: boolean;\n};\n\nclass CreateTeamAccessRequest extends Component<Props, State> {\n  state: State = {\n    createBusy: false,\n  };\n\n  handleClick = async () => {\n    const {api, memberId, orgId, teamId, closeModal} = this.props;\n\n    this.setState({createBusy: true});\n\n    try {\n      await api.requestPromise(\n        `/organizations/${orgId}/members/${memberId}/teams/${teamId}/`,\n        {\n          method: 'POST',\n        }\n      );\n      addSuccessMessage(t('Team request sent for approval'));\n    } catch (err) {\n      addErrorMessage(t('Unable to send team request'));\n    }\n    this.setState({createBusy: false});\n    closeModal();\n  };\n\n  render() {\n    const {Body, Footer, closeModal, teamId} = this.props;\n\n    return (\n      <Fragment>\n        <Body>\n          {tct(\n            'You do not have permission to add members to the #[team] team, but we will send a request to your organization admins for approval.',\n            {team: teamId}\n          )}\n        </Body>\n        <Footer>\n          <ButtonGroup>\n            <Button onClick={closeModal}>{t('Cancel')}</Button>\n            <Button\n              priority=\"primary\"\n              onClick={this.handleClick}\n              busy={this.state.createBusy}\n              autoFocus\n            >\n              {t('Continue')}\n            </Button>\n          </ButtonGroup>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst ButtonGroup = styled('div')`\n  display: grid;\n  grid-template-columns: max-content max-content;\n  grid-gap: ${space(1)};\n`;\n\nexport default withApi(CreateTeamAccessRequest);\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n"],"sourceRoot":""}