{"version":3,"sources":["webpack:///./app/components/u2f/u2fContainer.tsx","webpack:///./app/components/modals/sudoModal.tsx","webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/utils/withApi.tsx"],"names":["U2fContainer","authenticators","this","getAuthenticators","api","props","requestPromise","setState","className","state","length","map","auth","id","challenge","challengeData","Component","withApi","SudoModal","error","busy","closeModal","superuser","location","router","retryRequest","replace","pathname","forceUpdate","Date","then","data","method","handleSuccess","user","ConfigStore","hasPasswordAuth","StyledTextBlock","t","StyledAlert","type","icon","size","apiMethod","apiEndpoint","submitLabel","onSubmitSuccess","onSubmitError","handleError","hideFooter","resetOnError","StyledInputField","inline","label","name","autoFocus","flexibleControlStateSize","displayMode","onTap","handleU2fTap","priority","href","encodeURIComponent","Header","Body","closeButton","renderBodyContent","React","withRouter","TextBlock","space","InputField","Alert","U2fInterface","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","invokeU2fFlow","ref","form","value","JSON","stringify","supportMail","support","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","onClick","onTryAgain","u2f","supported","promise","flowMode","authenticateRequests","Error","registerRequests","u2fResponse","response","catch","submit","err","failure","metaData","Sentry","silentIfUnsupported","renderFailure","children","bindChallengeElement","bindResponseElement","renderBody","renderPrompt","renderUnsupported","MESSAGES","signin","sudo","enroll","U2fSign","WrappedComponent","persistInFlight","Client","clear","getDisplayName"],"mappings":"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","file":"chunks/app_components_modals_sudoModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'app/api';\nimport {Authenticator} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\nimport U2fSign from './u2fsign';\n\ntype Props = {\n  api: Client;\n  onTap: U2fSign['props']['onTap'];\n  displayMode?: U2fSign['props']['displayMode'];\n  className?: string;\n};\ntype State = {\n  authenticators: Array<Authenticator>;\n};\n\nclass U2fContainer extends Component<Props, State> {\n  state: State = {\n    authenticators: [],\n  };\n  componentDidMount() {\n    this.getAuthenticators();\n  }\n\n  async getAuthenticators() {\n    const {api} = this.props;\n\n    try {\n      const authenticators = await api.requestPromise('/authenticators/');\n      this.setState({authenticators: authenticators ?? []});\n    } catch {\n      // ignore errors\n    }\n  }\n\n  render() {\n    const {className} = this.props;\n    const {authenticators} = this.state;\n\n    if (!authenticators.length) {\n      return null;\n    }\n\n    return (\n      <div className={className}>\n        {authenticators.map(auth =>\n          auth.id === 'u2f' && auth.challenge ? (\n            <U2fSign key={auth.id} {...this.props} challengeData={auth.challenge} />\n          ) : null\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withApi(U2fContainer);\n","import * as React from 'react';\nimport {withRouter} from 'react-router';\nimport {WithRouterProps} from 'react-router/lib/withRouter';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport U2fContainer from 'app/components/u2f/u2fContainer';\nimport {IconFlag} from 'app/icons';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport Form from 'app/views/settings/components/forms/form';\nimport InputField from 'app/views/settings/components/forms/inputField';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype OnTapProps = NonNullable<React.ComponentProps<typeof U2fContainer>['onTap']>;\n\ntype Props = WithRouterProps &\n  Pick<ModalRenderProps, 'Body' | 'Header'> & {\n    api: Client;\n    closeModal: () => void;\n    /**\n     * User is a superuser without an active su session\n     */\n    superuser?: boolean;\n    /**\n     * expects a function that returns a Promise\n     */\n    retryRequest?: () => Promise<any>;\n  };\n\ntype State = {\n  error: boolean;\n  busy: boolean;\n};\n\nclass SudoModal extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    busy: false,\n  };\n\n  handleSuccess = () => {\n    const {closeModal, superuser, location, router, retryRequest} = this.props;\n\n    if (!retryRequest) {\n      closeModal();\n      return;\n    }\n\n    if (superuser) {\n      router.replace({pathname: location.pathname, state: {forceUpdate: new Date()}});\n      return;\n    }\n\n    this.setState({busy: true}, () => {\n      retryRequest().then(() => {\n        this.setState({busy: false}, closeModal);\n      });\n    });\n  };\n\n  handleError = () => {\n    this.setState({busy: false, error: true});\n  };\n\n  handleU2fTap = async (data: Parameters<OnTapProps>[0]) => {\n    this.setState({busy: true});\n\n    const {api} = this.props;\n\n    try {\n      await api.requestPromise('/auth/', {method: 'PUT', data});\n      this.handleSuccess();\n    } catch (err) {\n      this.setState({busy: false});\n      // u2fInterface relies on this\n      throw err;\n    }\n  };\n\n  renderBodyContent() {\n    const {superuser} = this.props;\n    const {error} = this.state;\n    const user = ConfigStore.get('user');\n\n    if (!user.hasPasswordAuth) {\n      return (\n        <React.Fragment>\n          <TextBlock>{t('You will need to reauthenticate to continue.')}</TextBlock>\n          <Button\n            priority=\"primary\"\n            href={`/auth/login/?next=${encodeURIComponent(location.pathname)}`}\n          >\n            {t('Continue')}\n          </Button>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <StyledTextBlock>\n          {superuser\n            ? t(\n                'You are attempting to access a resource that requires superuser access, please re-authenticate as a superuser.'\n              )\n            : t('Help us keep your account safe by confirming your identity.')}\n        </StyledTextBlock>\n\n        {error && (\n          <StyledAlert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            {t('Incorrect password')}\n          </StyledAlert>\n        )}\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/auth/\"\n          submitLabel={t('Confirm Password')}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={this.handleError}\n          hideFooter={!user.hasPasswordAuth}\n          resetOnError\n        >\n          <StyledInputField\n            type=\"password\"\n            inline={false}\n            label={t('Password')}\n            name=\"password\"\n            autoFocus\n            flexibleControlStateSize\n          />\n          <U2fContainer displayMode=\"sudo\" onTap={this.handleU2fTap} />\n        </Form>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body} = this.props;\n\n    return (\n      <React.Fragment>\n        <Header closeButton>{t('Confirm Password to Continue')}</Header>\n        <Body>{this.renderBodyContent()}</Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(withApi(SudoModal));\nexport {SudoModal};\n\nconst StyledTextBlock = styled(TextBlock)`\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledInputField = styled(InputField)`\n  padding-left: 0;\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n","import * as React from 'react';\nimport * as Sentry from '@sentry/react';\nimport u2f from 'u2f-api';\n\nimport {t, tct} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport {ChallengeData} from 'app/types';\n\ntype TapParams = {\n  response: string;\n  challenge: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  silentIfUnsupported: boolean;\n  onTap: ({response, challenge}: TapParams) => Promise<void>;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  responseElement: HTMLInputElement | null;\n  formElement: HTMLFormElement | null;\n  challengeElement: HTMLInputElement | null;\n  isSupported: boolean | null;\n  hasBeenTapped: boolean;\n  deviceFailure: string | null;\n};\n\nclass U2fInterface extends React.Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n  };\n\n  async componentDidMount() {\n    const supported = await u2f.isSupported();\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    if (supported) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  invokeU2fFlow() {\n    let promise: Promise<u2f.SignResponse | u2f.RegisterResponse>;\n\n    if (this.props.flowMode === 'sign') {\n      promise = u2f.sign(this.props.challengeData.authenticateRequests);\n    } else if (this.props.flowMode === 'enroll') {\n      const {registerRequests, authenticateRequests} = this.props.challengeData;\n      promise = u2f.register(registerRequests, authenticateRequests);\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = JSON.stringify(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n        });\n      });\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already in use.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                '[p1:The Sentry server administrator modified the ' +\n                  'device registrations.]' +\n                  '[p2:You need to remove and re-add the device to continue ' +\n                  'using your U2F device. Use a different sign-in method or ' +\n                  'contact [support] for assistance.]',\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure ? ' device-failure' : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default U2fInterface;\n","import {Component} from 'react';\n\nimport {t} from 'app/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = U2fInterface['props'];\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode: 'signin' | 'enroll' | 'sudo';\n};\n\nclass U2fSign extends Component<Props> {\n  static defaultProps = {\n    displayMode: 'signin',\n  };\n\n  render() {\n    const {displayMode, ...props} = this.props;\n    const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n    return (\n      <U2fInterface\n        {...props}\n        silentIfUnsupported={displayMode === 'sudo'}\n        flowMode={flowMode}\n      >\n        <p>{MESSAGES[displayMode] || null}</p>\n      </U2fInterface>\n    );\n  }\n}\n\nexport default U2fSign;\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n"],"sourceRoot":""}