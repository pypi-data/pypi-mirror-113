{"version":3,"sources":["webpack:///./app/components/events/groupingInfo/groupingConfigSelect.tsx","webpack:///./app/components/events/groupingInfo/utils.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentChildren.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentFrames.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentStacktrace.tsx","webpack:///./app/components/events/groupingInfo/groupingComponent.tsx","webpack:///./app/components/events/groupingInfo/groupingVariant.tsx","webpack:///./app/components/events/groupingInfo/index.tsx"],"names":["GroupingConfigSelect","configs","this","renderBody","props","configId","eventConfigId","onSelect","options","state","map","id","hidden","value","label","GroupingConfigItem","isHidden","isActive","items","isOpen","title","t","StyledDropdownButton","size","AsyncComponent","DropdownButton","hasNonContributingComponent","component","contributes","values","isObject","groupingComponentFilter","showNonContributing","hint","length","GroupingComponentChildren","Fragment","filter","idx","GroupingComponentListItem","GroupingValue","valueType","name","JSON","stringify","GroupingComponentFrames","collapsed","maxVisibleItems","isCollapsable","item","index","ToggleCollapse","priority","icon","onClick","setState","tct","numberOfFrames","React","Button","space","p","theme","linkColor","GroupingComponentStacktrace","frameGroups","forEach","key","v","sort","a","b","localeCompare","join","lastGroup","data","push","group","GroupingComponent","shouldInlineValue","every","shouldInlineComponentValue","GroupingComponentListItems","GroupingComponentWrapper","isContributing","GroupingHint","GroupingComponentList","isInline","innerBorder","fontSizeSmall","textColor","addFingerprintInfo","variant","matched_rule","TextWithQuestionTooltip","position","client_values","GroupVariant","showGroupingConfig","hash","Hash","hashMismatch","type","EventGroupVariantType","config","GroupingTree","VariantTitle","ContributionIcon","description","split","i","capitalize","ContributingToggle","merged","active","barId","handleHideNonContributing","handleShowNonContributing","getVariantData","VariantWrapper","Header","renderTitle","renderContributionToggle","d","subject","isContextData","isSorted","breakpoints","fontSizeMedium","isCircled","color","ButtonBar","overflowEllipsis","EventGroupingInfo","configOverride","selection","reloadData","organization","event","projectId","path","slug","groupInfo","groupedBy","Object","toLowerCase","SummaryGroupedBy","groupingConfig","GroupConfigWrapper","handleConfigSelect","loading","variants","renderGroupConfigSelect","VariantDivider","renderGroupInfoSummary","actions","ToggleButton","toggle","renderGroupInfo","subText","text","familyMono","border","withOrganization"],"mappings":"mtFAqBMA,E,ijBACJ,WACE,mFAEEC,QAAS,O,0BAIb,WACE,MAAO,CAAC,CAAC,UAAW,yB,2BAGtB,WACE,OAAOC,KAAKC,e,wBAGd,WACE,MAA4CD,KAAKE,MAA1CC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,SAG1BC,EAFYN,KAAKO,MAAhBR,QAEiBS,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,OAAN,MAAmB,CAC7CC,MAAOF,EACPG,OACE,QAACC,GAAD,CAAoBC,SAAUJ,EAAQK,SAAUN,IAAOL,EAAvD,SACGK,QAKP,OACE,QAAC,IAAD,CAAsBJ,SAAUA,EAAUW,MAAOV,EAAjD,SACG,gBAAEW,EAAF,EAAEA,OAAF,OACC,QAAC,IAAD,CAASC,OAAOC,OAAE,wDAAlB,UACE,QAACC,EAAD,CAAsBH,OAAQA,EAAQI,KAAK,QAA3C,UACE,QAACR,GAAD,CAAoBE,SAAUX,IAAkBD,EAAhD,SACGA,e,GAnCkBmB,KA6C7BF,GAAuB,OAAOG,IAAP,qBAAH,+CAI1B,I,y7BClEO,SAASC,EAA4BC,GAC1C,GAAKA,YAAWC,YACd,OAAO,EAF6E,Q,25BAAA,CAIlED,EAAUE,QAJwD,IAItF,2BAAsC,KAA3BhB,EAA2B,QACpC,GAAIiB,IAASjB,IAAUa,EAA4Bb,GACjD,OAAO,GAN2E,8BAStF,OAAO,EAOF,SAASkB,EACdlB,EACAmB,GAEA,GAAIF,IAASjB,GAAQ,CAEnB,IAAKA,EAAMe,cAAgBf,EAAMoB,MAAgC,IAAxBpB,EAAMgB,OAAOK,OACpD,OAAO,EAGT,IAAKF,IAAwBnB,EAAMe,YACjC,OAAO,EAIX,OAAO,E,mOCnBT,IAAMO,EAA4B,SAAC,GAA4C,IAA3CR,EAA2C,EAA3CA,UAAWK,EAAgC,EAAhCA,oBAC7C,OACE,QAAC,EAAAI,SAAD,UACIT,EAAUE,OACTQ,QAAO,SAAAxB,GAAK,OAAIkB,EAAwBlB,EAAOmB,MAC/CtB,KAAI,SAACG,EAAOyB,GAAR,OACH,QAACC,EAAD,UACGT,IAASjB,IACR,QAAC,GAAD,CACEc,UAAWd,EACXmB,oBAAqBA,KAGvB,QAACQ,GAAD,CAAeC,UAAWd,EAAUe,MAAQf,EAAUhB,GAAtD,SACoB,iBAAVE,GAAuC,iBAAVA,EACjCA,EACA8B,KAAKC,UAAU/B,EAAO,KAAM,MAVNyB,SANpCH,E,wCAyBN,Q,ICnBMU,E,wnBAKW,CACbC,WAAW,I,uCAGb,WAAS,WACP,EAAiC5C,KAAKE,MAA/Bc,EAAP,EAAOA,MAAO6B,EAAd,EAAcA,gBACPD,EAAa5C,KAAKO,MAAlBqC,UACDE,EAAgB9B,EAAMgB,OAASa,EAErC,OACE,QAAC,WAAD,WACG7B,EAAMR,KAAI,SAACuC,EAAMC,GAChB,OAAKJ,GAAaI,EAAQH,GAEtB,QAACR,EAAD,CAA2BS,cAAeA,EAA1C,SACGC,GAD2DC,GAM9DA,IAAUH,GAEV,QAACR,EAAD,WACE,QAACY,EAAD,CACE5B,KAAK,QACL6B,SAAS,OACTC,MAAM,QAAC,KAAD,CAAS9B,KAAK,QACpB+B,QAAS,kBAAM,EAAKC,SAAS,CAACT,WAAW,KAJ3C,UAMGU,QAAI,iCAAkC,CACrCC,eAAgBvC,EAAMgB,OAASa,OARLG,GAe7B,SAGPJ,GAAa5B,EAAMgB,OAASa,IAC5B,QAACR,EAAD,WACE,QAACY,EAAD,CACE5B,KAAK,QACL6B,SAAS,OACTC,MAAM,QAAC,KAAD,CAAc9B,KAAK,QACzB+B,QAAS,kBAAM,EAAKC,SAAS,CAACT,WAAW,KAJ3C,UAMGU,QAAI,qCAAsC,CACzCC,eAAgBvC,EAAMgB,OAASa,e,GAtDTW,aAAhCb,E,8CAAAA,E,eACgC,CAClCE,gBAAiB,IA8DrB,IAAMI,GAAiB,OAAOQ,KAAP,oBAAH,WACRC,OAAM,IADE,aAET,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,YAFJ,KAKpB,ICzEMC,EAA8B,SAAC,GAA4C,IAEvEC,EAF4BtC,EAA2C,EAA3CA,UAAWK,EAAgC,EAAhCA,oBAyB/C,OACE,QAAC,EAAAI,SAAD,WAxBM6B,EAA4B,GAEjCtC,EAAUE,OACRQ,QAAO,SAAAxB,GAAK,OAAIkB,EAAwBlB,EAAOmB,MAC/CkC,SAAQ,SAAArD,GACP,IAAMsD,EAAOtD,EAAMgB,OAChBQ,QAAO,SAAA+B,GAAC,OAAIrC,EAAwBqC,EAAGpC,MACvCtB,KAAI,SAAA0D,GAAC,OAAIA,EAAEzD,MACX0D,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC/BE,KAAK,IAEFC,EAAYT,EAAYA,EAAY/B,OAAS,IAE/CwC,aAAA,EAAAA,EAAWP,OAAQA,EACrBO,EAAUC,KAAKC,KAAK/D,GAEpBoD,EAAYW,KAAK,CAACT,MAAKQ,KAAM,CAAC9D,QAI7BoD,GAKavD,KAAI,SAACmE,EAAO3B,GAAR,OACpB,QAAC,EAAD,CAEEhC,MAAO2D,EAAMF,KAAKjE,KAAI,SAAC0D,EAAG9B,GAAJ,OACpB,QAAC,GAAD,CAEEX,UAAWyC,EACXpC,oBAAqBA,GAFhBM,OAHJY,SA7BTc,E,0CA2CN,QC/CMc,EAAoB,SAAC,GAA4C,IAA3CnD,EAA2C,EAA3CA,UAAWK,EAAgC,EAAhCA,oBAC/B+C,EJCD,SAAoCpD,GACzC,OAAQA,EAAUE,OAAiCmD,OAAM,SAAAnE,GAAK,OAAKiB,IAASjB,MIFlDoE,CAA2BtD,GAE/CuD,EACa,eAAjBvD,EAAUhB,GACNqD,EACA7B,EAEN,OACE,QAACgD,GAAD,CAA0BC,eAAgBzD,EAAUC,YAApD,WACE,0BACGD,EAAUe,MAAQf,EAAUhB,GAC5BgB,EAAUM,OAAQ,QAACoD,GAAD,sBAAoB1D,EAAUM,KAA9B,WAGrB,QAACqD,EAAD,CAAuBC,SAAUR,EAAjC,UACE,QAACG,EAAD,CACEvD,UAAWA,EACXK,oBAAqBA,UAlBzB8C,E,gCAyBN,IAAMQ,GAAwB,OAAO,KAAP,sBAAH,sDAMZ,SAAAzB,GAAC,OAAKA,EAAE0B,SAAW,SAAW,UANlB,MAUdhD,GAA4B,OAAO,KAAP,sBAAH,qBAE1BqB,OAAM,KAFoB,OAETA,OAAM,KAFG,KAEMA,OAAM,KAFZ,KAIlC,SAAAC,GAAC,OACDA,EAAEb,eAAF,uCAEyBa,EAAEC,MAAM0B,YAFjC,gCAGe5B,OAAM,KAHrB,aAG8BA,OAAM,GAHpC,iCAIgBA,OAAM,IAJtB,WALkC,KAazBpB,IAAgB,OAAO,OAAP,sBAAH,gCAEdoB,OAAM,KAFQ,KAECA,OAAM,IAFP,KAEeA,OAAM,KAFrB,iBAGX,SAAAC,GAAC,OAAIA,EAAEC,MAAM2B,gBAHF,eAIX7B,OAAM,KAJK,+CAMf,SAAAC,GAAC,OAAIA,EAAEC,MAAM4B,YANE,KAQtB,gBAAEjD,EAAF,EAAEA,UAAF,OACe,aAAdA,GAA0C,WAAdA,IAA7B,gDAGS,SAAAoB,GAAC,OAAIA,EAAEC,MAAM4B,YAHtB,WATsB,KAgBpBP,IAA2B,OAAO,MAAP,sBAAH,UACnB,SAAAtB,GAAC,OAAKA,EAAEuB,eAAiB,KAAOvB,EAAEC,MAAM4B,YADrB,IAG1BlD,GAH0B,uBAQxB6C,IAAe,OAAO,QAAP,sBAAH,2CAIlB,K,+lBC7DA,SAASM,GAAmBhB,EAAmBiB,GACzCA,EAAQC,cACVlB,EAAKC,KAAK,EACRvD,OAAE,qBACF,QAACyE,GAAD,WACGF,EAAQC,cACT,QAAC,IAAD,CACEtE,KAAK,KACLwE,SAAS,MACT3E,OAAOC,OAAE,0EALgB,UAU7BuE,EAAQ/D,QACV8C,EAAKC,KAAK,EAACvD,OAAE,sBAAuBuE,EAAQ/D,SAE1C+D,EAAQI,eACVrB,EAAKC,KAAK,EACRvD,OAAE,8BACF,QAACyE,GAAD,WACGF,EAAQI,eACT,QAAC,IAAD,CACEzE,KAAK,KACLwE,SAAS,MACT3E,OAAOC,OACL,+FANuB,U,IAc7B4E,G,wnBACW,CACbjE,qBAAqB,K,+CAGK,WAC1B,EAAKuB,SAAS,CAACvB,qBAAqB,Q,+CAGV,WAC1B,EAAKuB,SAAS,CAACvB,qBAAqB,O,+CAGtC,WAAiE,QAG3DL,EAFJ,EAAsCzB,KAAKE,MAApCwF,EAAP,EAAOA,QAASM,EAAhB,EAAgBA,mBACVvB,EAAoB,GAG1B,IAAKzE,KAAKO,MAAMuB,qBAAwC,OAAjB4D,EAAQO,KAC7C,MAAO,CAACxB,EAAMhD,GAwBhB,OArBqB,OAAjBiE,EAAQO,MACVxB,EAAKC,KAAK,EACRvD,OAAE,SACF,QAACyE,GAAD,YACE,QAACM,GAAD,UAAOR,EAAQO,QACf,QAAC,IAAD,CACE5E,KAAK,KACLwE,SAAS,MACT3E,OAAOC,OAAE,sDALgB,UAW7BuE,EAAQS,cACV1B,EAAKC,KAAK,EACRvD,OAAE,kBACFA,OAAE,qEAIEuE,EAAQU,MACd,KAAKC,eACH5E,EAAYiE,EAAQjE,UACpBgD,EAAKC,KAAK,EACRvD,OAAE,SACF,QAACyE,GAAD,WACGF,EAAQU,MACT,QAAC,IAAD,CACE/E,KAAK,KACLwE,SAAS,MACT3E,OAAOC,OACL,wEANuB,UAW3B6E,GAAkB,UAAIN,EAAQY,cAAZ,OAAI,EAAgB7F,IACxCgE,EAAKC,KAAK,EAACvD,OAAE,mBAAoBuE,EAAQY,OAAO7F,KAElD,MACF,KAAK4F,wBACH5B,EAAKC,KAAK,EACRvD,OAAE,SACF,QAACyE,GAAD,WACGF,EAAQU,MACT,QAAC,IAAD,CACE/E,KAAK,KACLwE,SAAS,MACT3E,OAAOC,OAAE,sEALgB,UAS/BsE,GAAmBhB,EAAMiB,GACzB,MACF,KAAKW,sBACH5E,EAAYiE,EAAQjE,UACpBgD,EAAKC,KAAK,EACRvD,OAAE,SACF,QAACyE,GAAD,WACGF,EAAQU,MACT,QAAC,IAAD,CACE/E,KAAK,KACLwE,SAAS,MACT3E,OAAOC,OACL,0FANuB,UAW/BsE,GAAmBhB,EAAMiB,GACrBM,GAAkB,UAAIN,EAAQY,cAAZ,OAAI,EAAgB7F,IACxCgE,EAAKC,KAAK,EAACvD,OAAE,mBAAoBuE,EAAQY,OAAO7F,KAmBtD,OAZIgB,GACFgD,EAAKC,KAAK,EACRvD,OAAE,aACF,QAACoF,GAAD,WACE,QAAC,GAAD,CACE9E,UAAWA,EACXK,oBAAqB9B,KAAKO,MAAMuB,uBAHjBL,EAAUhB,MAS1B,CAACgE,EAAMhD,K,yBAGhB,WAAc,QAIRP,EAHGwE,EAAW1F,KAAKE,MAAhBwF,QACDR,EAAkC,OAAjBQ,EAAQO,KAG/B,GAAIf,EACFhE,GAAQC,OAAE,4BACL,OACCY,EAAI,UAAG2D,EAAQjE,iBAAX,aAAG,EAAmBM,KAE9Bb,EADEa,GACMZ,OAAE,+BAAgCY,IAElCZ,OAAE,4BAId,OACE,QAAC,IAAD,CAASD,MAAOA,EAAhB,UACE,QAACsF,GAAD,YACE,QAACC,GAAD,CAAkBvB,eAAgBA,KACjC/D,OAAE,MAAO,IAFZ,oBAGGuE,EAAQgB,mBAHX,aAGG,EACGC,MAAM,KACPnG,KAAI,SAAAoG,GAAC,OAAIC,IAAWD,MACpBrC,KAAK,YANV,SAMkBpD,OAAE,kB,sCAM1B,WACE,IAAOW,EAAuB9B,KAAKO,MAA5BuB,oBAEP,OACE,QAACgF,GAAD,CAAoBC,QAAM,EAACC,OAAQlF,EAAsB,MAAQ,WAAjE,WACE,QAAC,KAAD,CAAQmF,MAAM,WAAW5F,KAAK,SAAS+B,QAASpD,KAAKkH,0BAArD,UACG/F,OAAE,0BAEL,QAAC,KAAD,CAAQ8F,MAAM,MAAM5F,KAAK,SAAS+B,QAASpD,KAAKmH,0BAAhD,UACGhG,OAAE,qB,oBAMX,WACE,MAA0BnB,KAAKoH,iBAA/B,eAAO3C,EAAP,KAAahD,EAAb,KAEA,OACE,QAAC4F,GAAD,YACE,QAACC,GAAD,WACGtH,KAAKuH,cACL/F,EAA4BC,IAAczB,KAAKwH,+BAGlD,QAAC,IAAD,CACE/C,KAAMA,EAAKjE,KAAI,SAAAiH,GAAC,MAAK,CACnBxD,IAAKwD,EAAE,GACPC,QAASD,EAAE,GACX9G,MAAO8G,EAAE,OAEXE,eAAa,EACbC,UAAU,W,GAlLOpE,aAArBuC,G,2BAyLN,IAAMsB,IAAiB,OAAO,MAAP,qBAAH,kBACD3D,OAAM,GADL,KAId4D,IAAS,OAAO,MAAP,qBAAH,gFAIO5D,OAAM,GAJb,wBAKW,SAAAC,GAAC,OAAIA,EAAEC,MAAMiE,YAAY,KALpC,qBAUNrB,IAAe,OAAO,KAAP,qBAAH,cACH,SAAA7C,GAAC,OAAIA,EAAEC,MAAMkE,iBADV,8CAOZrB,IAAmB,QAAO,gBAAEvB,EAAF,EAAEA,eAAmBvB,GAArB,oBAC9BuB,GACE,QAAC,KAAD,IAAe7D,KAAK,KAAK0G,WAAS,EAACC,MAAM,YAAerE,KAExD,QAAC,KAAD,IAAWtC,KAAK,KAAK0G,WAAS,EAACC,MAAM,UAAarE,MAJ7B,qBAAH,iBAOJD,OAAM,GAPF,KAUhBoD,IAAqB,OAAOmB,KAAP,qBAAH,gDAED,SAAAtE,GAAC,OAAIA,EAAEC,MAAMiE,YAAY,KAFxB,iBAGNnE,OAAM,IAHA,MAOlB6C,IAAe,OAAO,MAAP,qBAAH,UACP,SAAA5C,GAAC,OAAIA,EAAEC,MAAM4B,YADN,KAIZI,IAA0B,OAAO,MAAP,qBAAH,2FAIflC,OAAM,IAJS,KAOvBwC,IAAO,OAAO,OAAP,qBAAH,uBACa,SAAAvC,GAAC,OAAIA,EAAEC,MAAMiE,YAAY,KADtC,KAEJK,IAFI,kBAOV,M,6kBCnRMC,G,0nBAoBK,WACP,EAAK9E,UAAS,SAAA9C,GAAK,MAAK,CACtBU,QAASV,EAAMU,OACfmH,eAAgB7H,EAAMU,OAAS,KAAOV,EAAM6H,uB,wCAI3B,SAAAC,GACnB,EAAKhF,SAAS,CAAC+E,eAAgBC,EAAU1H,QAAQ,kBAAM,EAAK2H,mB,6CA3B9D,WAA2D,MACzD,EAAyCtI,KAAKE,MAAvCqI,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,MAAOC,EAA5B,EAA4BA,UAExBC,EAAO,aAAH,OAAgBH,EAAaI,KAA7B,YAAqCF,EAArC,mBAAyDD,EAAM/H,GAA/D,mBAKR,OAJA,UAAIT,KAAKO,aAAT,OAAI,EAAY6H,iBACdM,EAAO,GAAH,OAAMA,EAAN,mBAAqB1I,KAAKO,MAAM6H,iBAG/B,CAAC,CAAC,YAAaM,M,6BAGxB,WACE,qFAEEzH,QAAQ,EACRmH,eAAgB,S,oCAepB,WACE,IAAOQ,EAAa5I,KAAKO,MAAlBqI,UAEP,IAAKA,EACH,OAAO,KAGT,IAAMC,EAAYC,OAAOnH,OAAOiH,GAC7BzG,QAAO,SAAAuD,GAAO,OAAqB,OAAjBA,EAAQO,MAAyC,OAAxBP,EAAQgB,eACnDlG,KAAI,SAAAkF,GAAO,OAAIA,EAAQgB,eACvBvC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAG2E,cAAczE,cAAcD,EAAG0E,kBACjDxE,KAAK,MAER,OACE,QAACyE,GAAD,CAAkB,eAAa,uBAA/B,qBAA2D7H,OAAE,cAA7D,YACE0H,IAAa1H,OAAE,WADjB,S,qCAMJ,WACE,IAAOiH,EAAkBpI,KAAKO,MAAvB6H,eACAI,EAASxI,KAAKE,MAAdsI,MAEDrI,EAAWiI,UAAkBI,EAAMS,eAAexI,GAExD,OACE,QAACyI,GAAD,WACE,QAAC,EAAD,CACE9I,cAAeoI,EAAMS,eAAexI,GACpCN,SAAUA,EACVE,SAAUL,KAAKmJ,yB,6BAMvB,WACE,MAA6BnJ,KAAKO,MAA3BqI,EAAP,EAAOA,UAAWQ,EAAlB,EAAkBA,QACXpD,EAAsBhG,KAAKE,MAA3B8F,mBAEDqD,EAAWT,EACbE,OAAOnH,OAAOiH,GAAWzE,MAAK,SAACC,EAAGC,GAAJ,mBAC5BD,EAAE6B,OAAS5B,EAAE4B,MACR,EADL,oBAEI7B,EAAEsC,mBAFN,aAEI,EACIqC,cACDzE,cAFH,oBAEiBD,EAAEqC,mBAFnB,aAEiB,EAAeqC,qBAFhC,QAEiD,WAJrD,QAI4D,KAE9D,GAEJ,OACE,QAAC,EAAA7G,SAAD,WACG8D,GAAsBhG,KAAKsJ,0BAE3BF,GACC,QAAC,IAAD,IAEAC,EAAS7I,KAAI,SAACkF,EAAS1C,GAAV,OACX,QAAC,EAAAd,SAAD,YACE,QAAC,GAAD,CAAcwD,QAASA,EAASM,mBAAoBA,IACnDhD,EAAQqG,EAASrH,OAAS,IAAK,QAACuH,GAAD,MAFnB7D,EAAQzB,a,2BAUjC,WACE,OAAOjE,KAAKC,e,wBAGd,WACE,IAAOgB,EAAUjB,KAAKO,MAAfU,OAEDC,GACJ,QAAC,EAAAgB,SAAD,YACGf,OAAE,+BACDF,GAAUjB,KAAKwJ,4BAIfC,GACJ,QAACC,GAAD,CAActG,QAASpD,KAAK2J,OAAQzG,SAAS,OAA7C,SACGjC,GAASE,OAAE,iBAAkBA,OAAE,kBAIpC,OACE,QAAC,IAAD,CAAkBiF,KAAK,gBAAgBlF,MAAOA,EAAOuI,QAASA,EAA9D,SACGxI,GAAUjB,KAAK4J,wB,GA1HQtI,KAgI1B0H,IAAmB,OAAO,QAAP,qBAAH,uBACC,SAAArF,GAAC,OAAIA,EAAEC,MAAMiE,YAAY,KAD1B,wCAOhB6B,IAAe,OAAOjG,KAAP,qBAAH,0BAEP,SAAAE,GAAC,OAAIA,EAAEC,MAAMiG,UAFN,2BAKL,SAAAlG,GAAC,OAAIA,EAAEC,MAAM4B,YALR,MASZ0D,IAAqB,OAAO,MAAP,qBAAH,kBACLxF,OAAM,KADD,iBAEPA,OAAM,GAFC,KAKX7C,IAAqB,OAAO,OAAP,qBAAH,gBAId,SAAA8C,GAAC,OAAIA,EAAEC,MAAMkG,KAAKC,aAJJ,aAKlB,SAAApG,GAAC,OAAKA,EAAE7C,SAAW,GAAM,OALP,iBAMd,SAAA6C,GAAC,OAAKA,EAAE5C,SAAW,OAAS,OANd,eAOhB,SAAA4C,GAAC,OAAIA,EAAEC,MAAM2B,gBAPG,KAUzBgE,IAAiB,OAAO,KAAP,qBAAH,gBACH7F,OAAM,GADH,0BAEM,SAAAC,GAAC,OAAIA,EAAEC,MAAMoG,SAFnB,KAKpB,IAAeC,OAAiB9B","file":"chunks/app_components_events_groupingInfo_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport {EventGroupingConfig} from 'app/types';\n\nimport {GroupingConfigItem} from '.';\n\ntype Props = AsyncComponent['props'] & {\n  eventConfigId: string;\n  configId: string;\n  onSelect: (selection: any) => void;\n};\n\ntype State = AsyncComponent['state'] & {\n  configs: EventGroupingConfig[];\n};\n\nclass GroupingConfigSelect extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      configs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['configs', '/grouping-configs/']];\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {configId, eventConfigId, onSelect} = this.props;\n    const {configs} = this.state;\n\n    const options = configs.map(({id, hidden}) => ({\n      value: id,\n      label: (\n        <GroupingConfigItem isHidden={hidden} isActive={id === eventConfigId}>\n          {id}\n        </GroupingConfigItem>\n      ),\n    }));\n\n    return (\n      <DropdownAutoComplete onSelect={onSelect} items={options}>\n        {({isOpen}) => (\n          <Tooltip title={t('Click here to experiment with other grouping configs')}>\n            <StyledDropdownButton isOpen={isOpen} size=\"small\">\n              <GroupingConfigItem isActive={eventConfigId === configId}>\n                {configId}\n              </GroupingConfigItem>\n            </StyledDropdownButton>\n          </Tooltip>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n}\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  font-weight: inherit;\n`;\n\nexport default GroupingConfigSelect;\n","import isObject from 'lodash/isObject';\n\nimport {EventGroupComponent} from 'app/types';\n\nexport function hasNonContributingComponent(component: EventGroupComponent | undefined) {\n  if (!component?.contributes) {\n    return true;\n  }\n  for (const value of component.values) {\n    if (isObject(value) && hasNonContributingComponent(value)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function shouldInlineComponentValue(component: EventGroupComponent) {\n  return (component.values as EventGroupComponent[]).every(value => !isObject(value));\n}\n\nexport function groupingComponentFilter(\n  value: EventGroupComponent | string,\n  showNonContributing: boolean\n) {\n  if (isObject(value)) {\n    // no point rendering such nodes at all, we never show them\n    if (!value.contributes && !value.hint && value.values.length === 0) {\n      return false;\n    }\n    // non contributing values are otherwise optional\n    if (!showNonContributing && !value.contributes) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {Fragment} from 'react';\nimport isObject from 'lodash/isObject';\n\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponent, {\n  GroupingComponentListItem,\n  GroupingValue,\n} from './groupingComponent';\nimport {groupingComponentFilter} from './utils';\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponentChildren = ({component, showNonContributing}: Props) => {\n  return (\n    <Fragment>\n      {(component.values as EventGroupComponent[])\n        .filter(value => groupingComponentFilter(value, showNonContributing))\n        .map((value, idx) => (\n          <GroupingComponentListItem key={idx}>\n            {isObject(value) ? (\n              <GroupingComponent\n                component={value}\n                showNonContributing={showNonContributing}\n              />\n            ) : (\n              <GroupingValue valueType={component.name || component.id}>\n                {typeof value === 'string' || typeof value === 'number'\n                  ? value\n                  : JSON.stringify(value, null, 2)}\n              </GroupingValue>\n            )}\n          </GroupingComponentListItem>\n        ))}\n    </Fragment>\n  );\n};\n\nexport default GroupingComponentChildren;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {IconAdd, IconSubtract} from 'app/icons';\nimport {tct} from 'app/locale';\nimport space from 'app/styles/space';\n\nimport {GroupingComponentListItem} from './groupingComponent';\n\ntype DefaultProps = {\n  maxVisibleItems: number;\n};\n\ntype Props = DefaultProps & {\n  items: React.ReactNode[];\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nclass GroupingComponentFrames extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    maxVisibleItems: 2,\n  };\n\n  state: State = {\n    collapsed: true,\n  };\n\n  render() {\n    const {items, maxVisibleItems} = this.props;\n    const {collapsed} = this.state;\n    const isCollapsable = items.length > maxVisibleItems;\n\n    return (\n      <React.Fragment>\n        {items.map((item, index) => {\n          if (!collapsed || index < maxVisibleItems) {\n            return (\n              <GroupingComponentListItem isCollapsable={isCollapsable} key={index}>\n                {item}\n              </GroupingComponentListItem>\n            );\n          }\n\n          if (index === maxVisibleItems) {\n            return (\n              <GroupingComponentListItem key={index}>\n                <ToggleCollapse\n                  size=\"small\"\n                  priority=\"link\"\n                  icon={<IconAdd size=\"8px\" />}\n                  onClick={() => this.setState({collapsed: false})}\n                >\n                  {tct('show [numberOfFrames] similiar', {\n                    numberOfFrames: items.length - maxVisibleItems,\n                  })}\n                </ToggleCollapse>\n              </GroupingComponentListItem>\n            );\n          }\n\n          return null;\n        })}\n\n        {!collapsed && items.length > maxVisibleItems && (\n          <GroupingComponentListItem>\n            <ToggleCollapse\n              size=\"small\"\n              priority=\"link\"\n              icon={<IconSubtract size=\"8px\" />}\n              onClick={() => this.setState({collapsed: true})}\n            >\n              {tct('collapse [numberOfFrames] similiar', {\n                numberOfFrames: items.length - maxVisibleItems,\n              })}\n            </ToggleCollapse>\n          </GroupingComponentListItem>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst ToggleCollapse = styled(Button)`\n  margin: ${space(0.5)} 0;\n  color: ${p => p.theme.linkColor};\n`;\n\nexport default GroupingComponentFrames;\n","import {Fragment} from 'react';\n\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponent from './groupingComponent';\nimport GroupingComponentFrames from './groupingComponentFrames';\nimport {groupingComponentFilter} from './utils';\n\ntype FrameGroup = {\n  key: string;\n  data: EventGroupComponent[];\n};\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponentStacktrace = ({component, showNonContributing}: Props) => {\n  const getFrameGroups = () => {\n    const frameGroups: FrameGroup[] = [];\n\n    (component.values as EventGroupComponent[])\n      .filter(value => groupingComponentFilter(value, showNonContributing))\n      .forEach(value => {\n        const key = (value.values as EventGroupComponent[])\n          .filter(v => groupingComponentFilter(v, showNonContributing))\n          .map(v => v.id)\n          .sort((a, b) => a.localeCompare(b))\n          .join('');\n\n        const lastGroup = frameGroups[frameGroups.length - 1];\n\n        if (lastGroup?.key === key) {\n          lastGroup.data.push(value);\n        } else {\n          frameGroups.push({key, data: [value]});\n        }\n      });\n\n    return frameGroups;\n  };\n\n  return (\n    <Fragment>\n      {getFrameGroups().map((group, index) => (\n        <GroupingComponentFrames\n          key={index}\n          items={group.data.map((v, idx) => (\n            <GroupingComponent\n              key={idx}\n              component={v}\n              showNonContributing={showNonContributing}\n            />\n          ))}\n        />\n      ))}\n    </Fragment>\n  );\n};\n\nexport default GroupingComponentStacktrace;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponentChildren from './groupingComponentChildren';\nimport GroupingComponentStacktrace from './groupingComponentStacktrace';\nimport {shouldInlineComponentValue} from './utils';\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponent = ({component, showNonContributing}: Props) => {\n  const shouldInlineValue = shouldInlineComponentValue(component);\n\n  const GroupingComponentListItems =\n    component.id === 'stacktrace'\n      ? GroupingComponentStacktrace\n      : GroupingComponentChildren;\n\n  return (\n    <GroupingComponentWrapper isContributing={component.contributes}>\n      <span>\n        {component.name || component.id}\n        {component.hint && <GroupingHint>{` (${component.hint})`}</GroupingHint>}\n      </span>\n\n      <GroupingComponentList isInline={shouldInlineValue}>\n        <GroupingComponentListItems\n          component={component}\n          showNonContributing={showNonContributing}\n        />\n      </GroupingComponentList>\n    </GroupingComponentWrapper>\n  );\n};\n\nconst GroupingComponentList = styled('ul')<{isInline: boolean}>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  &,\n  & > li {\n    display: ${p => (p.isInline ? 'inline' : 'block')};\n  }\n`;\n\nexport const GroupingComponentListItem = styled('li')<{isCollapsable?: boolean}>`\n  padding: 0;\n  margin: ${space(0.25)} 0 ${space(0.25)} ${space(1.5)};\n\n  ${p =>\n    p.isCollapsable &&\n    `\n    border-left: 1px solid ${p.theme.innerBorder};\n    margin: 0 0 -${space(0.25)} ${space(1)};\n    padding-left: ${space(0.5)};\n  `}\n`;\n\nexport const GroupingValue = styled('code')<{valueType: string}>`\n  display: inline-block;\n  margin: ${space(0.25)} ${space(0.5)} ${space(0.25)} 0;\n  font-size: ${p => p.theme.fontSizeSmall};\n  padding: 0 ${space(0.25)};\n  background: rgba(112, 163, 214, 0.1);\n  color: ${p => p.theme.textColor};\n\n  ${({valueType}) =>\n    (valueType === 'function' || valueType === 'symbol') &&\n    `\n    font-weight: bold;\n    color: ${p => p.theme.textColor};\n  `}\n`;\n\nconst GroupingComponentWrapper = styled('div')<{isContributing: boolean}>`\n  color: ${p => (p.isContributing ? null : p.theme.textColor)};\n\n  ${GroupingValue}, button {\n    opacity: 1;\n  }\n`;\n\nconst GroupingHint = styled('small')`\n  font-size: 0.8em;\n`;\n\nexport default GroupingComponent;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport capitalize from 'lodash/capitalize';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport KeyValueList from 'app/components/events/interfaces/keyValueList';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport Tooltip from 'app/components/tooltip';\nimport {IconCheckmark, IconClose} from 'app/icons';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {EventGroupComponent, EventGroupVariant, EventGroupVariantType} from 'app/types';\n\nimport GroupingComponent from './groupingComponent';\nimport {hasNonContributingComponent} from './utils';\n\ntype Props = {\n  variant: EventGroupVariant;\n  showGroupingConfig: boolean;\n};\n\ntype State = {\n  showNonContributing: boolean;\n};\n\ntype VariantData = [string, React.ReactNode][];\n\nfunction addFingerprintInfo(data: VariantData, variant: EventGroupVariant) {\n  if (variant.matched_rule) {\n    data.push([\n      t('Fingerprint rule'),\n      <TextWithQuestionTooltip key=\"type\">\n        {variant.matched_rule}\n        <QuestionTooltip\n          size=\"xs\"\n          position=\"top\"\n          title={t('The server-side fingerprinting rule that produced the fingerprint.')}\n        />\n      </TextWithQuestionTooltip>,\n    ]);\n  }\n  if (variant.values) {\n    data.push([t('Fingerprint values'), variant.values]);\n  }\n  if (variant.client_values) {\n    data.push([\n      t('Client fingerprint values'),\n      <TextWithQuestionTooltip key=\"type\">\n        {variant.client_values}\n        <QuestionTooltip\n          size=\"xs\"\n          position=\"top\"\n          title={t(\n            'The client sent a fingerprint that was overridden by a server-side fingerprinting rule.'\n          )}\n        />\n      </TextWithQuestionTooltip>,\n    ]);\n  }\n}\n\nclass GroupVariant extends React.Component<Props, State> {\n  state: State = {\n    showNonContributing: false,\n  };\n\n  handleShowNonContributing = () => {\n    this.setState({showNonContributing: true});\n  };\n\n  handleHideNonContributing = () => {\n    this.setState({showNonContributing: false});\n  };\n\n  getVariantData(): [VariantData, EventGroupComponent | undefined] {\n    const {variant, showGroupingConfig} = this.props;\n    const data: VariantData = [];\n    let component: EventGroupComponent | undefined;\n\n    if (!this.state.showNonContributing && variant.hash === null) {\n      return [data, component];\n    }\n\n    if (variant.hash !== null) {\n      data.push([\n        t('Hash'),\n        <TextWithQuestionTooltip key=\"hash\">\n          <Hash>{variant.hash}</Hash>\n          <QuestionTooltip\n            size=\"xs\"\n            position=\"top\"\n            title={t('Events with the same hash are grouped together')}\n          />\n        </TextWithQuestionTooltip>,\n      ]);\n    }\n\n    if (variant.hashMismatch) {\n      data.push([\n        t('Hash mismatch'),\n        t('hashing algorithm produced a hash that does not match the event'),\n      ]);\n    }\n\n    switch (variant.type) {\n      case EventGroupVariantType.COMPONENT:\n        component = variant.component;\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t(\n                'Uses a complex grouping algorithm taking event data into account'\n              )}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        if (showGroupingConfig && variant.config?.id) {\n          data.push([t('Grouping Config'), variant.config.id]);\n        }\n        break;\n      case EventGroupVariantType.CUSTOM_FINGERPRINT:\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t('Overrides the default grouping by a custom fingerprinting rule')}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        addFingerprintInfo(data, variant);\n        break;\n      case EventGroupVariantType.SALTED_COMPONENT:\n        component = variant.component;\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t(\n                'Uses a complex grouping algorithm taking event data and a fingerprint into account'\n              )}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        addFingerprintInfo(data, variant);\n        if (showGroupingConfig && variant.config?.id) {\n          data.push([t('Grouping Config'), variant.config.id]);\n        }\n        break;\n      default:\n        break;\n    }\n\n    if (component) {\n      data.push([\n        t('Grouping'),\n        <GroupingTree key={component.id}>\n          <GroupingComponent\n            component={component}\n            showNonContributing={this.state.showNonContributing}\n          />\n        </GroupingTree>,\n      ]);\n    }\n\n    return [data, component];\n  }\n\n  renderTitle() {\n    const {variant} = this.props;\n    const isContributing = variant.hash !== null;\n\n    let title: string;\n    if (isContributing) {\n      title = t('Contributing variant');\n    } else {\n      const hint = variant.component?.hint;\n      if (hint) {\n        title = t('Non-contributing variant: %s', hint);\n      } else {\n        title = t('Non-contributing variant');\n      }\n    }\n\n    return (\n      <Tooltip title={title}>\n        <VariantTitle>\n          <ContributionIcon isContributing={isContributing} />\n          {t('By')}{' '}\n          {variant.description\n            ?.split(' ')\n            .map(i => capitalize(i))\n            .join(' ') ?? t('Nothing')}\n        </VariantTitle>\n      </Tooltip>\n    );\n  }\n\n  renderContributionToggle() {\n    const {showNonContributing} = this.state;\n\n    return (\n      <ContributingToggle merged active={showNonContributing ? 'all' : 'relevant'}>\n        <Button barId=\"relevant\" size=\"xsmall\" onClick={this.handleHideNonContributing}>\n          {t('Contributing values')}\n        </Button>\n        <Button barId=\"all\" size=\"xsmall\" onClick={this.handleShowNonContributing}>\n          {t('All values')}\n        </Button>\n      </ContributingToggle>\n    );\n  }\n\n  render() {\n    const [data, component] = this.getVariantData();\n\n    return (\n      <VariantWrapper>\n        <Header>\n          {this.renderTitle()}\n          {hasNonContributingComponent(component) && this.renderContributionToggle()}\n        </Header>\n\n        <KeyValueList\n          data={data.map(d => ({\n            key: d[0],\n            subject: d[0],\n            value: d[1],\n          }))}\n          isContextData\n          isSorted={false}\n        />\n      </VariantWrapper>\n    );\n  }\n}\n\nconst VariantWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n  }\n`;\n\nconst VariantTitle = styled('h5')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  display: flex;\n  align-items: center;\n`;\n\nconst ContributionIcon = styled(({isContributing, ...p}) =>\n  isContributing ? (\n    <IconCheckmark size=\"sm\" isCircled color=\"green300\" {...p} />\n  ) : (\n    <IconClose size=\"sm\" isCircled color=\"red300\" {...p} />\n  )\n)`\n  margin-right: ${space(1)};\n`;\n\nconst ContributingToggle = styled(ButtonBar)`\n  justify-content: flex-end;\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin-top: ${space(0.5)};\n  }\n`;\n\nconst GroupingTree = styled('div')`\n  color: ${p => p.theme.textColor};\n`;\n\nconst TextWithQuestionTooltip = styled('div')`\n  display: grid;\n  align-items: center;\n  grid-template-columns: max-content min-content;\n  grid-gap: ${space(0.5)};\n`;\n\nconst Hash = styled('span')`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    ${overflowEllipsis};\n    width: 210px;\n  }\n`;\n\nexport default GroupVariant;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport EventDataSection from 'app/components/events/eventDataSection';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {EventGroupInfo, Organization} from 'app/types';\nimport {Event} from 'app/types/event';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport GroupingConfigSelect from './groupingConfigSelect';\nimport GroupVariant from './groupingVariant';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projectId: string;\n  event: Event;\n  showGroupingConfig: boolean;\n};\n\ntype State = AsyncComponent['state'] & {\n  isOpen: boolean;\n  configOverride: string | null;\n  groupInfo: EventGroupInfo;\n};\n\nclass EventGroupingInfo extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, event, projectId} = this.props;\n\n    let path = `/projects/${organization.slug}/${projectId}/events/${event.id}/grouping-info/`;\n    if (this.state?.configOverride) {\n      path = `${path}?config=${this.state.configOverride}`;\n    }\n\n    return [['groupInfo', path]];\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      isOpen: false,\n      configOverride: null,\n    };\n  }\n\n  toggle = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n      configOverride: state.isOpen ? null : state.configOverride,\n    }));\n  };\n\n  handleConfigSelect = selection => {\n    this.setState({configOverride: selection.value}, () => this.reloadData());\n  };\n\n  renderGroupInfoSummary() {\n    const {groupInfo} = this.state;\n\n    if (!groupInfo) {\n      return null;\n    }\n\n    const groupedBy = Object.values(groupInfo)\n      .filter(variant => variant.hash !== null && variant.description !== null)\n      .map(variant => variant.description)\n      .sort((a, b) => a!.toLowerCase().localeCompare(b!.toLowerCase()))\n      .join(', ');\n\n    return (\n      <SummaryGroupedBy data-test-id=\"loaded-grouping-info\">{`(${t('grouped by')} ${\n        groupedBy || t('nothing')\n      })`}</SummaryGroupedBy>\n    );\n  }\n\n  renderGroupConfigSelect() {\n    const {configOverride} = this.state;\n    const {event} = this.props;\n\n    const configId = configOverride ?? event.groupingConfig.id;\n\n    return (\n      <GroupConfigWrapper>\n        <GroupingConfigSelect\n          eventConfigId={event.groupingConfig.id}\n          configId={configId}\n          onSelect={this.handleConfigSelect}\n        />\n      </GroupConfigWrapper>\n    );\n  }\n\n  renderGroupInfo() {\n    const {groupInfo, loading} = this.state;\n    const {showGroupingConfig} = this.props;\n\n    const variants = groupInfo\n      ? Object.values(groupInfo).sort((a, b) =>\n          a.hash && !b.hash\n            ? -1\n            : a.description\n                ?.toLowerCase()\n                .localeCompare(b.description?.toLowerCase() ?? '') ?? 1\n        )\n      : [];\n\n    return (\n      <Fragment>\n        {showGroupingConfig && this.renderGroupConfigSelect()}\n\n        {loading ? (\n          <LoadingIndicator />\n        ) : (\n          variants.map((variant, index) => (\n            <Fragment key={variant.key}>\n              <GroupVariant variant={variant} showGroupingConfig={showGroupingConfig} />\n              {index < variants.length - 1 && <VariantDivider />}\n            </Fragment>\n          ))\n        )}\n      </Fragment>\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {isOpen} = this.state;\n\n    const title = (\n      <Fragment>\n        {t('Event Grouping Information')}\n        {!isOpen && this.renderGroupInfoSummary()}\n      </Fragment>\n    );\n\n    const actions = (\n      <ToggleButton onClick={this.toggle} priority=\"link\">\n        {isOpen ? t('Hide Details') : t('Show Details')}\n      </ToggleButton>\n    );\n\n    return (\n      <EventDataSection type=\"grouping-info\" title={title} actions={actions}>\n        {isOpen && this.renderGroupInfo()}\n      </EventDataSection>\n    );\n  }\n}\n\nconst SummaryGroupedBy = styled('small')`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n    margin: 0 !important;\n  }\n`;\n\nconst ToggleButton = styled(Button)`\n  font-weight: 700;\n  color: ${p => p.theme.subText};\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst GroupConfigWrapper = styled('div')`\n  margin-bottom: ${space(1.5)};\n  margin-top: -${space(1)};\n`;\n\nexport const GroupingConfigItem = styled('span')<{\n  isHidden?: boolean;\n  isActive?: boolean;\n}>`\n  font-family: ${p => p.theme.text.familyMono};\n  opacity: ${p => (p.isHidden ? 0.5 : null)};\n  font-weight: ${p => (p.isActive ? 'bold' : null)};\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst VariantDivider = styled('hr')`\n  padding-top: ${space(1)};\n  border-top: 1px solid ${p => p.theme.border};\n`;\n\nexport default withOrganization(EventGroupingInfo);\n"],"sourceRoot":""}