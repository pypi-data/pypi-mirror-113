{"version":3,"sources":["webpack:///./app/utils/slugify.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/views/projectInstall/newProject.tsx"],"names":["slugify","str","toLowerCase","replace","CreateProject","props","context","e","preventDefault","organization","api","state","projectName","platform","team","dataFragment","slug","shouldCreateCustomRule","name","conditions","actions","actionMatch","frequency","defaultRules","setState","inFlight","Sentry","scope","setExtra","requestPromise","method","data","default_rules","projectData","ruleData","ruleId","id","trackIssueAlertOptionSelectedEvent","ProjectActions","platformKey","nextUrl","browserHistory","error","responseJSON","detail","status","platformId","getPlatformName","query","location","accessTeams","teams","filter","hasAccess","length","undefined","category","this","categoryList","filterTeam","createProjectForm","CreateProjectForm","onSubmit","createProject","FormLabel","t","ProjectNameInput","StyledPlatformIcon","type","placeholder","autoComplete","value","onChange","target","TeamSelectInput","clearable","choice","options","map","label","title","borderless","icon","isCircled","onClick","openCreateTeamModal","onClose","priority","disabled","canSubmitForm","withMargins","every","condition","isDefaultRules","eventKey","eventName","organization_id","project_id","rule_type","custom_rule_id","trackAnalyticsEvent","HelpText","defaultCategory","setPlatform","showOther","updatedData","renderProjectForm","React","withApi","withRouter","withOrganization","withTeams","space","p","theme","background","fontSizeExtraLarge","PlatformIcon","inputStyles","subText","NewProject","Container","className","Content"],"mappings":"oJAEe,SAASA,EAAQC,GAC9B,MAAsB,iBAARA,EAAmBA,EAAIC,cAAcC,QAAQ,IAAK,KAAO,G,4uGCyBzE,IAgCMC,E,wcACJ,WAAYC,EAAOC,GAAS,sBAC1B,cAAMD,EAAOC,IADa,qEA6GZ,WAAMC,GAAN,wHACdA,EAAEC,iBADY,EAEc,EAAKH,MAA1BI,EAFO,EAEPA,aAAcC,EAFP,EAEOA,IAFP,EAGsC,EAAKC,MAAlDC,EAHO,EAGPA,YAAaC,EAHN,EAGMA,SAAUC,EAHhB,EAGgBA,KAAMC,EAHtB,EAGsBA,aAC7BC,EAAQP,EAARO,KAELC,GANY,EAaVF,GAAgB,IAPlBE,uBACAC,EAPY,EAOZA,KACAC,EARY,EAQZA,WACAC,EATY,EASZA,QACAC,EAVY,EAUZA,YACAC,EAXY,EAWZA,UACAC,EAZY,EAYZA,aAGF,EAAKC,SAAS,CAACC,UAAU,IAEpBb,GACHc,MAAiB,SAAAC,GACfA,EAAMC,SAAS,QAAS,EAAKvB,OAC7BsB,EAAMC,SAAS,QAAS,EAAKjB,OAC7Be,KAAsB,sBArBZ,mBA0BchB,EAAImB,eAAJ,iBAA6Bb,EAA7B,YAAqCF,EAArC,cAAuD,CAC/EgB,OAAQ,OACRC,KAAM,CACJb,KAAMN,EACNC,WACAmB,cAAeT,cA/BP,WA0BNU,EA1BM,QAoCRhB,EApCQ,kCAqCaP,EAAImB,eAAJ,oBACRpB,EAAaO,KADL,YACaiB,EAAYjB,KADzB,WAErB,CACEc,OAAQ,OACRC,KAAM,CACJb,OACAC,aACAC,UACAC,cACAC,eA9CI,QAqCJY,EArCI,OAkDVC,EAASD,EAASE,GAlDR,QAoDZ,EAAKC,mCACHJ,EACAV,EACAN,EACAkB,GAGFG,kBAA6BL,GACvBM,EAAc1B,GAAY,QAC1B2B,EA7DM,WA6DQ/B,EAAaO,KA7DrB,YA6D6BiB,EAAYjB,KA7DzC,4BA6DiEuB,EA7DjE,KA8DZE,sBAAoBD,GA9DR,kDAgEZ,EAAKhB,SAAS,CACZC,UAAU,EACViB,MAAO,KAAIC,aAAaC,SAMP,MAAf,KAAIC,QAAiC,MAAf,KAAIA,QAC5BnB,MAAiB,SAAAC,GACfA,EAAMC,SAAS,MAAf,MACAD,EAAMC,SAAS,QAAS,EAAKvB,OAC7BsB,EAAMC,SAAS,QAAS,EAAKjB,OAC7Be,KAAsB,8BA7Ed,0DA7GY,yFA2Nd,SAACoB,GAAD,OACZ,EAAKtB,UAAS,gBAAEZ,EAAF,EAAEA,YAAaC,EAAf,EAAeA,SAAf,MAAqC,CACjDA,SAAUiC,EACVlC,aACGA,GAAgBC,IAAYkC,OAAgBlC,KAAcD,GACvDmC,OAAgBD,IAAe,GAC/BlC,SA9NR,IAAOoC,EAAS3C,EAAM4C,SAAfD,MAEDE,EADU7C,EAAMI,aAAf0C,MACmBC,QAAO,SAACtC,GAAD,OAAgBA,EAAKuC,aAEhDvC,EAAOkC,EAAMlC,MAASoC,EAAYI,QAAUJ,EAAY,GAAGlC,KAC3DH,GAAWkC,OAAgBC,EAAMnC,UAAYmC,EAAMnC,SAAW,GAR1C,OAU1B,EAAKF,MAAQ,CACX+B,OAAO,EACP9B,aAAamC,OAAgBlC,IAAa,GAC1CC,OACAD,WACAY,UAAU,EACVV,kBAAcwC,GAhBU,E,4CAoB5B,WACE,IAtDqBC,EAAD,EAsDbR,EAASS,KAAKpD,MAAM4C,SAApBD,MACP,OAvDqBQ,EAuDER,EAAMQ,SAvDT,UACtBE,WAAkB,qBAAEtB,KAAeoB,YADb,aACtB,EAA8CpB,K,+BAyD9C,WAAoB,WACX3B,EAAgBgD,KAAKpD,MAArBI,aACP,EAAsCgD,KAAK9C,MAApCC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,SAAUC,EAA9B,EAA8BA,KAExBqC,EAAQM,KAAKpD,MAAM8C,MAAMC,QAAO,SAAAO,GAAU,OAAIA,EAAWN,aAEzDO,GACJ,QAACC,EAAD,CAAmBC,SAAUL,KAAKM,cAAlC,WACE,0BACE,QAACC,EAAD,WAAYC,OAAE,mBACd,QAACC,EAAD,YACE,QAACC,EAAD,CAAoBtD,SAAUA,UAAY,MAC1C,iBACEuD,KAAK,OACLlD,KAAK,OACLmD,aAAaJ,OAAE,gBACfK,aAAa,MACbC,MAAO3D,EACP4D,SAAU,SAAAjE,GAAC,OAAI,EAAKiB,SAAS,CAACZ,aAAaZ,OAAQO,EAAEkE,OAAOF,mBAIlE,0BACE,QAACP,EAAD,WAAYC,OAAE,WACd,QAACS,EAAD,YACE,QAAC,IAAD,CACExD,KAAK,cACLyD,WAAW,EACXJ,MAAOzD,EACPuD,aAAaJ,OAAE,iBACfO,SAAU,SAAAI,GAAM,OAAI,EAAKpD,SAAS,CAACV,KAAM8D,EAAOL,SAChDM,QAAS1B,EAAM2B,KAAI,gBAAE9D,EAAF,EAAEA,KAAF,MAAa,CAC9B+D,MAAO,IAAF,OAAM/D,GACXuD,MAAOvD,SAGX,QAAC,IAAD,CAASgE,OAAOf,OAAE,iBAAlB,UACE,QAAC,KAAD,CACEgB,YAAU,EACV,eAAa,cACbb,KAAK,SACLc,MAAM,QAAC,KAAD,CAASC,WAAS,IACxBC,QAAS,kBACPC,yBAAoB,CAClB5E,eACA6E,QAAS,gBAAEtE,EAAF,EAAEA,KAAF,OAAY,EAAKQ,SAAS,CAACV,KAAME,mBAOtD,yBACE,QAAC,KAAD,CACE,eAAa,iBACbuE,SAAS,UACTC,UAAW/B,KAAKgC,cAHlB,UAKGxB,OAAE,yBAMX,OACE,QAAC,WAAD,YACE,QAAC,IAAD,CAAayB,aAAW,EAAxB,UAA0BzB,OAAE,8BAC3BL,O,yBAKP,WAAoB,MAClB,EAAsCH,KAAK9C,MAApCC,EAAP,EAAOA,YAAaE,EAApB,EAAoBA,KAAMW,EAA1B,EAA0BA,SAC1B,EAA6CgC,KAAK9C,MAAMI,cAAgB,GAAjEE,EAAP,EAAOA,uBAAwBE,EAA/B,EAA+BA,WAE/B,OACGM,GACDX,GACgB,KAAhBF,KACEK,IAA0BE,SAA3B,UAA2BA,EAAYwE,aAAvC,aAA2B,OAAAxE,GAAoB,SAAAyE,GAAS,OAAIA,EAAUrB,a,gDAuF3E,SACEtC,EACA4D,EACA5E,EACAkB,GAEA,IAEIJ,EAAsB,CACxB+D,SAAU,kCACVC,UAAW,kCACXC,gBALqBvC,KAAKpD,MAArBI,aAKyB2B,GAC9B6D,WAAYhE,EAAYG,GACxB8D,UAAWL,EACP,UACA5E,EACA,SACA,gBAGSsC,IAAXpB,IACFJ,EAAO,EAAH,KAAOA,GAAP,IAAaoE,eAAgBhE,MAGnCiE,QAAoBrE,K,oBAYtB,WAAS,WACP,EAA0B0B,KAAK9C,MAAxBE,EAAP,EAAOA,SAAU6B,EAAjB,EAAiBA,MAEjB,OACE,QAAC,WAAD,WACGA,IAAS,QAAC,IAAD,CAAO0B,KAAK,QAAZ,SAAqB1B,KAE/B,eAAK,eAAa,kBAAlB,WACE,QAAC,IAAD,CAAagD,aAAW,EAAxB,UAA0BzB,OAAE,2BAC5B,QAACoC,EAAD,WACGpC,OAAE,sOAML,QAAC,IAAD,CAAayB,aAAW,EAAxB,UAA0BzB,OAAE,wBAC5B,QAAC,IAAD,CACEpD,SAAUA,EACVyF,gBAAiB7C,KAAK6C,gBACtBC,YAAa9C,KAAK8C,YAClB9F,aAAcgD,KAAKpD,MAAMI,aACzB+F,WAAS,KAEX,QAAC,IAAD,CACEhC,SAAU,SAAAiC,GACR,EAAKjF,SAAS,CAACT,aAAc0F,OAGhChD,KAAKiD,8B,GAlQYC,aAAtBvG,E,4BAyQN,OAAewG,QAAQC,iBAAWC,QAAiBC,OAAU3G,MAGvDyD,GAAoB,OAAO,OAAP,sBAAH,wEAGTmD,OAAM,GAHG,6BAKVA,OAAM,GALI,yDAOP,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,aAPN,KAUjBnD,GAAY,OAAO,MAAP,sBAAH,cACA,SAAAiD,GAAC,OAAIA,EAAEC,MAAME,qBADb,mBAEIJ,OAAM,GAFV,KAKT7C,GAAqB,OAAOkD,IAAP,sBAAH,iBACNL,OAAM,GADA,KAIlB9C,GAAmB,OAAO,MAAP,uBACrB,SAAA+C,GAAC,OAAIK,OAAYL,KADC,uEAOJ,SAAAA,GAAC,OAAIA,EAAEC,MAAMC,aAPT,gCAchBzC,GAAkB,OAAO,MAAP,sBAAH,iGAMf2B,GAAW,OAAO,IAAP,sBAAH,UACH,SAAAY,GAAC,OAAIA,EAAEC,MAAMK,UADV,qBCzWRC,EAAa,kBACjB,QAACC,EAAD,WACE,eAAKC,UAAU,YAAf,UACE,QAACC,EAAD,YACE,QAAC,IAAD,CAAe3C,MAAM,YACrB,QAAC,EAAD,YALFwC,E,yBAWN,IAAMC,GAAY,OAAO,MAAP,qBAAH,sBAEC,SAAAR,GAAC,OAAIA,EAAEC,MAAMC,aAFd,oBAGKH,OAAM,GAHX,KAMTW,GAAU,OAAO,MAAP,qBAAH,eACGX,OAAM,GADT,KAIb","file":"chunks/app_views_projectInstall_newProject_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import * as React from 'react';\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {PlatformIcon} from 'platformicons';\n\nimport {openCreateTeamModal} from 'app/actionCreators/modal';\nimport ProjectActions from 'app/actions/projectActions';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport PageHeading from 'app/components/pageHeading';\nimport PlatformPicker from 'app/components/platformPicker';\nimport Tooltip from 'app/components/tooltip';\nimport categoryList from 'app/data/platformCategories';\nimport {IconAdd} from 'app/icons';\nimport {t} from 'app/locale';\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\nimport {Organization, Project, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport getPlatformName from 'app/utils/getPlatformName';\nimport slugify from 'app/utils/slugify';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\nimport IssueAlertOptions from 'app/views/projectInstall/issueAlertOptions';\n\nconst getCategoryName = (category?: string) =>\n  categoryList.find(({id}) => id === category)?.id;\n\ntype RuleEventData = {\n  eventKey: string;\n  eventName: string;\n  organization_id: string;\n  project_id: string;\n  rule_type: string;\n  custom_rule_id?: string;\n};\n\ntype Props = WithRouterProps & {\n  api: any;\n  organization: Organization;\n  teams: Team[];\n};\n\ntype PlatformName = React.ComponentProps<typeof PlatformIcon>['platform'];\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\ntype State = {\n  error: boolean;\n  projectName: string;\n  team: string;\n  platform: PlatformName | null;\n  inFlight: boolean;\n  dataFragment: IssueAlertFragment | undefined;\n};\n\nclass CreateProject extends React.Component<Props, State> {\n  constructor(props, context) {\n    super(props, context);\n\n    const {query} = props.location;\n    const {teams} = props.organization;\n    const accessTeams = teams.filter((team: Team) => team.hasAccess);\n\n    const team = query.team || (accessTeams.length && accessTeams[0].slug);\n    const platform = getPlatformName(query.platform) ? query.platform : '';\n\n    this.state = {\n      error: false,\n      projectName: getPlatformName(platform) || '',\n      team,\n      platform,\n      inFlight: false,\n      dataFragment: undefined,\n    };\n  }\n\n  get defaultCategory() {\n    const {query} = this.props.location;\n    return getCategoryName(query.category);\n  }\n\n  renderProjectForm() {\n    const {organization} = this.props;\n    const {projectName, platform, team} = this.state;\n\n    const teams = this.props.teams.filter(filterTeam => filterTeam.hasAccess);\n\n    const createProjectForm = (\n      <CreateProjectForm onSubmit={this.createProject}>\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInput>\n            <StyledPlatformIcon platform={platform ?? ''} />\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('Project name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => this.setState({projectName: slugify(e.target.value)})}\n            />\n          </ProjectNameInput>\n        </div>\n        <div>\n          <FormLabel>{t('Team')}</FormLabel>\n          <TeamSelectInput>\n            <SelectControl\n              name=\"select-team\"\n              clearable={false}\n              value={team}\n              placeholder={t('Select a Team')}\n              onChange={choice => this.setState({team: choice.value})}\n              options={teams.map(({slug}) => ({\n                label: `#${slug}`,\n                value: slug,\n              }))}\n            />\n            <Tooltip title={t('Create a team')}>\n              <Button\n                borderless\n                data-test-id=\"create-team\"\n                type=\"button\"\n                icon={<IconAdd isCircled />}\n                onClick={() =>\n                  openCreateTeamModal({\n                    organization,\n                    onClose: ({slug}) => this.setState({team: slug}),\n                  })\n                }\n              />\n            </Tooltip>\n          </TeamSelectInput>\n        </div>\n        <div>\n          <Button\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!this.canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    );\n\n    return (\n      <React.Fragment>\n        <PageHeading withMargins>{t('Give your project a name')}</PageHeading>\n        {createProjectForm}\n      </React.Fragment>\n    );\n  }\n\n  get canSubmitForm() {\n    const {projectName, team, inFlight} = this.state;\n    const {shouldCreateCustomRule, conditions} = this.state.dataFragment || {};\n\n    return (\n      !inFlight &&\n      team &&\n      projectName !== '' &&\n      (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value))\n    );\n  }\n\n  createProject = async e => {\n    e.preventDefault();\n    const {organization, api} = this.props;\n    const {projectName, platform, team, dataFragment} = this.state;\n    const {slug} = organization;\n    const {\n      shouldCreateCustomRule,\n      name,\n      conditions,\n      actions,\n      actionMatch,\n      frequency,\n      defaultRules,\n    } = dataFragment || {};\n\n    this.setState({inFlight: true});\n\n    if (!projectName) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureMessage('No project name');\n      });\n    }\n\n    try {\n      const projectData = await api.requestPromise(`/teams/${slug}/${team}/projects/`, {\n        method: 'POST',\n        data: {\n          name: projectName,\n          platform,\n          default_rules: defaultRules ?? true,\n        },\n      });\n\n      let ruleId: string | undefined;\n      if (shouldCreateCustomRule) {\n        const ruleData = await api.requestPromise(\n          `/projects/${organization.slug}/${projectData.slug}/rules/`,\n          {\n            method: 'POST',\n            data: {\n              name,\n              conditions,\n              actions,\n              actionMatch,\n              frequency,\n            },\n          }\n        );\n        ruleId = ruleData.id;\n      }\n      this.trackIssueAlertOptionSelectedEvent(\n        projectData,\n        defaultRules,\n        shouldCreateCustomRule,\n        ruleId\n      );\n\n      ProjectActions.createSuccess(projectData);\n      const platformKey = platform || 'other';\n      const nextUrl = `/${organization.slug}/${projectData.slug}/getting-started/${platformKey}/`;\n      browserHistory.push(nextUrl);\n    } catch (err) {\n      this.setState({\n        inFlight: false,\n        error: err.responseJSON.detail,\n      });\n\n      // Only log this if the error is something other than:\n      // * The user not having access to create a project, or,\n      // * A project with that slug already exists\n      if (err.status !== 403 && err.status !== 409) {\n        Sentry.withScope(scope => {\n          scope.setExtra('err', err);\n          scope.setExtra('props', this.props);\n          scope.setExtra('state', this.state);\n          Sentry.captureMessage('Project creation failed');\n        });\n      }\n    }\n  };\n\n  trackIssueAlertOptionSelectedEvent(\n    projectData: Project,\n    isDefaultRules: boolean | undefined,\n    shouldCreateCustomRule: boolean | undefined,\n    ruleId: string | undefined\n  ) {\n    const {organization} = this.props;\n\n    let data: RuleEventData = {\n      eventKey: 'new_project.alert_rule_selected',\n      eventName: 'New Project Alert Rule Selected',\n      organization_id: organization.id,\n      project_id: projectData.id,\n      rule_type: isDefaultRules\n        ? 'Default'\n        : shouldCreateCustomRule\n        ? 'Custom'\n        : 'No Rule',\n    };\n\n    if (ruleId !== undefined) {\n      data = {...data, custom_rule_id: ruleId};\n    }\n\n    trackAnalyticsEvent(data);\n  }\n\n  setPlatform = (platformId: PlatformName | null) =>\n    this.setState(({projectName, platform}: State) => ({\n      platform: platformId,\n      projectName:\n        !projectName || (platform && getPlatformName(platform) === projectName)\n          ? getPlatformName(platformId) || ''\n          : projectName,\n    }));\n\n  render() {\n    const {platform, error} = this.state;\n\n    return (\n      <React.Fragment>\n        {error && <Alert type=\"error\">{error}</Alert>}\n\n        <div data-test-id=\"onboarding-info\">\n          <PageHeading withMargins>{t('Create a new Project')}</PageHeading>\n          <HelpText>\n            {t(\n              `Projects allow you to scope error and transaction events to a specific\n               application in your organization. For example, you might have separate\n               projects for your API server and frontend client.`\n            )}\n          </HelpText>\n          <PageHeading withMargins>{t('Choose a platform')}</PageHeading>\n          <PlatformPicker\n            platform={platform}\n            defaultCategory={this.defaultCategory}\n            setPlatform={this.setPlatform}\n            organization={this.props.organization}\n            showOther\n          />\n          <IssueAlertOptions\n            onChange={updatedData => {\n              this.setState({dataFragment: updatedData});\n            }}\n          />\n          {this.renderProjectForm()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(withRouter(withOrganization(withTeams(CreateProject))));\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px 250px max-content;\n  grid-gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst ProjectNameInput = styled('div')`\n  ${p => inputStyles(p)};\n  padding: 5px 10px;\n  display: flex;\n  align-items: center;\n\n  input {\n    background: ${p => p.theme.background};\n    border: 0;\n    outline: 0;\n    flex: 1;\n  }\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport CreateProject from 'app/views/projectInstall/createProject';\n\nconst NewProject = () => (\n  <Container>\n    <div className=\"container\">\n      <Content>\n        <DocumentTitle title=\"Sentry\" />\n        <CreateProject />\n      </Content>\n    </div>\n  </Container>\n);\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n  margin-bottom: -${space(3)}; /* cleans up a bg gap at bottom */\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n"],"sourceRoot":""}