{"version":3,"sources":["webpack:///./app/utils/performance/segmentExplorer/segmentExplorerQuery.tsx","webpack:///./app/views/performance/transactionSummary/tagExplorer.tsx"],"names":["shouldRefetchData","prevProps","nextProps","aggregateColumn","sort","allTagKeys","tagKey","SegmentExplorerQuery","props","route","getRequestPayload","_props","apiPayload","eventView","getEventsAPIPayload","location","withApi","TAGS_CURSOR_NAME","COLUMN_ORDER","key","field","name","width","column","kind","canSort","filterToField","SpanOperationBreakdownFilter","getTransactionField","currentFilter","projects","platformAndConditionsToPerformanceType","PROJECT_PERFORMANCE_TYPE","TagValue","className","row","tags_value","_TagExplorer","widths","columnIndex","nextColumn","state","Number","COL_WIDTH_UNDEFINED","setState","columns","map","col","i","sortedEventView","tableMeta","index","renderHeadCell","tagValue","organization","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","queryString","decodeScalar","query","conditions","tokenizeSearch","addTagValues","formatString","browserHistory","pathname","String","trim","actionRow","action","searchConditions","removeTag","updateQuery","undefined","parentProps","dataRow","value","transactionName","target","tagsRouteWithQuery","orgSlug","slug","transaction","projectID","project","tags_key","features","hasFeature","to","onClick","onTagKeyClick","allowActions","Actions","handleCellAction","handleTagValueClick","AlignRight","formatPercentage","frequency","localValue","comparison","pct","t","abbreviation","milliseconds","aggregate","sumdelta","renderBodyCell","currentSortKind","currentSortField","this","direction","columnInfo","align","fieldAlignment","type","currentSort","sortForField","isFieldSortable","title","generateSortLink","sortOnField","generateQueryStringObject","onSortClick","tagSort","cursor","tagEventView","clone","fields","tagSorts","fromSorts","withSorts","length","adjustedColumns","c","durationColumn","find","getColumnsWithReplacedDuration","getColumnOrder","columnSortBy","getSorts","limit","isLoading","tableData","pageLinks","TagsHeader","data","columnOrder","grid","renderHeadCellWithMeta","meta","renderBodyCellWithData","onResizeColumn","handleResizeColumn","React","viewAllTarget","Header","size","StyledPagination","onCursor","space","Pagination","TagExplorer"],"mappings":"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","file":"chunks/app_views_performance_transactionSummary_tagExplorer_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\n\nimport {EventQuery} from 'app/actionCreators/events';\nimport {LocationQuery} from 'app/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'app/utils/discover/genericDiscoverQuery';\nimport withApi from 'app/utils/withApi';\n\n/**\n * An individual row in a Segment explorer result\n */\nexport type TableDataRow = {\n  tags_key: string;\n  tags_value: string;\n  sumdelta: number;\n  count: number;\n  frequency: number;\n  aggregate: number;\n  comparison: number;\n};\n\nexport type TableData = {\n  data: TableDataRow[];\n  meta: {};\n};\n\n/**\n * A Segment Explorer result including rows and metadata.\n */\n\ntype ChildrenProps = Omit<GenericChildrenProps<TableData>, 'tableData'> & {\n  tableData: TableData | null;\n};\n\ntype QueryProps = DiscoverQueryProps & {\n  aggregateColumn: string;\n  allTagKeys?: boolean;\n  tagKey?: string;\n  sort?: string | string[];\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\ntype FacetQuery = LocationQuery &\n  EventQuery & {\n    sort?: string | string[];\n    aggregateColumn?: string;\n    allTagKeys?: boolean;\n    tagKey?: string;\n  };\n\nexport function getRequestFunction(_props: QueryProps) {\n  const {aggregateColumn} = _props;\n  function getTagExplorerRequestPayload(props: DiscoverQueryProps) {\n    const {eventView} = props;\n    const apiPayload: FacetQuery = eventView.getEventsAPIPayload(props.location);\n    apiPayload.aggregateColumn = aggregateColumn;\n    apiPayload.sort = _props.sort ? _props.sort : apiPayload.sort;\n    if (_props.allTagKeys) {\n      apiPayload.allTagKeys = _props.allTagKeys;\n    }\n    if (_props.tagKey) {\n      apiPayload.tagKey = _props.tagKey;\n    }\n    return apiPayload;\n  }\n  return getTagExplorerRequestPayload;\n}\n\nfunction shouldRefetchData(prevProps: QueryProps, nextProps: QueryProps) {\n  return (\n    prevProps.aggregateColumn !== nextProps.aggregateColumn ||\n    prevProps.sort !== nextProps.sort ||\n    prevProps.allTagKeys !== nextProps.allTagKeys ||\n    prevProps.tagKey !== nextProps.tagKey\n  );\n}\n\nfunction SegmentExplorerQuery(props: QueryProps) {\n  return (\n    <GenericDiscoverQuery<TableData, QueryProps>\n      route=\"events-facets-performance\"\n      getRequestPayload={getRequestFunction(props)}\n      shouldRefetchData={shouldRefetchData}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(SegmentExplorerQuery);\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject, Query} from 'history';\n\nimport Feature from 'app/components/acl/feature';\nimport {GuideAnchor} from 'app/components/assistant/guideAnchor';\nimport Button from 'app/components/button';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport FeatureBadge from 'app/components/featureBadge';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n  GridColumnOrder,\n} from 'app/components/gridEditable';\nimport SortLink from 'app/components/gridEditable/sortLink';\nimport Link from 'app/components/links/link';\nimport Pagination from 'app/components/pagination';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport EventView, {fromSorts, isFieldSortable} from 'app/utils/discover/eventView';\nimport {fieldAlignment} from 'app/utils/discover/fields';\nimport {formatPercentage} from 'app/utils/formatters';\nimport SegmentExplorerQuery, {\n  TableData,\n  TableDataRow,\n} from 'app/utils/performance/segmentExplorer/segmentExplorerQuery';\nimport {decodeScalar} from 'app/utils/queryString';\nimport {tokenizeSearch} from 'app/utils/tokenizeSearch';\nimport CellAction, {Actions, updateQuery} from 'app/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'app/views/eventsV2/table/types';\n\nimport {\n  PerformanceDuration,\n  platformAndConditionsToPerformanceType,\n  PROJECT_PERFORMANCE_TYPE,\n} from '../utils';\n\nimport {tagsRouteWithQuery} from './transactionTags/utils';\nimport {SpanOperationBreakdownFilter} from './filter';\n\nconst TAGS_CURSOR_NAME = 'tags_cursor';\n\ntype ColumnKeys =\n  | 'key'\n  | 'tagValue'\n  | 'aggregate'\n  | 'frequency'\n  | 'comparison'\n  | 'sumdelta';\ntype TagColumn = GridColumnOrder<ColumnKeys> & {\n  column: {\n    kind: string;\n  };\n  field: string;\n  canSort?: boolean;\n};\nconst COLUMN_ORDER: TagColumn[] = [\n  {\n    key: 'key',\n    field: 'key',\n    name: 'Tag Key',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'tagValue',\n    field: 'tagValue',\n    name: 'Tag Values',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'aggregate',\n    field: 'aggregate',\n    name: 'Avg Duration',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'frequency',\n    field: 'frequency',\n    name: 'Frequency',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'comparison',\n    field: 'comparison',\n    name: 'Compared To Avg',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'sumdelta',\n    field: 'sumdelta',\n    name: 'Total Time Lost',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n];\n\nconst filterToField = {\n  [SpanOperationBreakdownFilter.Browser]: 'spans.browser',\n  [SpanOperationBreakdownFilter.Http]: 'spans.http',\n  [SpanOperationBreakdownFilter.Db]: 'spans.db',\n  [SpanOperationBreakdownFilter.Resource]: 'spans.resource',\n};\n\nexport const getTransactionField = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const fieldFromFilter = filterToField[currentFilter];\n  if (fieldFromFilter) {\n    return fieldFromFilter;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    return 'measurements.lcp';\n  }\n\n  return 'transaction.duration';\n};\n\nconst getColumnsWithReplacedDuration = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const columns = COLUMN_ORDER.map(c => ({...c}));\n  const durationColumn = columns.find(c => c.key === 'aggregate');\n\n  if (!durationColumn) {\n    return columns;\n  }\n\n  const fieldFromFilter = filterToField[currentFilter];\n  if (fieldFromFilter) {\n    durationColumn.name = 'Avg Span Duration';\n    return columns;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    durationColumn.name = 'Avg LCP';\n    return columns;\n  }\n\n  return columns;\n};\n\ntype TagValueProps = {\n  row: TableDataRow;\n};\n\nexport function TagValue(props: TagValueProps) {\n  return <div className=\"truncate\">{props.row.tags_value}</div>;\n}\n\ntype Props = {\n  eventView: EventView;\n  organization: Organization;\n  location: Location;\n  projects: Project[];\n  transactionName: string;\n  currentFilter: SpanOperationBreakdownFilter;\n};\n\ntype State = {\n  widths: number[];\n};\nclass _TagExplorer extends React.Component<Props> {\n  state: State = {\n    widths: [],\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getColumnOrder = (columns: GridColumnOrder[]) => {\n    const {widths} = this.state;\n    return columns.map((col: GridColumnOrder, i: number) => {\n      if (typeof widths[i] === 'number') {\n        return {...col, width: widths[i]};\n      }\n      return col;\n    });\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.sort',\n      eventName: 'Performance Views: Tag Explorer Sorted',\n      organization_id: parseInt(organization.id, 10),\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  renderHeadCell(\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    column: TableColumn<ColumnKeys>,\n    columnInfo: TagColumn\n  ): React.ReactNode {\n    const {location} = this.props;\n    const align = fieldAlignment(column.key, column.type, tableMeta);\n    const field = {field: column.key, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = sortedEventView.sortOnField(field, tableMeta);\n      const {sort} = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, [TAGS_CURSOR_NAME]: undefined, tagSort: sort},\n      };\n    }\n    const currentSort = sortedEventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    return (\n      <SortLink\n        align={align}\n        title={columnInfo.name}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n  }\n\n  renderHeadCellWithMeta = (\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    columns: TagColumn[]\n  ) => {\n    return (column: TableColumn<ColumnKeys>, index: number): React.ReactNode =>\n      this.renderHeadCell(sortedEventView, tableMeta, column, columns[index]);\n  };\n\n  handleTagValueClick = (location: Location, tagKey: string, tagValue: string) => {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.tag_value',\n      eventName: 'Performance Views: Tag Explorer Value Clicked',\n      organization_id: parseInt(organization.id, 10),\n    });\n\n    const queryString = decodeScalar(location.query.query);\n    const conditions = tokenizeSearch(queryString || '');\n\n    conditions.addTagValues(tagKey, [tagValue]);\n\n    const query = conditions.formatString();\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        query: String(query).trim(),\n      },\n    });\n  };\n\n  handleCellAction = (\n    column: TableColumn<ColumnKeys>,\n    tagValue: React.ReactText,\n    actionRow: any\n  ) => {\n    return (action: Actions) => {\n      const {eventView, location, organization} = this.props;\n      trackAnalyticsEvent({\n        eventKey: 'performance_views.summary.tag_explorer.cell_action',\n        eventName: 'Performance Views: Tag Explorer Cell Action Clicked',\n        organization_id: parseInt(organization.id, 10),\n      });\n\n      const searchConditions = tokenizeSearch(eventView.query);\n\n      // remove any event.type queries since it is implied to apply to only transactions\n      searchConditions.removeTag('event.type');\n\n      updateQuery(searchConditions, action, {...column, name: actionRow.id}, tagValue);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          [TAGS_CURSOR_NAME]: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  onTagKeyClick() {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.visit_tag_key',\n      eventName: 'Performance Views: Tag Explorer - Visit Tag Key',\n      organization_id: parseInt(organization.id, 10),\n    });\n  }\n\n  renderBodyCell = (\n    parentProps: Props,\n    column: TableColumn<ColumnKeys>,\n    dataRow: TableDataRow\n  ): React.ReactNode => {\n    const value = dataRow[column.key];\n    const {location, organization, transactionName} = parentProps;\n\n    if (column.key === 'key') {\n      const target = tagsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        projectID: decodeScalar(location.query.project),\n        query: {...location.query, tagKey: dataRow.tags_key},\n      });\n      return (\n        <Feature features={['performance-tag-page']} organization={organization}>\n          {({hasFeature}) => {\n            if (hasFeature) {\n              return (\n                <Link to={target} onClick={() => this.onTagKeyClick()}>\n                  {dataRow.tags_key}\n                </Link>\n              );\n            }\n            return dataRow.tags_key;\n          }}\n        </Feature>\n      );\n    }\n\n    const allowActions = [Actions.ADD, Actions.EXCLUDE];\n\n    if (column.key === 'tagValue') {\n      const actionRow = {...dataRow, id: dataRow.tags_key};\n      return (\n        <CellAction\n          column={column}\n          dataRow={actionRow}\n          handleCellAction={this.handleCellAction(column, dataRow.tags_value, actionRow)}\n          allowActions={allowActions}\n        >\n          <Feature features={['performance-tag-page']} organization={organization}>\n            {({hasFeature}) => {\n              if (hasFeature) {\n                return <div className=\"truncate\">{dataRow.tags_value}</div>;\n              }\n              return (\n                <Link\n                  to=\"\"\n                  onClick={() =>\n                    this.handleTagValueClick(\n                      location,\n                      dataRow.tags_key,\n                      dataRow.tags_value\n                    )\n                  }\n                >\n                  <TagValue row={dataRow} />\n                </Link>\n              );\n            }}\n          </Feature>\n        </CellAction>\n      );\n    }\n\n    if (column.key === 'frequency') {\n      return <AlignRight>{formatPercentage(dataRow.frequency, 0)}</AlignRight>;\n    }\n\n    if (column.key === 'comparison') {\n      const localValue = dataRow.comparison;\n      const pct = formatPercentage(localValue - 1, 0);\n      return (\n        <AlignRight>\n          {localValue > 1 ? t('+%s slower', pct) : t('%s faster', pct)}\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'aggregate') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.aggregate} />\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'sumdelta') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.sumdelta} />\n        </AlignRight>\n      );\n    }\n    return value;\n  };\n\n  renderBodyCellWithData = (parentProps: Props) => {\n    return (column: TableColumn<ColumnKeys>, dataRow: TableDataRow): React.ReactNode =>\n      this.renderBodyCell(parentProps, column, dataRow);\n  };\n\n  render() {\n    const {eventView, organization, location, currentFilter, projects, transactionName} =\n      this.props;\n\n    const tagSort = decodeScalar(location.query?.tagSort);\n    const cursor = decodeScalar(location.query?.[TAGS_CURSOR_NAME]);\n\n    const tagEventView = eventView.clone();\n    tagEventView.fields = COLUMN_ORDER;\n\n    const tagSorts = fromSorts(tagSort);\n\n    const sortedEventView = tagEventView.withSorts(\n      tagSorts.length\n        ? tagSorts\n        : [\n            {\n              field: 'sumdelta',\n              kind: 'desc',\n            },\n          ]\n    );\n\n    const aggregateColumn = getTransactionField(currentFilter, projects, sortedEventView);\n\n    const adjustedColumns = getColumnsWithReplacedDuration(\n      currentFilter,\n      projects,\n      sortedEventView\n    );\n    const columns = this.getColumnOrder(adjustedColumns);\n\n    const columnSortBy = sortedEventView.getSorts();\n\n    return (\n      <SegmentExplorerQuery\n        eventView={sortedEventView}\n        orgSlug={organization.slug}\n        location={location}\n        aggregateColumn={aggregateColumn}\n        limit={5}\n        cursor={cursor}\n      >\n        {({isLoading, tableData, pageLinks}) => {\n          return (\n            <React.Fragment>\n              <GuideAnchor target=\"tag_explorer\">\n                <TagsHeader\n                  transactionName={transactionName}\n                  location={location}\n                  organization={organization}\n                  pageLinks={pageLinks}\n                />\n              </GuideAnchor>\n              <GridEditable\n                isLoading={isLoading}\n                data={tableData && tableData.data ? tableData.data : []}\n                columnOrder={columns}\n                columnSortBy={columnSortBy}\n                grid={{\n                  renderHeadCell: this.renderHeadCellWithMeta(\n                    sortedEventView,\n                    tableData?.meta || {},\n                    adjustedColumns\n                  ) as any,\n                  renderBodyCell: this.renderBodyCellWithData(this.props) as any,\n                  onResizeColumn: this.handleResizeColumn as any,\n                }}\n                location={location}\n              />\n            </React.Fragment>\n          );\n        }}\n      </SegmentExplorerQuery>\n    );\n  }\n}\n\ntype HeaderProps = {\n  organization: Organization;\n  transactionName: string;\n  location: Location;\n  pageLinks: string | null;\n};\nfunction TagsHeader(props: HeaderProps) {\n  const {pageLinks, organization, location, transactionName} = props;\n  const handleCursor = (cursor: string, pathname: string, query: Query) => {\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.change_page',\n      eventName: 'Performance Views: Tag Explorer Change Page',\n      organization_id: parseInt(organization.id, 10),\n    });\n\n    browserHistory.push({\n      pathname,\n      query: {...query, [TAGS_CURSOR_NAME]: cursor},\n    });\n  };\n\n  const handleViewAllTagsClick = () => {\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.tag_explorer.change_page',\n      eventName: 'Performance Views: Tag Explorer Change Page',\n      organization_id: parseInt(organization.id, 10),\n    });\n  };\n\n  const viewAllTarget = tagsRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: transactionName,\n    projectID: decodeScalar(location.query.project),\n    query: {...location.query},\n  });\n\n  return (\n    <Header>\n      <div>\n        <SectionHeading>{t('Suspect Tags')}</SectionHeading>\n        <FeatureBadge type=\"beta\" />\n      </div>\n      <Feature features={['performance-tag-page']} organization={organization}>\n        <Button\n          onClick={handleViewAllTagsClick}\n          to={viewAllTarget}\n          size=\"small\"\n          data-test-id=\"tags-explorer-open-tags\"\n        >\n          {t('View All Tags')}\n        </Button>\n      </Feature>\n      <StyledPagination pageLinks={pageLinks} onCursor={handleCursor} size=\"small\" />\n    </Header>\n  );\n}\n\nconst AlignRight = styled('div')`\n  text-align: right;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto auto;\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n\nexport const TagExplorer = _TagExplorer;\n"],"sourceRoot":""}