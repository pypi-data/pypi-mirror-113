{"version":3,"sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/alerts/list/onboarding.tsx","webpack:///./app/views/alerts/list/index.tsx"],"names":["OnboardingPanel","className","image","children","Container","IlloBox","StyledBox","space","p","theme","breakpoints","Onboarding","actions","AlertsImage","src","emptyStateImg","t","ButtonList","gap","ButtonBar","DOCS_URL","IncidentsList","title","props","router","location","query","currentQuery","cursor","page","push","pathname","sectionId","activeFilters","team","size","status","length","this","params","organization","getQueryStatus","getTeamParams","features","includes","expand","orgId","Array","isArray","incidentList","state","setState","hasAlertRule","firstVisitShown","loading","api","requestPromise","method","alertRules","promptsCheck","organizationId","id","feature","prompt","dismissedTime","promptsUpdate","teams","selectedTeams","Set","selectedStatus","FilterWrapper","showStatus","handleChangeFilter","StyledSearchBar","placeholder","name","onSearch","handleChangeSearch","Fragment","external","href","iconProps","priority","referrer","renderBody","incidentListPageLinks","allProjectsFromIncidents","flatten","map","projects","checkingForAlertRules","undefined","showLoadingIndicator","tryRenderOnboarding","isLoading","isEmpty","emptyMessage","emptyAction","EmptyStateAction","tct","link","headers","slugs","from","initiallyLoaded","incident","projectsLoaded","pageLinks","orgSlug","showDateSelector","activeTab","StyledLayoutBody","fullWidth","StyledAlert","icon","renderFilterBar","renderList","AsyncComponent","IncidentsListContainer","trackView","nextProps","trackAnalyticsEvent","eventKey","eventName","organization_id","type","hookName","renderDisabled","renderNoAccess","Component","Alert","SearchBar","Layout","fontSizeLarge","withOrganization","withTeams"],"mappings":"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","file":"chunks/app_views_alerts_list_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\n\ntype Props = React.PropsWithChildren<{\n  image: React.ReactNode;\n  className?: string;\n}>;\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/alerts-empty-state.svg';\n\nimport ButtonBar from 'app/components/buttonBar';\nimport OnboardingPanel from 'app/components/onboardingPanel';\nimport {t} from 'app/locale';\n\ntype Props = {\n  actions: React.ReactNode;\n};\n\nfunction Onboarding({actions}: Props) {\n  return (\n    <OnboardingPanel image={<AlertsImage src={emptyStateImg} />}>\n      <h3>{t('More signal, less noise')}</h3>\n      <p>\n        {t(\n          'Not every error is worth an email. Set your own rules for alerts you need, with information that helps.'\n        )}\n      </p>\n      <ButtonList gap={1}>{actions}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst AlertsImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    transform: translateX(-60%);\n    width: 280px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    transform: translateX(-75%);\n    width: 320px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport flatten from 'lodash/flatten';\n\nimport {promptsCheck, promptsUpdate} from 'app/actionCreators/prompts';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport Pagination from 'app/components/pagination';\nimport {PanelTable} from 'app/components/panels';\nimport SearchBar from 'app/components/searchBar';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {IconInfo} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport Projects from 'app/utils/projects';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\n\nimport TeamFilter, {getTeamParams} from '../rules/teamFilter';\nimport {Incident} from '../types';\n\nimport AlertHeader from './header';\nimport Onboarding from './onboarding';\nimport AlertListRow from './row';\n\nconst DOCS_URL =\n  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n  teams: Team[];\n};\n\ntype State = {\n  incidentList: Incident[];\n  /**\n   * Is there at least one alert rule configured for the currently selected\n   * projects?\n   */\n  hasAlertRule?: boolean;\n  /**\n   * User has not yet seen the 'alert_stream' welcome prompt for this\n   * organization.\n   */\n  firstVisitShown?: boolean;\n};\n\nclass IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location, organization} = this.props;\n    const {query} = location;\n\n    const status = this.getQueryStatus(query.status);\n    // Filtering by one status, both does nothing\n    if (status.length === 1) {\n      query.status = status;\n    }\n\n    query.team = getTeamParams(query.team);\n\n    if (organization.features.includes('alert-details-redesign')) {\n      query.expand = ['original_alert_rule'];\n    }\n\n    return [['incidentList', `/organizations/${params?.orgId}/incidents/`, {query}]];\n  }\n\n  getQueryStatus(status: string | string[]): string[] {\n    if (Array.isArray(status)) {\n      return status;\n    }\n\n    if (status === '') {\n      return [];\n    }\n\n    return ['open', 'closed'].includes(status) ? [status] : [];\n  }\n\n  /**\n   * If our incidentList is empty, determine if we've configured alert rules or\n   * if the user has seen the welcome prompt.\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length !== 0) {\n      this.setState({hasAlertRule: true, firstVisitShown: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    // Check if they have rules or not, to know which empty state message to\n    // display\n    const {params, location, organization} = this.props;\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${params?.orgId}/alert-rules/`,\n      {\n        method: 'GET',\n        query: location.query,\n      }\n    );\n    const hasAlertRule = alertRules.length > 0;\n\n    // We've already configured alert rules, no need to check if we should show\n    // the \"first time welcome\" prompt\n    if (hasAlertRule) {\n      this.setState({hasAlertRule, firstVisitShown: false, loading: false});\n      return;\n    }\n\n    // Check if they have already seen the prompt for the alert stream\n    const prompt = await promptsCheck(this.api, {\n      organizationId: organization.id,\n      feature: 'alert_stream',\n    });\n\n    const firstVisitShown = !prompt?.dismissedTime;\n\n    if (firstVisitShown) {\n      // Prompt has not been seen, mark the prompt as seen immediately so they\n      // don't see it again\n      promptsUpdate(this.api, {\n        feature: 'alert_stream',\n        organizationId: organization.id,\n        status: 'dismissed',\n      });\n    }\n\n    this.setState({hasAlertRule, firstVisitShown, loading: false});\n  }\n\n  handleChangeSearch = (title: string) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        title,\n      },\n    });\n  };\n\n  handleChangeFilter = (sectionId: string, activeFilters: Set<string>) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n\n    let team = currentQuery.team;\n    if (sectionId === 'teams') {\n      team = activeFilters.size ? [...activeFilters] : '';\n    }\n\n    let status = currentQuery.status;\n    if (sectionId === 'status') {\n      status = activeFilters.size ? [...activeFilters] : '';\n    }\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        status,\n        // Preserve empty team query parameter\n        team: team.length === 0 ? '' : team,\n      },\n    });\n  };\n\n  renderFilterBar() {\n    const {teams, location} = this.props;\n    const selectedTeams = new Set(getTeamParams(location.query.team));\n    const selectedStatus = new Set(this.getQueryStatus(location.query.status));\n\n    return (\n      <FilterWrapper>\n        <TeamFilter\n          showStatus\n          teams={teams}\n          selectedStatus={selectedStatus}\n          selectedTeams={selectedTeams}\n          handleChangeFilter={this.handleChangeFilter}\n        />\n        <StyledSearchBar\n          placeholder={t('Search by name')}\n          query={location.query?.name}\n          onSearch={this.handleChangeSearch}\n        />\n      </FilterWrapper>\n    );\n  }\n\n  tryRenderOnboarding() {\n    const {firstVisitShown} = this.state;\n    const {organization} = this.props;\n\n    if (!firstVisitShown) {\n      return null;\n    }\n\n    const actions = (\n      <Fragment>\n        <Button size=\"small\" external href={DOCS_URL}>\n          {t('View Features')}\n        </Button>\n        <CreateAlertButton\n          organization={organization}\n          iconProps={{size: 'xs'}}\n          size=\"small\"\n          priority=\"primary\"\n          referrer=\"alert_stream\"\n        >\n          {t('Create Alert Rule')}\n        </CreateAlertButton>\n      </Fragment>\n    );\n\n    return <Onboarding actions={actions} />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;\n    const {\n      params: {orgId},\n      organization,\n    } = this.props;\n\n    const allProjectsFromIncidents = new Set(\n      flatten(incidentList?.map(({projects}) => projects))\n    );\n    const checkingForAlertRules =\n      incidentList && incidentList.length === 0 && hasAlertRule === undefined\n        ? true\n        : false;\n    const showLoadingIndicator = loading || checkingForAlertRules;\n\n    return (\n      <Fragment>\n        {this.tryRenderOnboarding() ?? (\n          <PanelTable\n            isLoading={showLoadingIndicator}\n            isEmpty={incidentList?.length === 0}\n            emptyMessage={t('No incidents exist for the current query.')}\n            emptyAction={\n              <EmptyStateAction>\n                {tct('Learn more about [link:Metric Alerts]', {\n                  link: <ExternalLink href={DOCS_URL} />,\n                })}\n              </EmptyStateAction>\n            }\n            headers={[\n              t('Alert Rule'),\n              t('Triggered'),\n              t('Duration'),\n              t('Project'),\n              t('Alert ID'),\n              t('Team'),\n            ]}\n          >\n            <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>\n              {({initiallyLoaded, projects}) =>\n                incidentList.map(incident => (\n                  <AlertListRow\n                    key={incident.id}\n                    projectsLoaded={initiallyLoaded}\n                    projects={projects as Project[]}\n                    incident={incident}\n                    orgId={orgId}\n                    organization={organization}\n                  />\n                ))\n              }\n            </Projects>\n          </PanelTable>\n        )}\n        <Pagination pageLinks={incidentListPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {params, organization, router} = this.props;\n    const {orgId} = params;\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <GlobalSelectionHeader organization={organization} showDateSelector={false}>\n          <AlertHeader organization={organization} router={router} activeTab=\"stream\" />\n          <StyledLayoutBody>\n            <Layout.Main fullWidth>\n              {!this.tryRenderOnboarding() && (\n                <Fragment>\n                  <Feature\n                    features={['alert-details-redesign']}\n                    organization={organization}\n                  >\n                    <StyledAlert icon={<IconInfo />}>\n                      {t('This page only shows metric alerts.')}\n                    </StyledAlert>\n                  </Feature>\n                  {this.renderFilterBar()}\n                </Fragment>\n              )}\n              {this.renderList()}\n            </Layout.Main>\n          </StyledLayoutBody>\n        </GlobalSelectionHeader>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nclass IncidentsListContainer extends Component<Props> {\n  componentDidMount() {\n    this.trackView();\n  }\n\n  componentDidUpdate(nextProps: Props) {\n    if (nextProps.location.query?.status !== this.props.location.query?.status) {\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {organization} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'alert_stream.viewed',\n      eventName: 'Alert Stream: Viewed',\n      organization_id: organization.id,\n    });\n  }\n\n  renderNoAccess() {\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <Feature\n        features={['organizations:incidents']}\n        organization={organization}\n        hookName=\"feature-disabled:alerts-page\"\n        renderDisabled={this.renderNoAccess}\n      >\n        <IncidentsList {...this.props} />\n      </Feature>\n    );\n  }\n}\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: ${space(1.5)};\n`;\n\nconst FilterWrapper = styled('div')`\n  display: flex;\n  margin-bottom: ${space(1.5)};\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex-grow: 1;\n  margin-left: ${space(1.5)};\n`;\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  margin-bottom: -20px;\n`;\n\nconst EmptyStateAction = styled('p')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nexport default withOrganization(withTeams(IncidentsListContainer));\n"],"sourceRoot":""}