{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/index.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","ProjectSecurityHeaders","props","orgId","projectId","routeTitleGen","t","name","url","keyList","state","withPadding","style","marginBottom","tct","key_param","className","padding","getReports","ReportItem","HeaderName","priority","PanelItem","DEFAULT_ENDPOINT","getSecurityDsn","endpoint","length","dsn","security","getDynamicText","value","fixed","ReportUri","type","link","Link","inline","flexibleControlStateSize"],"mappings":"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","file":"chunks/app_views_settings_projectSecurityHeaders_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {ProjectKey} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport ReportUri from 'app/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & AsyncView['state'];\n\nexport default class ProjectSecurityHeaders extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Security Headers'), projectId, false);\n  }\n\n  getReports() {\n    return [\n      {\n        name: 'Content Security Policy (CSP)',\n        url: recreateRoute('csp/', this.props),\n      },\n      {\n        name: 'Certificate Transparency (Expect-CT)',\n        url: recreateRoute('expect-ct/', this.props),\n      },\n      {\n        name: 'HTTP Public Key Pinning (HPKP)',\n        url: recreateRoute('hpkp/', this.props),\n      },\n    ];\n  }\n\n  renderBody() {\n    const {params} = this.props;\n    const {keyList} = this.state;\n    if (keyList === null) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Security Header Reports')} />\n\n        <ReportUri keyList={keyList} projectId={params.projectId} orgId={params.orgId} />\n\n        <Panel>\n          <PanelHeader>{t('Additional Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <TextBlock style={{marginBottom: 20}}>\n              {tct(\n                'In addition to the [key_param] parameter, you may also pass the following within the querystring for the report URI:',\n                {\n                  key_param: <code>sentry_key</code>,\n                }\n              )}\n            </TextBlock>\n            <table className=\"table\" style={{marginBottom: 0}}>\n              <tbody>\n                <tr>\n                  <th style={{padding: '8px 5px'}}>sentry_environment</th>\n                  <td style={{padding: '8px 5px'}}>\n                    {t('The environment name (e.g. production)')}.\n                  </td>\n                </tr>\n                <tr>\n                  <th style={{padding: '8px 5px'}}>sentry_release</th>\n                  <td style={{padding: '8px 5px'}}>\n                    {t('The version of the application.')}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Supported Formats')}</PanelHeader>\n          <PanelBody>\n            {this.getReports().map(({name, url}) => (\n              <ReportItem key={url}>\n                <HeaderName>{name}</HeaderName>\n                <Button to={url} priority=\"primary\">\n                  {t('Instructions')}\n                </Button>\n              </ReportItem>\n            ))}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst ReportItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst HeaderName = styled('span')`\n  font-size: 1.2em;\n`;\n","import {Link} from 'react-router';\n\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {ProjectKey} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <Field inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"sourceRoot":""}