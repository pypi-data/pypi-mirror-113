
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ATTRIBUTE BOOL BOOLCONSTANT BYTE DOUBLE DUBCONSTANT ENUM FILE_EXTENSION FILE_IDENTIFIER FLOAT IDENTIFIER INCLUDE INT INTCONSTANT LITERAL LONG NAMESPACE ROOT_TYPE SHORT STRING STRUCT TABLE UBYTE UINT ULONG UNION USHORTstart : include_seq body_seqinclude_seq : include_seq include_one\n                    | include_one\n                    |body_seq : body_seq body\n                    | body\n                    |include_one : INCLUDE LITERAL ';' body : namespace\n            | typedef\n            | enum\n            | root\n            | file_extension\n            | file_identifier\n            | attribute\n            | object\n            |namespace : NAMESPACE IDENTIFIER ';' root : ROOT_TYPE IDENTIFIER ';' file_extension : FILE_EXTENSION LITERAL ';' file_identifier : FILE_IDENTIFIER LITERAL ';' metadata : '(' metadata_seq ')'\n                |metadata_seq : metadata_item ',' metadata_seq\n                    | metadata_item\n                    |metadata_item : IDENTIFIER\n                     | IDENTIFIER ':' scalarattribute : ATTRIBUTE LITERAL ';' object : '{' field_seq '}' typedef : table\n       typedef : struct enum : ENUM IDENTIFIER metadata '{' enum_seq '}'\n       enum : ENUM IDENTIFIER ':' simple_base_type metadata '{' enum_seq '}'\n       enum : unionenum_seq : enum_item ',' enum_seq\n                | enum_item enum_seq\n                |enum_item : IDENTIFIER '=' INTCONSTANT\n                 | IDENTIFIER '=' LITERAL\n                 | IDENTIFIER\n                 |struct : STRUCT IDENTIFIER metadata '{' field_seq '}' table : TABLE IDENTIFIER metadata '{' field_seq '}' union : UNION IDENTIFIER metadata '{' enum_seq '}' field_seq : field field_seq\n                 |field : IDENTIFIER ':' type metadata ';'\n             | IDENTIFIER ':' type '=' scalar metadata ';' type : simple_base_type\n            | '[' type ']'\n            | IDENTIFIERsimple_base_type : BOOL\n                        | BYTE\n                        | UBYTE\n                        | SHORT\n                        | USHORT\n                        | INT\n                        | UINT\n                        | FLOAT\n                        | LONG\n                        | ULONG\n                        | DOUBLE\n                        | STRINGscalar : LITERAL\n              | BOOLCONSTANT\n              | DUBCONSTANT\n              | INTCONSTANT\n              | IDENTIFIER"
    
_lr_action_items = {'SHORT':([49,55,79,],[71,71,71,]),'BOOLCONSTANT':([84,92,],[99,99,]),'UBYTE':([49,55,79,],[67,67,67,]),'[':([55,79,],[79,79,]),'DUBCONSTANT':([84,92,],[101,101,]),'FILE_IDENTIFIER':([0,1,2,5,6,7,8,9,10,11,12,14,17,18,19,20,28,33,43,44,48,52,53,54,57,102,106,108,109,118,],[-4,-3,25,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,25,-11,-12,-5,-8,-20,-18,-19,-21,-29,-30,-45,-44,-33,-43,-34,]),'ULONG':([49,55,79,],[64,64,64,]),')':([45,58,59,60,83,95,96,97,98,99,100,101,],[-26,82,-25,-27,-26,-24,-69,-68,-65,-66,-28,-67,]),'(':([31,32,35,36,63,64,65,66,67,68,69,70,71,72,73,74,75,78,80,81,96,97,98,99,101,110,112,],[45,45,45,45,-64,-62,-58,-63,-55,-59,-61,-60,-56,-53,45,-57,-54,45,-52,-50,-69,-68,-65,-66,-67,45,-51,]),'FILE_EXTENSION':([0,1,2,5,6,7,8,9,10,11,12,14,17,18,19,20,28,33,43,44,48,52,53,54,57,102,106,108,109,118,],[-4,-3,13,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,13,-11,-12,-5,-8,-20,-18,-19,-21,-29,-30,-45,-44,-33,-43,-34,]),',':([59,60,61,76,86,87,96,97,98,99,100,101,105,107,113,114,],[83,-27,-42,-42,-41,105,-69,-68,-65,-66,-28,-67,-42,-42,-39,-40,]),'LONG':([49,55,79,],[69,69,69,]),'INTCONSTANT':([84,92,103,],[97,97,113,]),'TABLE':([0,1,2,5,6,7,8,9,10,11,12,14,17,18,19,20,28,33,43,44,48,52,53,54,57,102,106,108,109,118,],[-4,-3,16,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,16,-11,-12,-5,-8,-20,-18,-19,-21,-29,-30,-45,-44,-33,-43,-34,]),';':([29,30,34,37,38,39,63,64,65,66,67,68,69,70,71,72,74,75,78,80,81,82,93,96,97,98,99,101,110,112,117,],[43,44,48,52,53,54,-64,-62,-58,-63,-55,-59,-61,-60,-56,-53,-57,-54,-23,-52,-50,-22,111,-69,-68,-65,-66,-67,-23,-51,119,]),'IDENTIFIER':([15,16,21,22,23,24,27,41,45,55,61,62,76,77,79,83,84,86,87,92,105,107,111,113,114,119,],[31,32,34,35,36,37,40,40,60,80,86,40,86,40,80,60,96,-41,86,96,86,86,-48,-39,-40,-49,]),'=':([63,64,65,66,67,68,69,70,71,72,74,75,78,80,81,86,112,],[-64,-62,-58,-63,-55,-59,-61,-60,-56,-53,-57,-54,92,-52,-50,103,-51,]),'$end':([0,1,2,3,5,6,7,8,9,10,11,12,14,17,18,19,20,28,33,43,44,48,52,53,54,57,102,106,108,109,118,],[-4,-3,-7,0,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,-1,-11,-12,-5,-8,-20,-18,-19,-21,-29,-30,-45,-44,-33,-43,-34,]),'STRING':([49,55,79,],[63,63,63,]),'UNION':([0,1,2,5,6,7,8,9,10,11,12,14,17,18,19,20,28,33,43,44,48,52,53,54,57,102,106,108,109,118,],[-4,-3,15,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,15,-11,-12,-5,-8,-20,-18,-19,-21,-29,-30,-45,-44,-33,-43,-34,]),'ENUM':([0,1,2,5,6,7,8,9,10,11,12,14,17,18,19,20,28,33,43,44,48,52,53,54,57,102,106,108,109,118,],[-4,-3,22,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,22,-11,-12,-5,-8,-20,-18,-19,-21,-29,-30,-45,-44,-33,-43,-34,]),'NAMESPACE':([0,1,2,5,6,7,8,9,10,11,12,14,17,18,19,20,28,33,43,44,48,52,53,54,57,102,106,108,109,118,],[-4,-3,21,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,21,-11,-12,-5,-8,-20,-18,-19,-21,-29,-30,-45,-44,-33,-43,-34,]),'LITERAL':([4,13,25,26,84,92,103,],[29,30,38,39,98,98,114,]),'UINT':([49,55,79,],[68,68,68,]),'BYTE':([49,55,79,],[75,75,75,]),'INCLUDE':([0,1,2,5,43,],[4,-3,4,-2,-8,]),']':([63,64,65,66,67,68,69,70,71,72,74,75,80,81,94,112,],[-64,-62,-58,-63,-55,-59,-61,-60,-56,-53,-57,-54,-52,-50,112,-51,]),':':([35,40,60,],[49,55,84,]),'STRUCT':([0,1,2,5,6,7,8,9,10,11,12,14,17,18,19,20,28,33,43,44,48,52,53,54,57,102,106,108,109,118,],[-4,-3,23,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,23,-11,-12,-5,-8,-20,-18,-19,-21,-29,-30,-45,-44,-33,-43,-34,]),'ROOT_TYPE':([0,1,2,5,6,7,8,9,10,11,12,14,17,18,19,20,28,33,43,44,48,52,53,54,57,102,106,108,109,118,],[-4,-3,24,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,24,-11,-12,-5,-8,-20,-18,-19,-21,-29,-30,-45,-44,-33,-43,-34,]),'INT':([49,55,79,],[65,65,65,]),'ATTRIBUTE':([0,1,2,5,6,7,8,9,10,11,12,14,17,18,19,20,28,33,43,44,48,52,53,54,57,102,106,108,109,118,],[-4,-3,26,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,26,-11,-12,-5,-8,-20,-18,-19,-21,-29,-30,-45,-44,-33,-43,-34,]),'USHORT':([49,55,79,],[74,74,74,]),'FLOAT':([49,55,79,],[70,70,70,]),'BOOL':([49,55,79,],[72,72,72,]),'DOUBLE':([49,55,79,],[66,66,66,]),'{':([0,1,2,5,6,7,8,9,10,11,12,14,17,18,19,20,28,31,32,33,35,36,43,44,46,47,48,50,51,52,53,54,57,63,64,65,66,67,68,69,70,71,72,73,74,75,82,89,102,106,108,109,118,],[-4,-3,27,-2,-15,-13,-31,-14,-10,-32,-35,-9,-6,-16,27,-11,-12,-23,-23,-5,-23,-23,-8,-20,61,62,-18,76,77,-19,-21,-29,-30,-64,-62,-58,-63,-55,-59,-61,-60,-56,-53,-23,-57,-54,-22,107,-45,-44,-33,-43,-34,]),'}':([27,41,42,56,61,62,76,77,85,86,87,88,90,91,104,105,107,111,113,114,115,116,119,],[-47,-47,57,-46,-38,-47,-38,-47,102,-41,-38,106,108,109,-37,-38,-38,-48,-39,-40,-36,118,-49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'include_one':([0,2,],[1,5,]),'attribute':([2,19,],[6,6,]),'file_extension':([2,19,],[7,7,]),'scalar':([84,92,],[100,110,]),'table':([2,19,],[8,8,]),'field_seq':([27,41,62,77,],[42,56,88,91,]),'file_identifier':([2,19,],[9,9,]),'typedef':([2,19,],[10,10,]),'include_seq':([0,],[2,]),'struct':([2,19,],[11,11,]),'start':([0,],[3,]),'union':([2,19,],[12,12,]),'namespace':([2,19,],[14,14,]),'field':([27,41,62,77,],[41,41,41,41,]),'type':([55,79,],[78,94,]),'metadata':([31,32,35,36,73,78,110,],[46,47,50,51,89,93,117,]),'body':([2,19,],[17,33,]),'object':([2,19,],[18,18,]),'body_seq':([2,],[19,]),'enum':([2,19,],[20,20,]),'simple_base_type':([49,55,79,],[73,81,81,]),'enum_item':([61,76,87,105,107,],[87,87,87,87,87,]),'enum_seq':([61,76,87,105,107,],[85,90,104,115,116,]),'metadata_seq':([45,83,],[58,95,]),'metadata_item':([45,83,],[59,59,]),'root':([2,19,],[28,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> include_seq body_seq','start',2,'p_start','parser.py',30),
  ('include_seq -> include_seq include_one','include_seq',2,'p_include_seq','parser.py',34),
  ('include_seq -> include_one','include_seq',1,'p_include_seq','parser.py',35),
  ('include_seq -> <empty>','include_seq',0,'p_include_seq','parser.py',36),
  ('body_seq -> body_seq body','body_seq',2,'p_body_seq','parser.py',39),
  ('body_seq -> body','body_seq',1,'p_body_seq','parser.py',40),
  ('body_seq -> <empty>','body_seq',0,'p_body_seq','parser.py',41),
  ('include_one -> INCLUDE LITERAL ;','include_one',3,'p_include_one','parser.py',44),
  ('body -> namespace','body',1,'p_body','parser.py',62),
  ('body -> typedef','body',1,'p_body','parser.py',63),
  ('body -> enum','body',1,'p_body','parser.py',64),
  ('body -> root','body',1,'p_body','parser.py',65),
  ('body -> file_extension','body',1,'p_body','parser.py',66),
  ('body -> file_identifier','body',1,'p_body','parser.py',67),
  ('body -> attribute','body',1,'p_body','parser.py',68),
  ('body -> object','body',1,'p_body','parser.py',69),
  ('body -> <empty>','body',0,'p_body','parser.py',70),
  ('namespace -> NAMESPACE IDENTIFIER ;','namespace',3,'p_namespace','parser.py',73),
  ('root -> ROOT_TYPE IDENTIFIER ;','root',3,'p_root','parser.py',77),
  ('file_extension -> FILE_EXTENSION LITERAL ;','file_extension',3,'p_file_extension','parser.py',81),
  ('file_identifier -> FILE_IDENTIFIER LITERAL ;','file_identifier',3,'p_file_identifier','parser.py',85),
  ('metadata -> ( metadata_seq )','metadata',3,'p_metadata','parser.py',89),
  ('metadata -> <empty>','metadata',0,'p_metadata','parser.py',90),
  ('metadata_seq -> metadata_item , metadata_seq','metadata_seq',3,'p_metadata_seq','parser.py',97),
  ('metadata_seq -> metadata_item','metadata_seq',1,'p_metadata_seq','parser.py',98),
  ('metadata_seq -> <empty>','metadata_seq',0,'p_metadata_seq','parser.py',99),
  ('metadata_item -> IDENTIFIER','metadata_item',1,'p_metadata_item','parser.py',103),
  ('metadata_item -> IDENTIFIER : scalar','metadata_item',3,'p_metadata_item','parser.py',104),
  ('attribute -> ATTRIBUTE LITERAL ;','attribute',3,'p_attribute','parser.py',111),
  ('object -> { field_seq }','object',3,'p_object','parser.py',114),
  ('typedef -> table','typedef',1,'p_typedef','parser.py',117),
  ('typedef -> struct','typedef',1,'p_typedef','parser.py',118),
  ('enum -> ENUM IDENTIFIER metadata { enum_seq }','enum',6,'p_enum','parser.py',123),
  ('enum -> ENUM IDENTIFIER : simple_base_type metadata { enum_seq }','enum',8,'p_enum','parser.py',124),
  ('enum -> union','enum',1,'p_enum','parser.py',125),
  ('enum_seq -> enum_item , enum_seq','enum_seq',3,'p_enum_seq','parser.py',138),
  ('enum_seq -> enum_item enum_seq','enum_seq',2,'p_enum_seq','parser.py',139),
  ('enum_seq -> <empty>','enum_seq',0,'p_enum_seq','parser.py',140),
  ('enum_item -> IDENTIFIER = INTCONSTANT','enum_item',3,'p_enum_item','parser.py',145),
  ('enum_item -> IDENTIFIER = LITERAL','enum_item',3,'p_enum_item','parser.py',146),
  ('enum_item -> IDENTIFIER','enum_item',1,'p_enum_item','parser.py',147),
  ('enum_item -> <empty>','enum_item',0,'p_enum_item','parser.py',148),
  ('struct -> STRUCT IDENTIFIER metadata { field_seq }','struct',6,'p_struct','parser.py',156),
  ('table -> TABLE IDENTIFIER metadata { field_seq }','table',6,'p_table','parser.py',163),
  ('union -> UNION IDENTIFIER metadata { enum_seq }','union',6,'p_union','parser.py',170),
  ('field_seq -> field field_seq','field_seq',2,'p_field_seq','parser.py',177),
  ('field_seq -> <empty>','field_seq',0,'p_field_seq','parser.py',178),
  ('field -> IDENTIFIER : type metadata ;','field',5,'p_field','parser.py',183),
  ('field -> IDENTIFIER : type = scalar metadata ;','field',7,'p_field','parser.py',184),
  ('type -> simple_base_type','type',1,'p_type','parser.py',207),
  ('type -> [ type ]','type',3,'p_type','parser.py',208),
  ('type -> IDENTIFIER','type',1,'p_type','parser.py',209),
  ('simple_base_type -> BOOL','simple_base_type',1,'p_simple_base_type','parser.py',219),
  ('simple_base_type -> BYTE','simple_base_type',1,'p_simple_base_type','parser.py',220),
  ('simple_base_type -> UBYTE','simple_base_type',1,'p_simple_base_type','parser.py',221),
  ('simple_base_type -> SHORT','simple_base_type',1,'p_simple_base_type','parser.py',222),
  ('simple_base_type -> USHORT','simple_base_type',1,'p_simple_base_type','parser.py',223),
  ('simple_base_type -> INT','simple_base_type',1,'p_simple_base_type','parser.py',224),
  ('simple_base_type -> UINT','simple_base_type',1,'p_simple_base_type','parser.py',225),
  ('simple_base_type -> FLOAT','simple_base_type',1,'p_simple_base_type','parser.py',226),
  ('simple_base_type -> LONG','simple_base_type',1,'p_simple_base_type','parser.py',227),
  ('simple_base_type -> ULONG','simple_base_type',1,'p_simple_base_type','parser.py',228),
  ('simple_base_type -> DOUBLE','simple_base_type',1,'p_simple_base_type','parser.py',229),
  ('simple_base_type -> STRING','simple_base_type',1,'p_simple_base_type','parser.py',230),
  ('scalar -> LITERAL','scalar',1,'p_scalar','parser.py',260),
  ('scalar -> BOOLCONSTANT','scalar',1,'p_scalar','parser.py',261),
  ('scalar -> DUBCONSTANT','scalar',1,'p_scalar','parser.py',262),
  ('scalar -> INTCONSTANT','scalar',1,'p_scalar','parser.py',263),
  ('scalar -> IDENTIFIER','scalar',1,'p_scalar','parser.py',264),
]
