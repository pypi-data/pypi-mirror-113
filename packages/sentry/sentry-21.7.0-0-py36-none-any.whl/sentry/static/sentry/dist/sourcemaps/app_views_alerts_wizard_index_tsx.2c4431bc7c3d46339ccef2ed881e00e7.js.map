{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/isActiveSuperuser.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/alerts/builder/builderBreadCrumbs.tsx","webpack:///./app/views/alerts/wizard/radioPanelGroup.tsx","webpack:///./app/views/alerts/wizard/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/menuItem.tsx"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","isActiveSuperuser","ConfigStore","isSuperuser","Cookies","undefined","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","BuilderBreadCrumbs","props","alertName","projects","canChangeProject","project","find","slug","projectCrumbLink","label","avatarSize","disableLink","preserveGlobalSelection","projectCrumbDropdown","onSelect","value","browserHistory","orgId","projectId","items","filter","proj","isMember","index","avatarProps","consistentWidth","searchKey","projectCrumb","crumbs","t","push","StyledBreadcrumbs","Breadcrumbs","space","withProjects","RadioPanelGroup","choices","onChange","Container","role","id","name","extraContent","RadioPanel","RadioLineItem","radioSize","checked","e","p","theme","subText","textColor","DEFAULT_ALERT_OPTION","AlertWizard","alertOption","organization","setState","trackAnalyticsEvent","eventKey","eventName","organization_id","alert_type","this","state","metricRuleTemplate","AlertWizardRuleTemplates","isMetricAlert","isTransactionDataset","dataset","Dataset","pathname","query","createFromWizard","referrer","noFeatureMessage","features","requireAll","hookName","renderDisabled","body","hideHelpToggle","message","featureName","hasFeature","WizardButtonContainer","onClick","disabled","priority","hideIcon","hasMetricAlerts","panelContent","AlertWizardPanelContent","Fragment","StyledHeaderContent","StyledLayoutBody","fullWidth","WizardBody","WizardOptions","Styledh2","AlertWizardOptions","i","categoryHeading","OptionsWrapper","alertType","AlertWizardAlertNames","handleChangeAlertOption","WizardPanel","visible","WizardPanelBody","withPadding","PanelDescription","description","docsLink","href","WizardImage","src","illustration","ExampleHeader","ExampleList","symbol","examples","example","ExampleItem","WizardFooter","renderCreateAlertButton","Component","Layout","fontSizeExtraLarge","Panel","List","PanelBody","fontSizeLarge","ListItem","fontSizeMedium","border","Set","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","custom","diagramIssues","diagramErrors","diagramUsers","diagramThroughput","diagramTransactionDuration","diagramApdex","diagramFailureRate","diagramLCP","diagramFID","diagramCLS","diagramCustom","aggregate","eventTypes","EventTypes","hidePrimarySelectorSet","hideParameterSelectorSet","getFunctionHelpText","timeWindowText","labelText","has","MenuItem","overflowEllipsis"],"mappings":"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","file":"chunks/app_views_alerts_wizard_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import Cookies from 'js-cookie';\n\nimport ConfigStore from 'app/stores/configStore';\n\nconst SUPERUSER_COOKIE_NAME = 'su';\n\n/**\n * Checking for just isSuperuser on a config object may not be enough as backend often checks for *active* superuser.\n * We therefore check both isSuperuser flag AND superuser session cookie.\n */\nexport function isActiveSuperuser() {\n  const {isSuperuser} = ConfigStore.get('user') || {};\n\n  if (isSuperuser) {\n    /**\n     * Superuser cookie cannot be checked for existence as it is HttpOnly.\n     * As a workaround, we try to change it to something else and if that fails we can assume that it's being present.\n     * There may be an edgecase where it's present and expired but for current usage it's not a big deal.\n     */\n    Cookies.set(SUPERUSER_COOKIE_NAME, 'test');\n\n    if (Cookies.get(SUPERUSER_COOKIE_NAME) === undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Breadcrumbs, {Crumb, CrumbDropdown} from 'app/components/breadcrumbs';\nimport IdBadge from 'app/components/idBadge';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Project} from 'app/types';\nimport {isActiveSuperuser} from 'app/utils/isActiveSuperuser';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withProjects from 'app/utils/withProjects';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Props = {\n  hasMetricAlerts: boolean;\n  orgSlug: string;\n  title: string;\n  projectSlug: string;\n  projects: Project[];\n  routes: RouteWithName[];\n  location: Location;\n  alertName?: string;\n  canChangeProject?: boolean;\n};\n\nfunction BuilderBreadCrumbs(props: Props) {\n  const {\n    orgSlug,\n    title,\n    alertName,\n    projectSlug,\n    projects,\n    routes,\n    canChangeProject,\n    location,\n  } = props;\n  const project = projects.find(({slug}) => projectSlug === slug);\n  const isSuperuser = isActiveSuperuser();\n\n  const projectCrumbLink = {\n    to: `/settings/${orgSlug}/projects/${projectSlug}/`,\n    label: <IdBadge project={project} avatarSize={18} disableLink />,\n    preserveGlobalSelection: true,\n  };\n  const projectCrumbDropdown = {\n    onSelect: ({value}) => {\n      browserHistory.push(\n        recreateRoute('', {\n          routes,\n          params: {orgId: orgSlug, projectId: value},\n          location,\n        })\n      );\n    },\n    label: <IdBadge project={project} avatarSize={18} disableLink />,\n    items: projects\n      .filter(proj => proj.isMember || isSuperuser)\n      .map((proj, index) => ({\n        index,\n        value: proj.slug,\n        label: (\n          <MenuItem>\n            <IdBadge\n              project={proj}\n              avatarProps={{consistentWidth: true}}\n              avatarSize={18}\n              disableLink\n            />\n          </MenuItem>\n        ),\n        searchKey: proj.slug,\n      })),\n  };\n  const projectCrumb = canChangeProject ? projectCrumbDropdown : projectCrumbLink;\n\n  const crumbs: (Crumb | CrumbDropdown)[] = [\n    {\n      to: `/organizations/${orgSlug}/alerts/rules/`,\n      label: t('Alerts'),\n      preserveGlobalSelection: true,\n    },\n    projectCrumb,\n    {\n      label: title,\n      ...(alertName\n        ? {\n            to: `/organizations/${orgSlug}/alerts/${projectSlug}/wizard`,\n            preserveGlobalSelection: true,\n          }\n        : {}),\n    },\n  ];\n  if (alertName) {\n    crumbs.push({label: alertName});\n  }\n\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  font-size: 18px;\n  margin-bottom: ${space(3)};\n`;\n\nexport default withProjects(BuilderBreadCrumbs);\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Radio from 'app/components/radio';\nimport space from 'app/styles/space';\n\ntype RadioPanelGroupProps<C extends string> = {\n  label: string;\n  /**\n   * An array of [id, name]\n   */\n  choices: [C, React.ReactNode, React.ReactNode?][];\n  value: string | null;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n};\n\ntype Props<C extends string> = RadioPanelGroupProps<C> &\n  Omit<React.HTMLAttributes<HTMLDivElement>, keyof RadioPanelGroupProps<C>>;\n\nconst RadioPanelGroup = <C extends string>({\n  value,\n  choices,\n  label,\n  onChange,\n  ...props\n}: Props<C>) => (\n  <Container {...props} role=\"radiogroup\" aria-labelledby={label}>\n    {(choices || []).map(([id, name, extraContent], index) => (\n      <RadioPanel key={index}>\n        <RadioLineItem role=\"radio\" index={index} aria-checked={value === id}>\n          <Radio\n            radioSize=\"small\"\n            aria-label={id}\n            checked={value === id}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => onChange(id, e)}\n          />\n          <div>{name}</div>\n          {extraContent}\n        </RadioLineItem>\n      </RadioPanel>\n    ))}\n  </Container>\n);\n\nexport default RadioPanelGroup;\n\nconst Container = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: row;\n  grid-auto-rows: max-content;\n  grid-auto-columns: auto;\n`;\n\nconst RadioLineItem = styled('label')<{\n  index: number;\n}>`\n  display: grid;\n  grid-gap: ${space(0.25)} ${space(1)};\n  grid-template-columns: max-content auto max-content;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n  color: ${p => p.theme.subText};\n  transition: color 0.3s ease-in;\n  padding: 0;\n  position: relative;\n\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n\n  svg {\n    display: none;\n    opacity: 0;\n  }\n\n  &[aria-checked='true'] {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst RadioPanel = styled('div')`\n  margin: 0;\n`;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'app/components/acl/feature';\nimport FeatureDisabled from 'app/components/acl/featureDisabled';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport Hovercard from 'app/components/hovercard';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport {Dataset} from 'app/views/alerts/incidentRules/types';\n\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardOptions,\n  AlertWizardPanelContent,\n  AlertWizardRuleTemplates,\n} from './options';\nimport RadioPanelGroup from './radioPanelGroup';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype State = {\n  alertOption: AlertType;\n};\n\nconst DEFAULT_ALERT_OPTION = 'issues';\n\nclass AlertWizard extends Component<Props, State> {\n  state: State = {\n    alertOption: DEFAULT_ALERT_OPTION,\n  };\n\n  componentDidMount() {\n    // capture landing on the alert wizard page and viewing the issue alert by default\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'alert_wizard.option_viewed',\n      eventName: 'Alert Wizard: Option Viewed',\n      organization_id: organization.id,\n      alert_type: DEFAULT_ALERT_OPTION,\n    });\n  }\n\n  handleChangeAlertOption = (alertOption: AlertType) => {\n    const {organization} = this.props;\n    this.setState({alertOption});\n    trackAnalyticsEvent({\n      eventKey: 'alert_wizard.option_viewed',\n      eventName: 'Alert Wizard: Option Viewed',\n      organization_id: organization.id,\n      alert_type: alertOption,\n    });\n  };\n\n  renderCreateAlertButton() {\n    const {\n      organization,\n      location,\n      params: {projectId},\n    } = this.props;\n    const {alertOption} = this.state;\n    const metricRuleTemplate = AlertWizardRuleTemplates[alertOption];\n    const isMetricAlert = !!metricRuleTemplate;\n    const isTransactionDataset = metricRuleTemplate?.dataset === Dataset.TRANSACTIONS;\n\n    const to = {\n      pathname: `/organizations/${organization.slug}/alerts/${projectId}/new/`,\n      query: {\n        ...(metricRuleTemplate && metricRuleTemplate),\n        createFromWizard: true,\n        referrer: location?.query?.referrer,\n      },\n    };\n\n    const noFeatureMessage = t('Requires incidents feature.');\n    const renderNoAccess = p => (\n      <Hovercard\n        body={\n          <FeatureDisabled\n            features={p.features}\n            hideHelpToggle\n            message={noFeatureMessage}\n            featureName={noFeatureMessage}\n          />\n        }\n      >\n        {p.children(p)}\n      </Hovercard>\n    );\n\n    return (\n      <Feature\n        features={\n          isTransactionDataset\n            ? ['incidents', 'performance-view']\n            : isMetricAlert\n            ? ['incidents']\n            : []\n        }\n        requireAll\n        organization={organization}\n        hookName=\"feature-disabled:alert-wizard-performance\"\n        renderDisabled={renderNoAccess}\n      >\n        {({hasFeature}) => (\n          <WizardButtonContainer\n            onClick={() =>\n              trackAnalyticsEvent({\n                eventKey: 'alert_wizard.option_selected',\n                eventName: 'Alert Wizard: Option Selected',\n                organization_id: organization.id,\n                alert_type: alertOption,\n              })\n            }\n          >\n            <CreateAlertButton\n              organization={organization}\n              projectSlug={projectId}\n              disabled={!hasFeature}\n              priority=\"primary\"\n              to={to}\n              hideIcon\n            >\n              {t('Set Conditions')}\n            </CreateAlertButton>\n          </WizardButtonContainer>\n        )}\n      </Feature>\n    );\n  }\n\n  render() {\n    const {\n      hasMetricAlerts,\n      organization,\n      params: {projectId},\n      routes,\n      location,\n    } = this.props;\n    const {alertOption} = this.state;\n    const title = t('Alert Creation Wizard');\n    const panelContent = AlertWizardPanelContent[alertOption];\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              hasMetricAlerts={hasMetricAlerts}\n              orgSlug={organization.slug}\n              projectSlug={projectId}\n              title={t('Select Alert')}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>{t('Select Alert')}</Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <StyledLayoutBody>\n          <Layout.Main fullWidth>\n            <WizardBody>\n              <WizardOptions>\n                <Styledh2>{t('Errors')}</Styledh2>\n                {AlertWizardOptions.map(({categoryHeading, options}, i) => (\n                  <OptionsWrapper key={categoryHeading}>\n                    {i > 0 && <Styledh2>{categoryHeading}</Styledh2>}\n                    <RadioPanelGroup\n                      choices={options.map(alertType => {\n                        return [alertType, AlertWizardAlertNames[alertType]];\n                      })}\n                      onChange={this.handleChangeAlertOption}\n                      value={alertOption}\n                      label=\"alert-option\"\n                    />\n                  </OptionsWrapper>\n                ))}\n              </WizardOptions>\n              <WizardPanel visible={!!panelContent && !!alertOption}>\n                <WizardPanelBody>\n                  <div>\n                    <PanelHeader>{AlertWizardAlertNames[alertOption]}</PanelHeader>\n                    <PanelBody withPadding>\n                      <PanelDescription>\n                        {panelContent.description}{' '}\n                        {panelContent.docsLink && (\n                          <ExternalLink href={panelContent.docsLink}>\n                            {t('Learn more')}\n                          </ExternalLink>\n                        )}\n                      </PanelDescription>\n                      <WizardImage src={panelContent.illustration} />\n                      <ExampleHeader>{t('Examples')}</ExampleHeader>\n                      <ExampleList symbol=\"bullet\">\n                        {panelContent.examples.map((example, i) => (\n                          <ExampleItem key={i}>{example}</ExampleItem>\n                        ))}\n                      </ExampleList>\n                    </PanelBody>\n                  </div>\n                  <WizardFooter>{this.renderCreateAlertButton()}</WizardFooter>\n                </WizardPanelBody>\n              </WizardPanel>\n            </WizardBody>\n          </Layout.Main>\n        </StyledLayoutBody>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n`;\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nconst Styledh2 = styled('h2')`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)} !important;\n`;\n\nconst WizardBody = styled('div')`\n  display: flex;\n  padding-top: ${space(1)};\n`;\n\nconst WizardOptions = styled('div')`\n  flex: 3;\n  margin-right: ${space(3)};\n  padding-right: ${space(3)};\n  max-width: 300px;\n`;\n\nconst WizardImage = styled('img')`\n  max-height: 300px;\n`;\n\nconst WizardPanel = styled(Panel)<{visible?: boolean}>`\n  max-width: 700px;\n  position: sticky;\n  top: 20px;\n  flex: 5;\n  display: flex;\n  ${p => !p.visible && 'visibility: hidden'};\n  flex-direction: column;\n  align-items: start;\n  align-self: flex-start;\n  ${p => p.visible && 'animation: 0.6s pop ease forwards'};\n\n  @keyframes pop {\n    0% {\n      transform: translateY(30px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n`;\n\nconst ExampleList = styled(List)`\n  margin-bottom: ${space(2)} !important;\n`;\n\nconst WizardPanelBody = styled(PanelBody)`\n  flex: 1;\n  min-width: 100%;\n`;\n\nconst PanelDescription = styled('p')`\n  margin-bottom: ${space(2)};\n`;\n\nconst ExampleHeader = styled('div')`\n  margin: 0 0 ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst ExampleItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst OptionsWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst WizardFooter = styled('div')`\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1.5)} ${space(1.5)} ${space(1.5)} ${space(1.5)};\n`;\n\nconst WizardButtonContainer = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport default AlertWizard;\n","import diagramApdex from 'sentry-images/spot/alerts-wizard-apdex.svg';\nimport diagramCLS from 'sentry-images/spot/alerts-wizard-cls.svg';\nimport diagramCustom from 'sentry-images/spot/alerts-wizard-custom.svg';\nimport diagramErrors from 'sentry-images/spot/alerts-wizard-errors.svg';\nimport diagramFailureRate from 'sentry-images/spot/alerts-wizard-failure-rate.svg';\nimport diagramFID from 'sentry-images/spot/alerts-wizard-fid.svg';\nimport diagramIssues from 'sentry-images/spot/alerts-wizard-issues.svg';\nimport diagramLCP from 'sentry-images/spot/alerts-wizard-lcp.svg';\nimport diagramThroughput from 'sentry-images/spot/alerts-wizard-throughput.svg';\nimport diagramTransactionDuration from 'sentry-images/spot/alerts-wizard-transaction-duration.svg';\nimport diagramUsers from 'sentry-images/spot/alerts-wizard-users-experiencing-errors.svg';\n\nimport {t} from 'app/locale';\nimport {Dataset, EventTypes} from 'app/views/alerts/incidentRules/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom';\n\nexport const WebVitalAlertTypes = new Set(['lcp', 'fid', 'cls', 'fcp']);\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n};\n\nexport const AlertWizardOptions: {\n  categoryHeading: string;\n  options: AlertType[];\n}[] = [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\ntype PanelContent = {\n  description: string;\n  docsLink?: string;\n  examples: string[];\n  illustration?: string;\n};\n\nexport const AlertWizardPanelContent: Record<AlertType, PanelContent> = {\n  issues: {\n    description: t(\n      'Issues are groups of errors that have a similar stacktrace. Set an alert for new issues, when an issue changes state, frequency of errors, or users affected by an issue.'\n    ),\n    examples: [\n      t(\"When the triggering event's level is fatal.\"),\n      t('When an issue was seen 100 times in the last 2 days.'),\n      t(\n        'Create a JIRA ticket when an issue changes state from resolved to unresolved and is unassigned.'\n      ),\n    ],\n    illustration: diagramIssues,\n  },\n  num_errors: {\n    description: t(\n      'Alert when the number of errors in a project matching your filters crosses a threshold. This is useful for monitoring the overall level or errors in your project or errors occurring in specific parts of your app.'\n    ),\n    examples: [\n      t('When the signup page has more than 10k errors in 5 minutes.'),\n      t('When there are more than 500k errors in 10 minutes from a specific file.'),\n    ],\n    illustration: diagramErrors,\n  },\n  users_experiencing_errors: {\n    description: t(\n      'Alert when the number of users affected by errors in your project crosses a threshold.'\n    ),\n    examples: [\n      t('When 100k users experience an error in 1 hour.'),\n      t('When 100 users experience a problem on the Checkout page.'),\n    ],\n    illustration: diagramUsers,\n  },\n  throughput: {\n    description: t(\n      'Throughput is the total number of transactions in a project and you can alert when it reaches a threshold within a period of time.'\n    ),\n    examples: [\n      t('When number of transactions on a key page exceeds 100k per minute.'),\n      t('When number of transactions drops below a threshold.'),\n    ],\n    illustration: diagramThroughput,\n  },\n  trans_duration: {\n    description: t(\n      'Monitor how long it takes for transactions to complete. Use flexible aggregates like percentiles, averages, and min/max.'\n    ),\n    examples: [\n      t('When any transaction is slower than 3 seconds.'),\n      t('When the 75th percentile response time is higher than 250 milliseconds.'),\n    ],\n    illustration: diagramTransactionDuration,\n  },\n  apdex: {\n    description: t(\n      'Apdex is a metric used to track and measure user satisfaction based on your application response times. The Apdex score provides the ratio of satisfactory, tolerable, and frustrated requests in a specific transaction or endpoint.'\n    ),\n    examples: [t('When apdex is below 300.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#apdex',\n    illustration: diagramApdex,\n  },\n  failure_rate: {\n    description: t(\n      'Failure rate is the percentage of unsuccessful transactions. Sentry treats transactions with a status other than “ok,” “canceled,” and “unknown” as failures.'\n    ),\n    examples: [t('When the failure rate for an important endpoint reaches 10%.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#failure-rate',\n    illustration: diagramFailureRate,\n  },\n  lcp: {\n    description: t(\n      'Largest Contentful Paint (LCP) measures loading performance. It marks the point when the largest image or text block is visible within the viewport. A fast LCP helps reassure the user that the page is useful, and so we recommend an LCP of less than 2.5 seconds.'\n    ),\n    examples: [\n      t('When the 75th percentile LCP of your homepage is longer than 2.5 seconds.'),\n    ],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramLCP,\n  },\n  fid: {\n    description: t(\n      'First Input Delay (FID) measures interactivity as the response time when the user tries to interact with the viewport. A low FID helps ensure that a page is useful, and we recommend a FID of less than 100 milliseconds.'\n    ),\n    examples: [t('When the average FID of a page is longer than 4 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramFID,\n  },\n  cls: {\n    description: t(\n      'Cumulative Layout Shift (CLS) measures visual stability by quantifying unexpected layout shifts that occur during the entire lifespan of the page. A CLS of less than 0.1 is a good user experience, while anything greater than 0.25 is poor.'\n    ),\n    examples: [t('When the CLS of a page is more than 0.5.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramCLS,\n  },\n  custom: {\n    description: t(\n      'Alert on metrics which are not listed above, such as first paint (FP), first contentful paint (FCP), and time to first byte (TTFB).'\n    ),\n    examples: [\n      t('When the 95th percentile FP of a page is longer than 250 milliseconds.'),\n      t('When the average TTFB of a page is longer than 600 millliseconds.'),\n    ],\n    illustration: diagramCustom,\n  },\n};\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  Exclude<AlertType, 'issues'>,\n  WizardRuleTemplate\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(tags[sentry:user])',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n};\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nexport function getFunctionHelpText(alertType: AlertType): {\n  labelText: string;\n  timeWindowText?: string;\n} {\n  const timeWindowText = t('over');\n  if (alertType === 'apdex') {\n    return {\n      labelText: t('Select apdex value and time interval'),\n      timeWindowText,\n    };\n  } else if (hidePrimarySelectorSet.has(alertType)) {\n    return {\n      labelText: t('Select time interval'),\n    };\n  } else {\n    return {\n      labelText: t('Select function and time interval'),\n      timeWindowText,\n    };\n  }\n}\n","import styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nconst MenuItem = styled('div')`\n  font-size: 14px;\n  ${overflowEllipsis};\n`;\n\nexport default MenuItem;\n"],"sourceRoot":""}