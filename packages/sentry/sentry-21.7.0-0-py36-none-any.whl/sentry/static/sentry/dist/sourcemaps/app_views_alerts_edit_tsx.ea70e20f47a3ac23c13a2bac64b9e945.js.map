{"version":3,"sources":["webpack:///./app/views/alerts/incidentRules/details.tsx","webpack:///./app/views/alerts/edit.tsx"],"names":["IncidentRulesDetails","router","props","orgId","params","metric","name","push","actions","Map","this","ruleId","stateKey","data","onChangeTitle","teams","rule","state","userTeamIds","filter","isMember","map","id","onSubmitSuccess","handleSubmitSuccess","AsyncView","withTeams","ProjectAlertsEditor","alertType","ruleName","setState","hasMetricAlerts","location","organization","project","routes","pathname","includes","Fragment","title","getTitle","orgSlug","slug","projectSlug","t","EditConditionsBody","fullWidth","handleChangeTitle","Component","Layout","space"],"mappings":"w2FA2BMA,E,uoBAoBkB,WACpB,IAAOC,EAAU,EAAKC,MAAfD,OACAE,EAAS,EAAKD,MAAME,OAApBD,MAEPE,oBAAsB,CAACC,KAAM,kBAC7BL,EAAOM,KAAP,yBAA8BJ,EAA9B,sB,gDAxBF,WACE,mFAEEK,QAAS,IAAIC,Q,0BAIjB,WACE,MAAwBC,KAAKR,MAAME,OAA5BD,EAAP,EAAOA,MAAOQ,EAAd,EAAcA,OAEd,MAAO,CAAC,CAAC,OAAD,yBAA2BR,EAA3B,wBAAgDQ,EAAhD,S,8BAGV,YAAmC,IAAjBC,EAAiB,EAAjBA,SAAUC,EAAO,EAAPA,KACT,SAAbD,GAAuBC,EAAKP,MAC9BI,KAAKR,MAAMY,cAAcD,EAAKP,Q,wBAYlC,WACE,IAAOS,EAASL,KAAKR,MAAda,MACAJ,EAAUD,KAAKR,MAAME,OAArBO,OACAK,EAAQN,KAAKO,MAAbD,KAEDE,EAAcH,EAAMI,QAAO,qBAAEC,YAAwBC,KAAI,qBAAEC,MAEjE,OACE,QAAC,IAAD,OACMZ,KAAKR,OADX,IAEES,OAAQA,EACRK,KAAMA,EACNO,gBAAiBb,KAAKc,oBACtBN,YAAaA,S,GAzCcO,KA+CnC,GAAeC,OAAU1B,G,6nBC5CnB2B,E,wnBACW,CACbC,UAAW,GACXC,SAAU,M,uCAGQ,SAAAA,GAClB,EAAKC,SAAS,CAACD,gB,yCAGjB,WACE,IAAOA,EAAYnB,KAAKO,MAAjBY,SACP,gBAAUA,K,oBAGZ,WACE,MAAmEnB,KAAKR,MAAjE6B,EAAP,EAAOA,gBAAiBC,EAAxB,EAAwBA,SAAUC,EAAlC,EAAkCA,aAAcC,EAAhD,EAAgDA,QAASC,EAAzD,EAAyDA,OAEnDP,EAAYI,EAASI,SAASC,SAAS,yBACzC,SACA,QAEJ,OACE,QAAC,EAAAC,SAAD,YACE,QAAC,IAAD,CACEC,MAAO7B,KAAK8B,WACZC,QAASR,EAAaS,KACtBC,YAAaT,EAAQQ,QAEvB,QAAC,KAAD,WACE,QAAC,KAAD,YACE,QAAC,IAAD,CACEX,gBAAiBA,EACjBU,QAASR,EAAaS,KACtBH,OAAOK,OAAE,mBACTD,YAAaT,EAAQQ,KACrBP,OAAQA,EACRH,SAAUA,KAEZ,QAAC,KAAD,UAAetB,KAAK8B,mBAGxB,QAACK,EAAD,WACE,QAAC,KAAD,CAAaC,WAAS,EAAtB,YACKf,GAAiC,UAAdH,KACpB,QAAC,IAAD,OACMlB,KAAKR,OADX,IAEEgC,QAASA,EACTpB,cAAeJ,KAAKqC,qBAGvBhB,GAAiC,WAAdH,IAClB,QAAC,EAAD,OACMlB,KAAKR,OADX,IAEEgC,QAASA,EACTpB,cAAeJ,KAAKqC,iC,GAvDFC,aAA5BrB,E,kCAiEN,IAAMkB,GAAqB,OAAOI,KAAP,qBAAH,mBACJC,OAAM,GADF,kCAQxB","file":"chunks/app_views_alerts_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project, Team} from 'app/types';\nimport {metric} from 'app/utils/analytics';\nimport withTeams from 'app/utils/withTeams';\nimport RuleForm from 'app/views/alerts/incidentRules/ruleForm';\nimport {IncidentRule} from 'app/views/alerts/incidentRules/types';\nimport AsyncView from 'app/views/asyncView';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = {\n  organization: Organization;\n  onChangeTitle: (data: string) => void;\n  project: Project;\n  teams: Team[];\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  rule: IncidentRule;\n  actions: Map<string, any>; // This is temp\n} & AsyncView['state'];\n\nclass IncidentRulesDetails extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      actions: new Map(),\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, ruleId} = this.props.params;\n\n    return [['rule', `/organizations/${orgId}/alert-rules/${ruleId}/`]];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    if (stateKey === 'rule' && data.name) {\n      this.props.onChangeTitle(data.name);\n    }\n  }\n\n  handleSubmitSuccess = () => {\n    const {router} = this.props;\n    const {orgId} = this.props.params;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push(`/organizations/${orgId}/alerts/rules/`);\n  };\n\n  renderBody() {\n    const {teams} = this.props;\n    const {ruleId} = this.props.params;\n    const {rule} = this.state;\n\n    const userTeamIds = teams.filter(({isMember}) => isMember).map(({id}) => id);\n\n    return (\n      <RuleForm\n        {...this.props}\n        ruleId={ruleId}\n        rule={rule}\n        onSubmitSuccess={this.handleSubmitSuccess}\n        userTeamIds={userTeamIds}\n      />\n    );\n  }\n}\n\nexport default withTeams(IncidentRulesDetails);\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'app/components/layouts/thirds';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport IncidentRulesDetails from 'app/views/alerts/incidentRules/details';\nimport IssueEditor from 'app/views/alerts/issueRuleEditor';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype State = {\n  alertType: string;\n  ruleName: string;\n};\n\nclass ProjectAlertsEditor extends Component<Props, State> {\n  state: State = {\n    alertType: '',\n    ruleName: '',\n  };\n\n  handleChangeTitle = ruleName => {\n    this.setState({ruleName});\n  };\n\n  getTitle() {\n    const {ruleName} = this.state;\n    return `${ruleName}`;\n  }\n\n  render() {\n    const {hasMetricAlerts, location, organization, project, routes} = this.props;\n\n    const alertType = location.pathname.includes('/alerts/metric-rules/')\n      ? 'metric'\n      : 'issue';\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle\n          title={this.getTitle()}\n          orgSlug={organization.slug}\n          projectSlug={project.slug}\n        />\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <BuilderBreadCrumbs\n              hasMetricAlerts={hasMetricAlerts}\n              orgSlug={organization.slug}\n              title={t('Edit Alert Rule')}\n              projectSlug={project.slug}\n              routes={routes}\n              location={location}\n            />\n            <Layout.Title>{this.getTitle()}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <EditConditionsBody>\n          <Layout.Main fullWidth>\n            {(!hasMetricAlerts || alertType === 'issue') && (\n              <IssueEditor\n                {...this.props}\n                project={project}\n                onChangeTitle={this.handleChangeTitle}\n              />\n            )}\n            {hasMetricAlerts && alertType === 'metric' && (\n              <IncidentRulesDetails\n                {...this.props}\n                project={project}\n                onChangeTitle={this.handleChangeTitle}\n              />\n            )}\n          </Layout.Main>\n        </EditConditionsBody>\n      </Fragment>\n    );\n  }\n}\n\nconst EditConditionsBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n\n  *:not(img) {\n    max-width: 1000px;\n  }\n`;\n\nexport default ProjectAlertsEditor;\n"],"sourceRoot":""}