{"version":3,"sources":["webpack:///./app/views/acceptProjectTransfer.tsx","webpack:///./app/views/asyncView.tsx"],"names":["AcceptProjectTransfer","formData","api","request","method","data","props","location","query","organization","success","orgSlug","router","push","addSuccessMessage","t","error","errorMsg","responseJSON","detail","addErrorMessage","this","disableLog","transferDetails","state","options","organizations","map","org","label","slug","value","title","tct","projectSettings","project","onSubmit","handleSubmit","submitLabel","submitPriority","initialData","undefined","name","style","borderBottom","AsyncView","getTitle","renderComponent","AsyncComponent"],"mappings":"oxCAsBMA,E,goBAUW,SAAAC,GACb,EAAKC,IAAIC,QAAQ,oBAAqB,CACpCC,OAAQ,OACRC,KAAM,CACJA,KAAM,EAAKC,MAAMC,SAASC,MAAMH,KAChCI,aAAcR,EAASQ,cAEzBC,QAAS,WACP,IAAMC,EAAUV,EAASQ,aAEzB,EAAKH,MAAMM,OAAOC,KAAlB,WAA2BF,KAC3BG,SAAkBC,OAAE,sCAEtBC,MAAO,SAAAA,GACL,IAAMC,EACJD,GAASA,EAAME,cAAqD,iBAA9BF,EAAME,aAAaC,OACrDH,EAAME,aAAaC,OACnB,IAENC,SACEL,OAAE,8BAAgCE,EAAlC,YAAkDA,GAAa,U,6CA7BvE,WAEE,MAAO,CAAC,CAAC,kBAAmB,oBAAqB,CAACT,MADpCa,KAAKf,MAAMC,SAASC,W,sBAIpC,WACE,OAAOO,OAAE,6B,yBA6BX,SAAYC,GACV,IAAIM,GAAa,EAQjB,OALIN,GAASA,EAAME,cAAqD,iBAA9BF,EAAME,aAAaC,UAC3DC,QAAgBJ,EAAME,aAAaC,QACnCG,GAAa,IAGf,0DAAyBN,EAAOM,K,wBAGlC,WAAa,MACJC,EAAmBF,KAAKG,MAAxBD,gBACDE,EAAUF,aAAH,EAAGA,EAAiBG,cAAcC,KAAI,SAAAC,GAAG,MAAK,CACzDC,MAAOD,EAAIE,KACXC,MAAOH,EAAIE,SAEPrB,EAAegB,SAAH,UAAGA,EAAU,UAAb,aAAG,EAAcM,MAEnC,OACE,QAAC,IAAD,YACE,QAAC,IAAD,CAAoBC,OAAOjB,OAAE,uCAC7B,uBACGkB,QACC,mQAIA,CACExB,cAAc,4BAASM,OAAE,kBACzBmB,iBAAiB,4BAASnB,OAAE,0BAIjCQ,IACC,uBACGU,QACC,yEACA,CACExB,cAAc,4BAASM,OAAE,kBACzBoB,QAASZ,EAAgBY,QAAQL,UAKzC,QAAC,IAAD,CACEM,SAAUf,KAAKgB,aACfC,aAAavB,OAAE,oBACfwB,eAAe,SACfC,YAAa/B,EAAe,CAACA,qBAAgBgC,EAJ/C,UAME,QAAC,IAAD,CACEhB,QAASA,EACTI,OAAOd,OAAE,gBACT2B,KAAK,eACLC,MAAO,CAACC,aAAc,mB,GA5FEC,KAoGpC,a,muBClHqBA,E,0iBAInB,WACE,MAAO,K,oBAGT,WACE,IAAMb,EAAQX,KAAKyB,WACnB,OACE,QAAC,IAAD,CAAed,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGX,KAAK0B,wB,GATJC,KAHWH,E","file":"chunks/app_views_acceptProjectTransfer_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport NarrowLayout from 'app/components/narrowLayout';\nimport {t, tct} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype Props = RouteComponentProps<{}, {}>;\n\ntype TransferDetails = {\n  organizations: Organization[];\n  project: Project;\n};\n\ntype State = {\n  transferDetails: TransferDetails | null;\n} & AsyncView['state'];\n\nclass AcceptProjectTransfer extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const query = this.props.location.query;\n    return [['transferDetails', '/accept-transfer/', {query}]];\n  }\n\n  getTitle() {\n    return t('Accept Project Transfer');\n  }\n\n  handleSubmit = formData => {\n    this.api.request('/accept-transfer/', {\n      method: 'POST',\n      data: {\n        data: this.props.location.query.data,\n        organization: formData.organization,\n      },\n      success: () => {\n        const orgSlug = formData.organization;\n\n        this.props.router.push(`/${orgSlug}`);\n        addSuccessMessage(t('Project successfully transferred'));\n      },\n      error: error => {\n        const errorMsg =\n          error && error.responseJSON && typeof error.responseJSON.detail === 'string'\n            ? error.responseJSON.detail\n            : '';\n\n        addErrorMessage(\n          t('Unable to transfer project') + errorMsg ? `: ${errorMsg}` : ''\n        );\n      },\n    });\n  };\n\n  renderError(error) {\n    let disableLog = false;\n    // Check if there is an error message with `transferDetails` endpoint\n    // If so, show as toast and ignore, otherwise log to sentry\n    if (error && error.responseJSON && typeof error.responseJSON.detail === 'string') {\n      addErrorMessage(error.responseJSON.detail);\n      disableLog = true;\n    }\n\n    return super.renderError(error, disableLog);\n  }\n\n  renderBody() {\n    const {transferDetails} = this.state;\n    const options = transferDetails?.organizations.map(org => ({\n      label: org.slug,\n      value: org.slug,\n    }));\n    const organization = options?.[0]?.value;\n\n    return (\n      <NarrowLayout>\n        <SettingsPageHeader title={t('Approve Transfer Project Request')} />\n        <p>\n          {tct(\n            'Projects must be transferred to a specific [organization]. ' +\n              'You can grant specific teams access to the project later under the [projectSettings]. ' +\n              '(Note that granting access to at least one team is necessary for the project to ' +\n              'appear in all parts of the UI.)',\n            {\n              organization: <strong>{t('Organization')}</strong>,\n              projectSettings: <strong>{t('Project Settings')}</strong>,\n            }\n          )}\n        </p>\n        {transferDetails && (\n          <p>\n            {tct(\n              'Please select which [organization] you want for the project [project].',\n              {\n                organization: <strong>{t('Organization')}</strong>,\n                project: transferDetails.project.slug,\n              }\n            )}\n          </p>\n        )}\n        <Form\n          onSubmit={this.handleSubmit}\n          submitLabel={t('Transfer Project')}\n          submitPriority=\"danger\"\n          initialData={organization ? {organization} : undefined}\n        >\n          <SelectField\n            options={options}\n            label={t('Organization')}\n            name=\"organization\"\n            style={{borderBottom: 'none'}}\n          />\n        </Form>\n      </NarrowLayout>\n    );\n  }\n}\n\nexport default AcceptProjectTransfer;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n"],"sourceRoot":""}