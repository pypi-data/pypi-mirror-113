{"version":3,"sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/organizationRepositories/organizationRepositories.tsx","webpack:///./app/views/settings/organizationRepositories/index.tsx"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","OrganizationRepositories","itemList","onRepositoryChange","api","orgId","params","hasItemList","length","title","t","to","className","tct","link","href","map","repo","repository","showProvider","id","icon","size","description","action","OrganizationRepositoriesContainer","data","state","forEach","item","status","setState","this","props","query","routeTitleGen","itemListPageLinks","Fragment","pageLinks","AsyncView"],"mappings":"6NAYA,IAZA,SACEA,EACAC,GAGQ,IAFRC,IAEQ,yDADRC,EACQ,uCACFC,EAAW,GAAH,OAAMJ,EAAN,cAAqBC,GAC7BI,EAAOF,EAAc,GAAH,OAAMC,EAAN,cAAoBD,GAAgBC,EAE5D,OAAOF,EAAa,GAAH,OAAMG,EAAN,aAAwBA,I,qxDCWrCC,EAA2B,SAAC,GAAuD,IAAtDC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,mBAAoBC,EAAwB,EAAxBA,IACxDC,EADgF,EAAnBC,OAC7DD,MACDE,EAAcL,GAAYA,EAASM,OAAS,EAElD,OACE,0BACE,QAAC,IAAD,CAAoBC,OAAOC,OAAE,mBAC7B,QAAC,IAAD,CAAWC,GAAE,oBAAeN,EAAf,kBAAb,UACGK,OACC,sHAGFH,IACA,eAAKK,UAAU,QAAf,UACE,QAAC,IAAD,YACGF,OACC,+PAFJ,KAOGG,QAAI,iDAAkD,CACrDC,MAAM,aAAGC,KAAK,kDAMrBR,GACC,QAAC,KAAD,YACE,QAAC,KAAD,WAAcG,OAAE,yBAChB,QAAC,IAAD,WACE,wBACGR,EAASc,KAAI,SAAAC,GAAI,OAChB,QAAC,IAAD,CAEEC,WAAYD,EACZb,IAAKA,EACLe,cAAY,EACZd,MAAOA,EACPF,mBAAoBA,GALfc,EAAKG,eAYpB,QAAC,KAAD,WACE,QAAC,IAAD,CACEC,MAAM,QAAC,KAAD,CAAYC,KAAK,OACvBb,OAAOC,OAAE,qCACTa,aAAab,OACX,2HAEFc,QACE,QAAC,KAAD,CAAQT,KAAK,yCAAb,UACGL,OAAE,wBAxDbT,E,uCAkEN,Q,ykBCrEqBwB,E,soBAOE,SAACC,GACpB,IAAMxB,EAAW,EAAKyB,MAAMzB,SAC5BA,WAAU0B,SAAQ,SAAAC,GACZA,EAAKT,KAAOM,EAAKN,KACnBS,EAAKC,OAASJ,EAAKI,WAGvB,EAAKC,SAAS,CAAC7B,gB,6CAbjB,WACE,IAAOG,EAAS2B,KAAKC,MAAM3B,OAApBD,MACP,MAAO,CAAC,CAAC,WAAD,yBAA+BA,EAA/B,WAA+C,CAAC6B,MAAO,CAACJ,OAAQ,S,sBAc1E,WACE,IAAOzB,EAAS2B,KAAKC,MAAM3B,OAApBD,MACP,OAAO8B,QAAczB,OAAE,gBAAiBL,GAAO,K,wBAGjD,WACE,MAAsC2B,KAAKL,MAApCzB,EAAP,EAAOA,SAAUkC,EAAjB,EAAiBA,kBAEjB,OACE,QAAC,EAAAC,SAAD,YACE,QAAC,EAAD,OACML,KAAKC,OADX,IAEE/B,SAAUA,EACVE,IAAK4B,KAAK5B,IACVD,mBAAoB6B,KAAK7B,sBAE1BiC,IACC,QAAC,IAAD,GAAYE,UAAWF,GAAuBJ,KAAKC,e,GAlCEM","file":"chunks/app_views_settings_organizationRepositories_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'app/api';\nimport AlertLink from 'app/components/alertLink';\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport RepositoryRow from 'app/components/repositoryRow';\nimport {IconCommit} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Repository, RepositoryStatus} from 'app/types';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  itemList: Repository[];\n  onRepositoryChange: (data: {id: string; status: RepositoryStatus}) => void;\n  api: Client;\n};\n\nconst OrganizationRepositories = ({itemList, onRepositoryChange, api, params}: Props) => {\n  const {orgId} = params;\n  const hasItemList = itemList && itemList.length > 0;\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('Repositories')} />\n      <AlertLink to={`/settings/${orgId}/integrations/`}>\n        {t(\n          'Want to add a repository to start tracking commits? Install or configure your version control integration here.'\n        )}\n      </AlertLink>\n      {!hasItemList && (\n        <div className=\"m-b-2\">\n          <TextBlock>\n            {t(\n              'Connecting a repository allows Sentry to capture commit data via webhooks. ' +\n                'This enables features like suggested assignees and resolving issues via commit message. ' +\n                \"Once you've connected a repository, you can associate commits with releases via the API.\"\n            )}\n            &nbsp;\n            {tct('See our [link:documentation] for more details.', {\n              link: <a href=\"https://docs.sentry.io/learn/releases/\" />,\n            })}\n          </TextBlock>\n        </div>\n      )}\n\n      {hasItemList ? (\n        <Panel>\n          <PanelHeader>{t('Added Repositories')}</PanelHeader>\n          <PanelBody>\n            <div>\n              {itemList.map(repo => (\n                <RepositoryRow\n                  key={repo.id}\n                  repository={repo}\n                  api={api}\n                  showProvider\n                  orgId={orgId}\n                  onRepositoryChange={onRepositoryChange}\n                />\n              ))}\n            </div>\n          </PanelBody>\n        </Panel>\n      ) : (\n        <Panel>\n          <EmptyMessage\n            icon={<IconCommit size=\"xl\" />}\n            title={t('Sentry is better with commit data')}\n            description={t(\n              'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'\n            )}\n            action={\n              <Button href=\"https://docs.sentry.io/learn/releases/\">\n                {t('Learn more')}\n              </Button>\n            }\n          />\n        </Panel>\n      )}\n    </div>\n  );\n};\n\nexport default OrganizationRepositories;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Pagination from 'app/components/pagination';\nimport {t} from 'app/locale';\nimport {Repository} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\n\nimport OrganizationRepositories from './organizationRepositories';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & AsyncView['props'];\n\ntype State = AsyncView['state'] & {\n  itemList: Repository[] | null;\n};\n\nexport default class OrganizationRepositoriesContainer extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId} = this.props.params;\n    return [['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}]];\n  }\n\n  // Callback used by child component to signal state change\n  onRepositoryChange = (data: Pick<Repository, 'id' | 'status'>) => {\n    const itemList = this.state.itemList;\n    itemList?.forEach(item => {\n      if (item.id === data.id) {\n        item.status = data.status;\n      }\n    });\n    this.setState({itemList});\n  };\n\n  getTitle() {\n    const {orgId} = this.props.params;\n    return routeTitleGen(t('Repositories'), orgId, false);\n  }\n\n  renderBody() {\n    const {itemList, itemListPageLinks} = this.state;\n\n    return (\n      <Fragment>\n        <OrganizationRepositories\n          {...this.props}\n          itemList={itemList!}\n          api={this.api}\n          onRepositoryChange={this.onRepositoryChange}\n        />\n        {itemListPageLinks && (\n          <Pagination pageLinks={itemListPageLinks} {...this.props} />\n        )}\n      </Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}