{"version":3,"sources":["webpack:///./app/components/events/userFeedback.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/userFeedback/userFeedbackEmpty.tsx"],"names":["EventUserFeedback","this","props","report","orgId","issueId","eventID","className","user","name","email","id","username","ip_address","date","dateCreated","author","type","header","value","Email","StyledIconCopy","size","ViewEventLink","to","getUrl","t","dangerouslySetInnerHTML","__html","nl2br","escape","comments","Component","p","theme","fontSizeSmall","space","Link","IconCopy","OnboardingPanel","image","children","Container","IlloBox","StyledBox","breakpoints","UserFeedbackEmpty","organization","projectIds","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","hasAnyFeedback","trackAdhocEvent","eventKey","org_id","parseInt","projects","length","filter","includes","selectedProjects","some","hasUserReports","eventName","trackAnalyticsEvent","organization_id","loadingProjects","src","emptyStateImg","ButtonList","gap","external","priority","onClick","trackAnalytics","href","Sentry","eventId","ButtonBar","withOrganization","withProjects"],"mappings":"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","file":"chunks/app_components_events_userFeedback_tsx-app_views_userFeedback_userFeedbackEmpty_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport ActivityAuthor from 'app/components/activity/author';\nimport ActivityItem from 'app/components/activity/item';\nimport Clipboard from 'app/components/clipboard';\nimport Link from 'app/components/links/link';\nimport {IconCopy} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {UserReport} from 'app/types';\nimport {escape, nl2br} from 'app/utils';\n\ntype Props = {\n  report: UserReport;\n  orgId: string;\n  issueId: string;\n  className?: string;\n};\n\nclass EventUserFeedback extends Component<Props> {\n  getUrl() {\n    const {report, orgId, issueId} = this.props;\n\n    return `/organizations/${orgId}/issues/${issueId}/events/${report.eventID}/`;\n  }\n\n  render() {\n    const {className, report} = this.props;\n    const user = report.user || {\n      name: report.name,\n      email: report.email,\n      id: '',\n      username: '',\n      ip_address: '',\n    };\n\n    return (\n      <div className={className}>\n        <ActivityItem\n          date={report.dateCreated}\n          author={{type: 'user', user}}\n          header={\n            <div>\n              <ActivityAuthor>{report.name}</ActivityAuthor>\n              <Clipboard value={report.email}>\n                <Email>\n                  {report.email}\n                  <StyledIconCopy size=\"xs\" />\n                </Email>\n              </Clipboard>\n              {report.eventID && (\n                <ViewEventLink to={this.getUrl()}>{t('View event')}</ViewEventLink>\n              )}\n            </div>\n          }\n        >\n          <p\n            dangerouslySetInnerHTML={{\n              __html: nl2br(escape(report.comments)),\n            }}\n          />\n        </ActivityItem>\n      </div>\n    );\n  }\n}\n\nexport default EventUserFeedback;\n\nconst Email = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: normal;\n  cursor: pointer;\n  margin-left: ${space(1)};\n`;\n\nconst ViewEventLink = styled(Link)`\n  font-weight: 300;\n  margin-left: ${space(1)};\n  font-size: 0.9em;\n`;\n\nconst StyledIconCopy = styled(IconCopy)`\n  margin-left: ${space(1)};\n`;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\n\ntype Props = React.PropsWithChildren<{\n  image: React.ReactNode;\n  className?: string;\n}>;\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/feedback-empty-state.svg';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport OnboardingPanel from 'app/components/onboardingPanel';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport {trackAdhocEvent, trackAnalyticsEvent} from 'app/utils/analytics';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProjects from 'app/utils/withProjects';\n\ntype Props = {\n  organization: Organization;\n  projects: Project[];\n  loadingProjects: boolean;\n  projectIds?: string[];\n};\n\nclass UserFeedbackEmpty extends Component<Props> {\n  componentDidMount() {\n    const {organization, projectIds} = this.props;\n\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n\n    if (this.hasAnyFeedback === false) {\n      // send to reload only due to higher event volume\n      trackAdhocEvent({\n        eventKey: 'user_feedback.viewed',\n        org_id: parseInt(organization.id, 10),\n        projects: projectIds,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  get selectedProjects() {\n    const {projects, projectIds} = this.props;\n\n    return projectIds && projectIds.length\n      ? projects.filter(({id}) => projectIds.includes(id))\n      : projects;\n  }\n\n  get hasAnyFeedback() {\n    return this.selectedProjects.some(({hasUserReports}) => hasUserReports);\n  }\n\n  trackAnalytics({eventKey, eventName}: {eventKey: string; eventName: string}) {\n    const {organization, projectIds} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      projects: projectIds,\n    });\n  }\n\n  render() {\n    // Show no user reports if waiting for projects to load or if there is no feedback\n    if (this.props.loadingProjects || this.hasAnyFeedback !== false) {\n      return (\n        <EmptyStateWarning>\n          <p>{t('Sorry, no user reports match your filters.')}</p>\n        </EmptyStateWarning>\n      );\n    }\n    // Show landing page after projects have loaded and it is confirmed no projects have feedback\n    return (\n      <OnboardingPanel image={<img src={emptyStateImg} />}>\n        <h3>{t('What do users think?')}</h3>\n        <p>\n          {t(\n            `You can't read minds. At least we hope not. Ask users for feedback on the impact of their crashes or bugs and you shall receive.`\n          )}\n        </p>\n        <ButtonList gap={1}>\n          <Button\n            external\n            priority=\"primary\"\n            onClick={() =>\n              this.trackAnalytics({\n                eventKey: 'user_feedback.docs_clicked',\n                eventName: 'User Feedback Docs Clicked',\n              })\n            }\n            href=\"https://docs.sentry.io/product/user-feedback/\"\n          >\n            {t('Read the docs')}\n          </Button>\n          <Button\n            onClick={() => {\n              Sentry.showReportDialog({\n                // should never make it to the Sentry API, but just in case, use throwaway id\n                eventId: '00000000000000000000000000000000',\n              });\n\n              this.trackAnalytics({\n                eventKey: 'user_feedback.dialog_opened',\n                eventName: 'User Feedback Dialog Opened',\n              });\n            }}\n          >\n            {t('See an example')}\n          </Button>\n        </ButtonList>\n      </OnboardingPanel>\n    );\n  }\n}\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport {UserFeedbackEmpty};\n\nexport default withOrganization(withProjects(UserFeedbackEmpty));\n"],"sourceRoot":""}