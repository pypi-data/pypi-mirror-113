{"version":3,"sources":["webpack:///./app/views/alerts/list/row.tsx","webpack:///./app/views/alerts/rules/details/constants.tsx"],"names":["makeRuleDetailsQuery","incident","timeWindowMillis","alertRule","timeWindow","minRange","API_INTERVAL_POINTS_MIN","maxRange","API_INTERVAL_POINTS_LIMIT","now","moment","startDate","dateStarted","endDate","dateClosed","incidentRange","Math","max","diff","range","min","halfRange","start","getUtcDateString","subtract","end","add","AlertListRow","memoize","slug","projects","find","project","this","props","getIncidentMetricPreset","undefined","orgId","projectsLoaded","organization","started","duration","Date","as","alertLink","isIssueAlert","features","includes","pathname","alertDetailsLink","query","alert","identifier","ownerId","owner","split","teamName","TeamStore","name","teamActor","type","id","Title","to","title","NoWrap","getDynamicText","value","date","extraShort","fixed","status","IncidentStatus","seconds","t","ProjectBadge","avatarSize","getProject","FlexCenter","Fragment","StyledActorAvatar","actor","size","hasTooltip","TeamWrapper","Component","overflowEllipsis","IdBadge","ActorAvatar","space","TIME_OPTIONS","label","TimePeriod","TIME_WINDOWS","TimeWindow"],"mappings":"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","file":"chunks/app_views_alerts_list_row_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment';\n\nimport ActorAvatar from 'app/components/avatar/actorAvatar';\nimport Duration from 'app/components/duration';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport Tag from 'app/components/tag';\nimport TimeSince from 'app/components/timeSince';\nimport {t} from 'app/locale';\nimport TeamStore from 'app/stores/teamStore';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Actor, Organization, Project} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {alertDetailsLink} from 'app/views/alerts/details';\n\nimport {\n  API_INTERVAL_POINTS_LIMIT,\n  API_INTERVAL_POINTS_MIN,\n} from '../rules/details/constants';\nimport {Incident, IncidentStatus} from '../types';\nimport {getIncidentMetricPreset, isIssueAlert} from '../utils';\n\n/**\n * Retrieve the start/end for showing the graph of the metric\n * Will show at least 150 and no more than 10,000 data points\n */\nexport const makeRuleDetailsQuery = (\n  incident: Incident\n): {start: string; end: string} => {\n  const {timeWindow} = incident.alertRule;\n  const timeWindowMillis = timeWindow * 60 * 1000;\n  const minRange = timeWindowMillis * API_INTERVAL_POINTS_MIN;\n  const maxRange = timeWindowMillis * API_INTERVAL_POINTS_LIMIT;\n  const now = moment.utc();\n  const startDate = moment.utc(incident.dateStarted);\n  // make a copy of now since we will modify endDate and use now for comparing\n  const endDate = incident.dateClosed ? moment.utc(incident.dateClosed) : moment(now);\n  const incidentRange = Math.max(endDate.diff(startDate), 3 * timeWindowMillis);\n  const range = Math.min(maxRange, Math.max(minRange, incidentRange));\n  const halfRange = moment.duration(range / 2);\n\n  return {\n    start: getUtcDateString(startDate.subtract(halfRange)),\n    end: getUtcDateString(moment.min(endDate.add(halfRange), now)),\n  };\n};\n\ntype Props = {\n  incident: Incident;\n  projects: Project[];\n  projectsLoaded: boolean;\n  orgId: string;\n  organization: Organization;\n};\n\nclass AlertListRow extends Component<Props> {\n  get metricPreset() {\n    const {incident} = this.props;\n    return incident ? getIncidentMetricPreset(incident) : undefined;\n  }\n\n  /**\n   * Memoized function to find a project from a list of projects\n   */\n  getProject = memoize((slug: string, projects: Project[]) =>\n    projects.find(project => project.slug === slug)\n  );\n\n  render() {\n    const {incident, orgId, projectsLoaded, projects, organization} = this.props;\n    const slug = incident.projects[0];\n    const started = moment(incident.dateStarted);\n    const duration = moment\n      .duration(moment(incident.dateClosed || new Date()).diff(started))\n      .as('seconds');\n\n    const hasRedesign =\n      !isIssueAlert(incident.alertRule) &&\n      organization.features.includes('alert-details-redesign');\n\n    const alertLink = hasRedesign\n      ? {\n          pathname: alertDetailsLink(organization, incident),\n          query: {alert: incident.identifier},\n        }\n      : {\n          pathname: `/organizations/${orgId}/alerts/${incident.identifier}/`,\n        };\n    const ownerId = incident.alertRule.owner?.split(':')[1];\n    let teamName = '';\n    if (ownerId) {\n      teamName = TeamStore.getById(ownerId)?.name ?? '';\n    }\n    const teamActor = ownerId\n      ? {type: 'team' as Actor['type'], id: ownerId, name: teamName}\n      : null;\n\n    return (\n      <ErrorBoundary>\n        <Title>\n          <Link to={alertLink}>{incident.title}</Link>\n        </Title>\n\n        <NoWrap>\n          {getDynamicText({\n            value: <TimeSince date={incident.dateStarted} extraShort />,\n            fixed: '1w ago',\n          })}\n        </NoWrap>\n        <NoWrap>\n          {incident.status === IncidentStatus.CLOSED ? (\n            <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n          ) : (\n            <Tag type=\"warning\">{t('Still Active')}</Tag>\n          )}\n        </NoWrap>\n\n        <ProjectBadge\n          avatarSize={18}\n          project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}\n        />\n        <div>#{incident.id}</div>\n\n        <FlexCenter>\n          {teamActor ? (\n            <Fragment>\n              <StyledActorAvatar actor={teamActor} size={24} hasTooltip={false} />{' '}\n              <TeamWrapper>{teamActor.name}</TeamWrapper>\n            </Fragment>\n          ) : (\n            '-'\n          )}\n        </FlexCenter>\n      </ErrorBoundary>\n    );\n  }\n}\n\nconst Title = styled('div')`\n  ${overflowEllipsis}\n  min-width: 130px;\n`;\n\nconst NoWrap = styled('div')`\n  white-space: nowrap;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst FlexCenter = styled('div')`\n  ${overflowEllipsis}\n  display: flex;\n  align-items: center;\n`;\n\nconst TeamWrapper = styled('span')`\n  ${overflowEllipsis}\n`;\n\nconst StyledActorAvatar = styled(ActorAvatar)`\n  margin-right: ${space(1)};\n`;\n\nexport default AlertListRow;\n","import * as React from 'react';\n\nimport {t} from 'app/locale';\nimport {SelectValue} from 'app/types';\nimport {TimePeriod, TimeWindow} from 'app/views/alerts/incidentRules/types';\n\nexport const TIME_OPTIONS: SelectValue<string>[] = [\n  {label: t('Last 6 hours'), value: TimePeriod.SIX_HOURS},\n  {label: t('Last 24 hours'), value: TimePeriod.ONE_DAY},\n  {label: t('Last 3 days'), value: TimePeriod.THREE_DAYS},\n  {label: t('Last 7 days'), value: TimePeriod.SEVEN_DAYS},\n];\n\nexport const TIME_WINDOWS = {\n  [TimePeriod.SIX_HOURS]: TimeWindow.ONE_HOUR * 6 * 60 * 1000,\n  [TimePeriod.ONE_DAY]: TimeWindow.ONE_DAY * 60 * 1000,\n  [TimePeriod.THREE_DAYS]: TimeWindow.ONE_DAY * 3 * 60 * 1000,\n  [TimePeriod.SEVEN_DAYS]: TimeWindow.ONE_DAY * 7 * 60 * 1000,\n};\n\nexport const API_INTERVAL_POINTS_LIMIT = 10000;\nexport const API_INTERVAL_POINTS_MIN = 150;\n\nexport type TimePeriodType = {\n  start: string;\n  end: string;\n  period: string;\n  label: string;\n  display: React.ReactNode;\n  custom?: boolean;\n};\n"],"sourceRoot":""}