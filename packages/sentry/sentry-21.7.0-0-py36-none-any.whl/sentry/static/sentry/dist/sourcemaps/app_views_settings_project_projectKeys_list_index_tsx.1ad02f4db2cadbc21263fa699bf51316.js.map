{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectKeys/list/keyRow.tsx","webpack:///./app/views/settings/project/projectKeys/list/index.tsx","webpack:///./app/views/settings/project/projectKeys/projectKeyCredentials.tsx"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","KeyRow","props","data","onRemove","onToggle","access","editUrl","id","controlActive","has","controls","size","t","onClick","isActive","handleDisable","handleEnable","disabled","priority","onConfirm","handleRemove","confirmText","message","icon","hasButtons","Title","PanelHeaderLink","label","Controls","c","n","StyledClippedBox","clipHeight","defaultClipped","btnText","StyledPanelBody","projectId","Component","ClippedBox","space","Link","p","theme","subText","PanelBody","ProjectKeys","oldKeyList","state","keyList","addLoadingMessage","setState","filter","key","orgId","api","requestPromise","method","addSuccessMessage","addErrorMessage","routeTitleGen","description","organization","Set","Fragment","handleToggleKey","handleRemoveKey","pageLinks","keyListPageLinks","isEmpty","length","action","handleCreateKey","isCircled","tct","link","href","code","renderEmpty","renderResults","withOrganization","ProjectKeyCredentials","showDeprecatedDsn","showDsn","showDsnPublic","showSecurityEndpoint","showMinidump","showUnreal","showPublicKey","showSecretKey","showProjectId","inline","flexibleControlStateSize","help","toggleDeprecatedDsn","getDynamicText","value","dsn","public","fixed","StyledField","secret","security","minidump","unreal","Field"],"mappings":"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","file":"chunks/app_views_settings_project_projectKeys_list_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Component} from 'react';\nimport {Link, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport ClippedBox from 'app/components/clippedBox';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Scope} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport ProjectKeyCredentials from 'app/views/settings/project/projectKeys/projectKeyCredentials';\nimport {ProjectKey} from 'app/views/settings/project/projectKeys/types';\n\ntype Props = {\n  api: Client;\n  orgId: string;\n  projectId: string;\n  data: ProjectKey;\n  access: Set<Scope>;\n  onToggle: (isActive: boolean, data: ProjectKey) => void;\n  onRemove: (data: ProjectKey) => void;\n} & Pick<RouteComponentProps<{}, {}>, 'routes' | 'location' | 'params'>;\n\nclass KeyRow extends Component<Props> {\n  handleRemove = () => {\n    const {data, onRemove} = this.props;\n    onRemove(data);\n  };\n\n  handleEnable = () => {\n    const {onToggle, data} = this.props;\n    onToggle(true, data);\n  };\n\n  handleDisable = () => {\n    const {onToggle, data} = this.props;\n    onToggle(false, data);\n  };\n\n  render() {\n    const {access, data, routes, location, params} = this.props;\n    const editUrl = recreateRoute(`${data.id}/`, {routes, params, location});\n    const controlActive = access.has('project:write');\n\n    const controls = [\n      <Button key=\"edit\" to={editUrl} size=\"small\">\n        {t('Configure')}\n      </Button>,\n      <Button\n        key=\"toggle\"\n        size=\"small\"\n        onClick={data.isActive ? this.handleDisable : this.handleEnable}\n        disabled={!controlActive}\n      >\n        {data.isActive ? t('Disable') : t('Enable')}\n      </Button>,\n      <Confirm\n        key=\"remove\"\n        priority=\"danger\"\n        disabled={!controlActive}\n        onConfirm={this.handleRemove}\n        confirmText={t('Remove Key')}\n        message={t(\n          'Are you sure you want to remove this key? This action is irreversible.'\n        )}\n      >\n        <Button size=\"small\" disabled={!controlActive} icon={<IconDelete />} />\n      </Confirm>,\n    ];\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          <Title disabled={!data.isActive}>\n            <PanelHeaderLink to={editUrl}>{data.label}</PanelHeaderLink>\n            {!data.isActive && (\n              <small>\n                {' \\u2014  '}\n                {t('Disabled')}\n              </small>\n            )}\n          </Title>\n          <Controls>\n            {controls.map((c, n) => (\n              <span key={n}> {c}</span>\n            ))}\n          </Controls>\n        </PanelHeader>\n\n        <StyledClippedBox clipHeight={300} defaultClipped btnText={t('Expand')}>\n          <StyledPanelBody disabled={!data.isActive}>\n            <ProjectKeyCredentials projectId={`${data.projectId}`} data={data} />\n          </StyledPanelBody>\n        </StyledClippedBox>\n      </Panel>\n    );\n  }\n}\n\nexport default KeyRow;\n\nconst StyledClippedBox = styled(ClippedBox)`\n  padding: 0;\n  margin: 0;\n  > *:last-child {\n    padding-bottom: ${space(3)};\n  }\n`;\n\nconst PanelHeaderLink = styled(Link)`\n  color: ${p => p.theme.subText};\n`;\n\nconst Title = styled('div')<{disabled: boolean}>`\n  flex: 1;\n  ${p => (p.disabled ? 'opacity: 0.5;' : '')};\n  margin-right: ${space(1)};\n`;\n\nconst Controls = styled('div')`\n  display: grid;\n  align-items: center;\n  grid-gap: ${space(1)};\n  grid-auto-flow: column;\n`;\n\nconst StyledPanelBody = styled(PanelBody)<{disabled: boolean}>`\n  ${p => (p.disabled ? 'opacity: 0.5;' : '')};\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Pagination from 'app/components/pagination';\nimport {Panel} from 'app/components/panels';\nimport {IconAdd, IconFlag} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport {ProjectKey} from 'app/views/settings/project/projectKeys/types';\n\nimport KeyRow from './keyRow';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  keyList: ProjectKey[];\n} & AsyncView['state'];\n\nclass ProjectKeys extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Client Keys'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  /**\n   * Optimistically remove key\n   */\n  handleRemoveKey = async (data: ProjectKey) => {\n    const oldKeyList = [...this.state.keyList];\n\n    addLoadingMessage(t('Revoking key\\u2026'));\n\n    this.setState(state => ({\n      keyList: state.keyList.filter(key => key.id !== data.id),\n    }));\n\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      await this.api.requestPromise(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {\n        method: 'DELETE',\n      });\n      addSuccessMessage(t('Revoked key'));\n    } catch (_err) {\n      this.setState({\n        keyList: oldKeyList,\n      });\n      addErrorMessage(t('Unable to revoke key'));\n    }\n  };\n\n  handleToggleKey = async (isActive: boolean, data: ProjectKey) => {\n    const oldKeyList = [...this.state.keyList];\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.setState(state => {\n      const keyList = state.keyList.map(key => {\n        if (key.id === data.id) {\n          return {\n            ...key,\n            isActive: !data.isActive,\n          };\n        }\n\n        return key;\n      });\n      return {keyList};\n    });\n\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      await this.api.requestPromise(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {\n        method: 'PUT',\n        data: {isActive},\n      });\n      addSuccessMessage(isActive ? t('Enabled key') : t('Disabled key'));\n    } catch (_err) {\n      addErrorMessage(isActive ? t('Error enabling key') : t('Error disabling key'));\n      this.setState({keyList: oldKeyList});\n    }\n  };\n\n  handleCreateKey = async () => {\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      const data: ProjectKey = await this.api.requestPromise(\n        `/projects/${orgId}/${projectId}/keys/`,\n        {\n          method: 'POST',\n        }\n      );\n\n      this.setState(state => ({\n        keyList: [...state.keyList, data],\n      }));\n      addSuccessMessage(t('Created a new key.'));\n    } catch (_err) {\n      addErrorMessage(t('Unable to create new key. Please try again.'));\n    }\n  };\n\n  renderEmpty() {\n    return (\n      <Panel>\n        <EmptyMessage\n          icon={<IconFlag size=\"xl\" />}\n          description={t('There are no keys active for this project.')}\n        />\n      </Panel>\n    );\n  }\n\n  renderResults() {\n    const {location, organization, routes, params} = this.props;\n    const {orgId, projectId} = params;\n    const access = new Set(organization.access);\n\n    return (\n      <Fragment>\n        {this.state.keyList.map(key => (\n          <KeyRow\n            api={this.api}\n            access={access}\n            key={key.id}\n            orgId={orgId}\n            projectId={`${projectId}`}\n            data={key}\n            onToggle={this.handleToggleKey}\n            onRemove={this.handleRemoveKey}\n            routes={routes}\n            location={location}\n            params={params}\n          />\n        ))}\n        <Pagination pageLinks={this.state.keyListPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const access = new Set(this.props.organization.access);\n    const isEmpty = !this.state.keyList.length;\n\n    return (\n      <div data-test-id=\"project-keys\">\n        <SettingsPageHeader\n          title={t('Client Keys')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                onClick={this.handleCreateKey}\n                size=\"small\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Generate New Key')}\n              </Button>\n            ) : null\n          }\n        />\n        <TextBlock>\n          {tct(\n            `To send data to Sentry you will need to configure an SDK with a client key\n          (usually referred to as the [code:SENTRY_DSN] value). For more\n          information on integrating Sentry with your application take a look at our\n          [link:documentation].`,\n            {\n              link: <ExternalLink href=\"https://docs.sentry.io/\" />,\n              code: <code />,\n            }\n          )}\n        </TextBlock>\n\n        {isEmpty ? this.renderEmpty() : this.renderResults()}\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(ProjectKeys);\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport {ProjectKey} from 'app/views/settings/project/projectKeys/types';\n\nconst DEFAULT_PROPS = {\n  showDsn: true,\n  showDsnPublic: true,\n  showSecurityEndpoint: true,\n  showMinidump: true,\n  showUnreal: true,\n  showPublicKey: false,\n  showSecretKey: false,\n  showProjectId: false,\n};\n\ntype Props = {\n  projectId: string;\n  data: ProjectKey;\n} & typeof DEFAULT_PROPS;\n\ntype State = {\n  showDeprecatedDsn: boolean;\n};\n\nclass ProjectKeyCredentials extends Component<Props, State> {\n  static defaultProps = DEFAULT_PROPS;\n\n  state: State = {\n    showDeprecatedDsn: false,\n  };\n\n  toggleDeprecatedDsn = () => {\n    this.setState(state => ({\n      showDeprecatedDsn: !state.showDeprecatedDsn,\n    }));\n  };\n\n  render() {\n    const {showDeprecatedDsn} = this.state;\n    const {\n      projectId,\n      data,\n      showDsn,\n      showDsnPublic,\n      showSecurityEndpoint,\n      showMinidump,\n      showUnreal,\n      showPublicKey,\n      showSecretKey,\n      showProjectId,\n    } = this.props;\n\n    return (\n      <Fragment>\n        {showDsnPublic && (\n          <Field\n            label={t('DSN')}\n            inline={false}\n            flexibleControlStateSize\n            help={tct('The DSN tells the SDK where to send the events to. [link]', {\n              link: showDsn ? (\n                <Link to=\"\" onClick={this.toggleDeprecatedDsn}>\n                  {showDeprecatedDsn\n                    ? t('Hide deprecated DSN')\n                    : t('Show deprecated DSN')}\n                </Link>\n              ) : null,\n            })}\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.public,\n                fixed: '__DSN__',\n              })}\n            </TextCopyInput>\n            {showDeprecatedDsn && (\n              <StyledField\n                label={null}\n                help={t(\n                  'Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.'\n                )}\n                inline={false}\n                flexibleControlStateSize\n              >\n                <TextCopyInput>\n                  {getDynamicText({\n                    value: data.dsn.secret,\n                    fixed: '__DSN_DEPRECATED__',\n                  })}\n                </TextCopyInput>\n              </StyledField>\n            )}\n          </Field>\n        )}\n\n        {/* this edge case should imho not happen, but just to be sure */}\n        {!showDsnPublic && showDsn && (\n          <Field\n            label={t('DSN (Deprecated)')}\n            help={t(\n              'Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.'\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.secret,\n                fixed: '__DSN_DEPRECATED__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showSecurityEndpoint && (\n          <Field\n            label={t('Security Header Endpoint')}\n            help={t(\n              'Use your security header endpoint for features like CSP and Expect-CT reports.'\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.security,\n                fixed: '__SECURITY_HEADER_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showMinidump && (\n          <Field\n            label={t('Minidump Endpoint')}\n            help={tct(\n              'Use this endpoint to upload [link], for example with Electron, Crashpad or Breakpad.',\n              {\n                link: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/native/guides/minidumps/\">\n                    minidump crash reports\n                  </ExternalLink>\n                ),\n              }\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.minidump,\n                fixed: '__MINIDUMP_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showUnreal && (\n          <Field\n            label={t('Unreal Engine 4 Endpoint')}\n            help={t('Use this endpoint to configure your UE4 Crash Reporter.')}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.unreal || '',\n                fixed: '__UNREAL_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showPublicKey && (\n          <Field label={t('Public Key')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.public,\n                fixed: '__PUBLICKEY__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showSecretKey && (\n          <Field label={t('Secret Key')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.secret,\n                fixed: '__SECRETKEY__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showProjectId && (\n          <Field label={t('Project ID')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: projectId,\n                fixed: '__PROJECTID__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst StyledField = styled(Field)`\n  padding: ${space(0.5)} 0 0 0;\n`;\n\nexport default ProjectKeyCredentials;\n"],"sourceRoot":""}