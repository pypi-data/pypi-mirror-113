{"version":3,"sources":["webpack:///./app/components/issues/compactIssue.tsx","webpack:///./app/views/asyncView.tsx"],"names":["CompactIssueHeader","this","props","data","organization","projectId","eventId","basePath","slug","issueLink","id","commentColor","subscriptionDetails","reason","Fragment","IssueHeaderMetaWrapper","StyledErrorLevel","size","level","title","className","IconLink","to","status","isBookmarked","isSolid","project","numComments","color","getMessage","Component","CompactIssue","issue","GroupStore","itemIds","onGroupChange","undefined","nextProps","setState","listener","has","state","addLoadingMessage","t","bulkUpdate","api","orgId","complete","clearIndicators","hasSeen","IssueRow","children","withApi","withOrganization","ErrorLevel","space","Link","PanelItem","AsyncView","getTitle","renderComponent","AsyncComponent"],"mappings":"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","file":"chunks/app_components_issues_compactIssue_tsx-app_views_asyncView_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {bulkUpdate} from 'app/actionCreators/group';\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport EventOrGroupTitle from 'app/components/eventOrGroupTitle';\nimport ErrorLevel from 'app/components/events/errorLevel';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport {IconChat, IconMute, IconStar} from 'app/icons';\nimport {t} from 'app/locale';\nimport GroupStore from 'app/stores/groupStore';\nimport space from 'app/styles/space';\nimport {BaseGroup, LightWeightOrganization} from 'app/types';\nimport {getMessage} from 'app/utils/events';\nimport {Aliases} from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype HeaderProps = {\n  organization: LightWeightOrganization;\n  projectId: string;\n  data: BaseGroup;\n  eventId?: string;\n};\n\nclass CompactIssueHeader extends Component<HeaderProps> {\n  render() {\n    const {data, organization, projectId, eventId} = this.props;\n\n    const basePath = `/organizations/${organization.slug}/issues/`;\n\n    const issueLink = eventId\n      ? `/organizations/${organization.slug}/projects/${projectId}/events/${eventId}/`\n      : `${basePath}${data.id}/`;\n\n    const commentColor: keyof Aliases =\n      data.subscriptionDetails && data.subscriptionDetails.reason === 'mentioned'\n        ? 'success'\n        : 'textColor';\n\n    return (\n      <Fragment>\n        <IssueHeaderMetaWrapper>\n          <StyledErrorLevel size=\"12px\" level={data.level} title={data.level} />\n          <h3 className=\"truncate\">\n            <IconLink to={issueLink || ''}>\n              {data.status === 'ignored' && <IconMute size=\"xs\" />}\n              {data.isBookmarked && <IconStar isSolid size=\"xs\" />}\n              <EventOrGroupTitle data={data} />\n            </IconLink>\n          </h3>\n        </IssueHeaderMetaWrapper>\n        <div className=\"event-extra\">\n          <span className=\"project-name\">\n            <strong>{data.project.slug}</strong>\n          </span>\n          {data.numComments !== 0 && (\n            <span>\n              <IconLink to={`${basePath}${data.id}/activity/`} className=\"comments\">\n                <IconChat size=\"xs\" color={commentColor} />\n                <span className=\"tag-count\">{data.numComments}</span>\n              </IconLink>\n            </span>\n          )}\n          <span className=\"culprit\">{getMessage(data)}</span>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\ntype GroupTypes = ReturnType<typeof GroupStore.get>;\n\n/**\n * Type assertion to disambiguate GroupTypes\n *\n * The GroupCollapseRelease type isn't compatible with BaseGroup\n */\nfunction isGroup(maybe: GroupTypes): maybe is BaseGroup {\n  return (maybe as BaseGroup).status !== undefined;\n}\n\ntype Props = {\n  api: Client;\n  id: string;\n  organization: LightWeightOrganization;\n  eventId?: string;\n  data?: BaseGroup;\n};\n\ntype State = {\n  issue?: GroupTypes;\n};\n\nclass CompactIssue extends Component<Props, State> {\n  state: State = {\n    issue: this.props.data || GroupStore.get(this.props.id),\n  };\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.id !== this.props.id) {\n      this.setState({\n        issue: GroupStore.get(this.props.id),\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.listener();\n  }\n\n  listener = GroupStore.listen(\n    (itemIds: Set<string>) => this.onGroupChange(itemIds),\n    undefined\n  );\n\n  onGroupChange(itemIds: Set<string>) {\n    if (!itemIds.has(this.props.id)) {\n      return;\n    }\n    const id = this.props.id;\n    const issue = GroupStore.get(id);\n    this.setState({\n      issue,\n    });\n  }\n\n  onUpdate(data: Record<string, string>) {\n    const issue = this.state.issue;\n    if (!issue) {\n      return;\n    }\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    bulkUpdate(\n      this.props.api,\n      {\n        orgId: this.props.organization.slug,\n        projectId: issue.project.slug,\n        itemIds: [issue.id],\n        data,\n      },\n      {\n        complete: () => {\n          clearIndicators();\n        },\n      }\n    );\n  }\n\n  render() {\n    const issue = this.state.issue;\n    const {organization} = this.props;\n    if (!isGroup(issue)) {\n      return null;\n    }\n\n    let className = 'issue';\n    if (issue.isBookmarked) {\n      className += ' isBookmarked';\n    }\n    if (issue.hasSeen) {\n      className += ' hasSeen';\n    }\n    if (issue.status === 'resolved') {\n      className += ' isResolved';\n    }\n    if (issue.status === 'ignored') {\n      className += ' isIgnored';\n    }\n\n    return (\n      <IssueRow className={className}>\n        <CompactIssueHeader\n          data={issue}\n          organization={organization}\n          projectId={issue.project.slug}\n          eventId={this.props.eventId}\n        />\n        {this.props.children}\n      </IssueRow>\n    );\n  }\n}\n\nexport {CompactIssue};\nexport default withApi(withOrganization(CompactIssue));\n\nconst IssueHeaderMetaWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledErrorLevel = styled(ErrorLevel)`\n  display: block;\n  margin-right: ${space(1)};\n`;\n\nconst IconLink = styled(Link)`\n  & > svg {\n    margin-right: ${space(0.5)};\n  }\n`;\n\nconst IssueRow = styled(PanelItem)`\n  padding-top: ${space(1.5)};\n  padding-bottom: ${space(0.75)};\n  flex-direction: column;\n`;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n"],"sourceRoot":""}