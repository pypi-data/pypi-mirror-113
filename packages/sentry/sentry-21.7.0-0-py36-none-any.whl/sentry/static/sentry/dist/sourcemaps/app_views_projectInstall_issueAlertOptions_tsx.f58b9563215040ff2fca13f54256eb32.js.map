{"version":3,"sources":["webpack:///./app/views/projectInstall/issueAlertOptions.tsx"],"names":["MetricValues","Actions","UNIQUE_USER_FREQUENCY_CONDITION","EVENT_FREQUENCY_CONDITION","EVENT_FREQUENCY_PERCENT_CONDITION","METRIC_CONDITION_MAP","ERRORS","USERS","getConditionFrom","interval","metricValue","threshold","condition","RangeError","id","value","IssueAlertOptions","conditions","intervalChoices","alertSetting","CREATE_ALERT_LATER","toString","metric","t","filter","valueDescriptionPair","state","some","object","hasProperlyLoadedConditions","options","ALERT_ON_EVERY_ISSUE","push","CUSTOMIZED_ALERTS","CustomizeAlertsGrid","onClick","e","preventDefault","setStateAndUpdateParents","InlineInput","type","min","name","placeholder","this","onChange","target","InlineSelectControl","choices","getAvailableMetricChoices","map","choiceValue","node","RadioItemWrapper","defaultRules","shouldCreateCustomRule","parseInt","length","undefined","actions","actionMatch","frequency","callback","setState","props","getUpdatedData","organization","slug","Object","values","includes","formFields","reduce","acc","curr","isEqual","unpackConditions","Sentry","scope","setExtra","Error","issueAlertOptionsChoices","getIssueAlertsChoices","PageHeadingWithTopMargins","withMargins","RadioGroupWithPadding","label","AsyncComponent","withOrganization","space","Input","SelectControl","RadioGroup","PageHeading"],"mappings":"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","file":"chunks/app_views_projectInstall_issueAlertOptions_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {ReactElement} from 'react';\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport SelectControl from 'app/components/forms/selectControl';\nimport PageHeading from 'app/components/pageHeading';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';\n\nenum MetricValues {\n  ERRORS,\n  USERS,\n}\nenum Actions {\n  ALERT_ON_EVERY_ISSUE,\n  CUSTOMIZED_ALERTS,\n  CREATE_ALERT_LATER,\n}\n\nconst UNIQUE_USER_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition';\nconst EVENT_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition';\nconst NOTIFY_EVENT_ACTION = 'sentry.rules.actions.notify_event.NotifyEventAction';\nexport const EVENT_FREQUENCY_PERCENT_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyPercentCondition';\n\nconst METRIC_CONDITION_MAP = {\n  [MetricValues.ERRORS]: EVENT_FREQUENCY_CONDITION,\n  [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,\n} as const;\n\nconst DEFAULT_PLACEHOLDER_VALUE = '10';\n\ntype StateUpdater = (updatedData: RequestDataFragment) => void;\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  onChange: StateUpdater;\n};\n\ntype State = AsyncComponent['state'] & {\n  // TODO(ts): When we have alert conditional types, convert this\n  conditions: any;\n  intervalChoices: [string, string][] | undefined;\n  threshold: string;\n  interval: string;\n  alertSetting: string;\n  metric: MetricValues;\n};\n\ntype RequestDataFragment = {\n  defaultRules: boolean;\n  shouldCreateCustomRule: boolean;\n  name: string;\n  conditions: {interval: string; id: string; value: string}[] | undefined;\n  actions: {id: string}[];\n  actionMatch: string;\n  frequency: number;\n};\n\nfunction getConditionFrom(\n  interval: string,\n  metricValue: MetricValues,\n  threshold: string\n): {interval: string; id: string; value: string} {\n  let condition: string;\n  switch (metricValue) {\n    case MetricValues.ERRORS:\n      condition = EVENT_FREQUENCY_CONDITION;\n      break;\n    case MetricValues.USERS:\n      condition = UNIQUE_USER_FREQUENCY_CONDITION;\n      break;\n    default:\n      throw new RangeError('Supplied metric value is not handled');\n  }\n  return {\n    interval,\n    id: condition,\n    value: threshold,\n  };\n}\n\nfunction unpackConditions(conditions: any[]) {\n  const equalityReducer = (acc, curr) => {\n    if (!acc || !curr || !isEqual(acc, curr)) {\n      return null;\n    }\n    return acc;\n  };\n\n  const intervalChoices = conditions\n    .map(condition => condition.formFields?.interval?.choices)\n    .reduce(equalityReducer);\n  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};\n}\n\nclass IssueAlertOptions extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      conditions: [],\n      intervalChoices: [],\n      alertSetting: Actions.CREATE_ALERT_LATER.toString(),\n      metric: MetricValues.ERRORS,\n      interval: '',\n      threshold: '',\n    };\n  }\n\n  getAvailableMetricChoices() {\n    return [\n      [MetricValues.ERRORS, t('occurrences of')],\n      [MetricValues.USERS, t('users affected by')],\n    ].filter(valueDescriptionPair => {\n      const [value] = valueDescriptionPair;\n      return this.state.conditions?.some?.(\n        object => object?.id === METRIC_CONDITION_MAP[value]\n      );\n    });\n  }\n\n  getIssueAlertsChoices(\n    hasProperlyLoadedConditions: boolean\n  ): [string, string | ReactElement][] {\n    const options: [string, React.ReactNode][] = [\n      [Actions.CREATE_ALERT_LATER.toString(), t(\"I'll create my own alerts later\")],\n      [Actions.ALERT_ON_EVERY_ISSUE.toString(), t('Alert me on every new issue')],\n    ];\n\n    if (hasProperlyLoadedConditions) {\n      options.push([\n        Actions.CUSTOMIZED_ALERTS.toString(),\n        <CustomizeAlertsGrid\n          key={Actions.CUSTOMIZED_ALERTS}\n          onClick={e => {\n            // XXX(epurkhiser): The `e.preventDefault` here is needed to stop\n            // propegation of the click up to the label, causing it to focus\n            // the radio input and lose focus on the select.\n            e.preventDefault();\n            const alertSetting = Actions.CUSTOMIZED_ALERTS.toString();\n            this.setStateAndUpdateParents({alertSetting});\n          }}\n        >\n          {t('When there are more than')}\n          <InlineInput\n            type=\"number\"\n            min=\"0\"\n            name=\"\"\n            placeholder={DEFAULT_PLACEHOLDER_VALUE}\n            value={this.state.threshold}\n            onChange={threshold =>\n              this.setStateAndUpdateParents({threshold: threshold.target.value})\n            }\n            data-test-id=\"range-input\"\n          />\n          <InlineSelectControl\n            value={this.state.metric}\n            choices={this.getAvailableMetricChoices()}\n            onChange={metric => this.setStateAndUpdateParents({metric: metric.value})}\n            data-test-id=\"metric-select-control\"\n          />\n          {t('a unique error in')}\n          <InlineSelectControl\n            value={this.state.interval}\n            choices={this.state.intervalChoices}\n            onChange={interval =>\n              this.setStateAndUpdateParents({interval: interval.value})\n            }\n            data-test-id=\"interval-select-control\"\n          />\n        </CustomizeAlertsGrid>,\n      ]);\n    }\n    return options.map(([choiceValue, node]) => [\n      choiceValue,\n      <RadioItemWrapper key={choiceValue}>{node}</RadioItemWrapper>,\n    ]);\n  }\n\n  getUpdatedData(): RequestDataFragment {\n    let defaultRules: boolean;\n    let shouldCreateCustomRule: boolean;\n    const alertSetting: Actions = parseInt(this.state.alertSetting, 10);\n    switch (alertSetting) {\n      case Actions.ALERT_ON_EVERY_ISSUE:\n        defaultRules = true;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CREATE_ALERT_LATER:\n        defaultRules = false;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CUSTOMIZED_ALERTS:\n        defaultRules = false;\n        shouldCreateCustomRule = true;\n        break;\n      default:\n        throw new RangeError('Supplied alert creation action is not handled');\n    }\n\n    return {\n      defaultRules,\n      shouldCreateCustomRule,\n      name: 'Send a notification for new issues',\n      conditions:\n        this.state.interval.length > 0 && this.state.threshold.length > 0\n          ? [\n              getConditionFrom(\n                this.state.interval,\n                this.state.metric,\n                this.state.threshold\n              ),\n            ]\n          : undefined,\n      actions: [{id: NOTIFY_EVENT_ACTION}],\n      actionMatch: 'all',\n      frequency: 5,\n    };\n  }\n\n  setStateAndUpdateParents<K extends keyof State>(\n    state:\n      | ((\n          prevState: Readonly<State>,\n          props: Readonly<Props>\n        ) => Pick<State, K> | State | null)\n      | Pick<State, K>\n      | State\n      | null,\n    callback?: () => void\n  ): void {\n    this.setState(state, () => {\n      callback?.();\n      this.props.onChange(this.getUpdatedData());\n    });\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['conditions', `/projects/${this.props.organization.slug}/rule-conditions/`]];\n  }\n\n  onLoadAllEndpointsSuccess(): void {\n    const conditions = this.state.conditions?.filter?.(object =>\n      Object.values(METRIC_CONDITION_MAP).includes(object?.id)\n    );\n\n    if (!conditions || conditions.length === 0) {\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const {intervalChoices, interval} = unpackConditions(conditions);\n    if (!intervalChoices || !interval) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureException(\n          new Error('Interval choices or sent from API endpoint is inconsistent or empty')\n        );\n      });\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    this.setStateAndUpdateParents({\n      conditions,\n      intervalChoices,\n      interval,\n    });\n  }\n\n  renderBody(): React.ReactElement {\n    const issueAlertOptionsChoices = this.getIssueAlertsChoices(\n      this.state.conditions?.length > 0\n    );\n    return (\n      <React.Fragment>\n        <PageHeadingWithTopMargins withMargins>\n          {t('Set your default alert settings')}\n        </PageHeadingWithTopMargins>\n        <RadioGroupWithPadding\n          choices={issueAlertOptionsChoices}\n          label={t('Options for creating an alert')}\n          onChange={alertSetting => this.setStateAndUpdateParents({alertSetting})}\n          value={this.state.alertSetting}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IssueAlertOptions);\n\nconst CustomizeAlertsGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(5, max-content);\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\nconst InlineInput = styled(Input)`\n  width: 80px;\n`;\nconst InlineSelectControl = styled(SelectControl)`\n  width: 160px;\n`;\nconst RadioGroupWithPadding = styled(RadioGroup)`\n  padding: ${space(3)} 0;\n  margin-bottom: 50px;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n`;\nconst PageHeadingWithTopMargins = styled(PageHeading)`\n  margin-top: 65px;\n`;\nconst RadioItemWrapper = styled('div')`\n  min-height: 35px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n"],"sourceRoot":""}