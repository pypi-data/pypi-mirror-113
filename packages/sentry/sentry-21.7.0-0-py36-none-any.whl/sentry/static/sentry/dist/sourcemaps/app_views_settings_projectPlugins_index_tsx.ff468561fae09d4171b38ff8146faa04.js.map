{"version":3,"sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/actions/pluginActions.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectPlugins/projectPluginRow.tsx","webpack:///./app/views/settings/projectPlugins/projectPlugins.tsx","webpack:///./app/views/settings/projectPlugins/index.tsx"],"names":["activeFetch","api","Client","doUpdate","orgId","projectId","pluginId","update","params","PluginActions","request","requestPromise","then","catch","resp","err","responseJSON","detail","Error","fetchPlugins","options","path","method","includeAllArgs","data","jqXHR","pageLinks","getResponseHeader","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","Reflux","SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","recreateRoute","to","lastRootIndex","routeIndex","routes","location","stepBack","paths","map","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","defaultState","loading","plugins","error","PluginStoreConfig","state","updating","Map","reset","this","getInitialState","getState","Array","from","values","init","listenTo","onFetchAll","onFetchAllSuccess","onFetchAllError","onUpdate","onUpdateSuccess","onUpdateError","triggerState","trigger","resetLoading","plugin","id","updateObj","get","newPlugin","set","_updateObj","delete","origPlugin","WrappedComponent","WithPlugins","PluginsStore","setState","undefined","prevProps","_prevState","prevContext","props","organization","project","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","unsubscribe","React","getDisplayName","withOrganization","withProject","PermissionAlert","access","hasAccess","type","icon","size","grayText","ProjectPluginRow","onChange","eventKey","trackIntegrationEvent","integration","integration_type","view","name","version","author","hasConfiguration","canDisable","configureUrl","LinkOrSpan","Link","PluginItem","className","PluginInfo","StyledPluginIcon","PluginDescription","PluginName","getDynamicText","value","Version","fixed","css","href","url","isDisabled","isActive","toggle","handleChange","PureComponent","PluginIcon","ProjectPlugins","isLoading","tct","link","filter","p","isHidden","Component","ProjectPluginsContainer","installCount","length","integrations_installed","startSession","shouldEnable","fetchData","withPlugins"],"mappings":"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","file":"chunks/app_views_settings_projectPlugins_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport PluginActions from 'app/actions/pluginActions';\nimport {Client, RequestOptions} from 'app/api';\nimport {t} from 'app/locale';\nimport {Plugin} from 'app/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginActions.update(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginActions.updateSuccess(pluginId, update);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginActions.updateError(pluginId, update, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginActions.fetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, jqXHR]) => {\n      PluginActions.fetchAllSuccess(data, {\n        pageLinks: jqXHR && jqXHR.getResponseHeader('Link'),\n      });\n\n      return data;\n    })\n    .catch(err => {\n      PluginActions.fetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import Reflux from 'reflux';\n\nconst PluginActions = Reflux.createActions([\n  'update',\n  'updateError',\n  'updateSuccess',\n  'fetchAll',\n  'fetchAllSuccess',\n  'fetchAllError',\n]);\n\nexport default PluginActions;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import Reflux from 'reflux';\n\nimport PluginActions from 'app/actions/pluginActions';\nimport {Plugin} from 'app/types';\n\ntype PluginStoreInterface = {\n  state: {\n    loading: boolean;\n    plugins: Plugin[];\n    error: Error | null;\n    pageLinks: string | null;\n  };\n  plugins: Map<string, Plugin> | null;\n  updating: Map<string, Plugin>;\n};\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst PluginStoreConfig: Reflux.StoreDefinition & PluginStoreInterface = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    this.reset();\n    this.listenTo(PluginActions.fetchAll, this.onFetchAll);\n    this.listenTo(PluginActions.fetchAllSuccess, this.onFetchAllSuccess);\n    this.listenTo(PluginActions.fetchAllError, this.onFetchAllError);\n    this.listenTo(PluginActions.update, this.onUpdate);\n    this.listenTo(PluginActions.updateSuccess, this.onUpdateSuccess);\n    this.listenTo(PluginActions.updateError, this.onUpdateError);\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading}: {resetLoading?: boolean} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data: Plugin[], {pageLinks}: {pageLinks?: string}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\ntype PluginStore = Reflux.Store & PluginStoreInterface;\n\nconst PluginStore = Reflux.createStore(PluginStoreConfig);\n\nexport default PluginStore as PluginStore;\n","import * as React from 'react';\n\nimport {fetchPlugins} from 'app/actionCreators/plugins';\nimport PluginsStore from 'app/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  plugins: Plugin[];\n  loading: boolean;\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends React.Component<\n    Omit<P, keyof 'plugins'> & WithPluginProps,\n    State\n  > {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {PureComponent} from 'react';\nimport {Link, RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Access from 'app/components/acl/access';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Switch from 'app/components/switchButton';\nimport {t} from 'app/locale';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport {Organization, Plugin, Project} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withOrganization from 'app/utils/withOrganization';\n\nconst grayText = css`\n  color: #979ba0;\n`;\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  onChange: (id: string, enabled: boolean) => void;\n} & Plugin &\n  Pick<RouteComponentProps<{}, {}>, 'params' | 'routes'>;\n\nclass ProjectPluginRow extends PureComponent<Props> {\n  handleChange = () => {\n    const {onChange, id, enabled} = this.props;\n    onChange(id, !enabled);\n    const eventKey = !enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationEvent(\n      eventKey,\n      {\n        integration: id,\n        integration_type: 'plugin',\n        view: 'legacy_integrations',\n      },\n      this.props.organization\n    );\n  };\n\n  render() {\n    const {id, name, slug, version, author, hasConfiguration, enabled, canDisable} =\n      this.props;\n\n    const configureUrl = recreateRoute(id, this.props);\n    return (\n      <Access access={['project:write']}>\n        {({hasAccess}) => {\n          const LinkOrSpan = hasAccess ? Link : 'span';\n\n          return (\n            <PluginItem key={id} className={slug}>\n              <PluginInfo>\n                <StyledPluginIcon size={48} pluginId={id} />\n                <PluginDescription>\n                  <PluginName>\n                    {`${name} `}\n                    {getDynamicText({\n                      value: (\n                        <Version>{version ? `v${version}` : <em>{t('n/a')}</em>}</Version>\n                      ),\n                      fixed: <Version>v10</Version>,\n                    })}\n                  </PluginName>\n                  <div>\n                    {author && (\n                      <ExternalLink css={grayText} href={author.url}>\n                        {author.name}\n                      </ExternalLink>\n                    )}\n                    {hasConfiguration && (\n                      <span>\n                        {' '}\n                        &middot;{' '}\n                        <LinkOrSpan css={grayText} to={configureUrl}>\n                          {t('Configure plugin')}\n                        </LinkOrSpan>\n                      </span>\n                    )}\n                  </div>\n                </PluginDescription>\n              </PluginInfo>\n              <Switch\n                size=\"lg\"\n                isDisabled={!hasAccess || !canDisable}\n                isActive={enabled}\n                toggle={this.handleChange}\n              />\n            </PluginItem>\n          );\n        }}\n      </Access>\n    );\n  }\n}\n\nexport default withOrganization(ProjectPluginRow);\n\nconst PluginItem = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst PluginDescription = styled('div')`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst PluginInfo = styled('div')`\n  display: flex;\n  flex: 1;\n  line-height: 24px;\n`;\n\nconst PluginName = styled('div')`\n  font-size: 16px;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: 16px;\n`;\n\n// Keeping these colors the same from old integrations page\nconst Version = styled('span')`\n  color: #babec2;\n`;\n","import {Component} from 'react';\nimport * as React from 'react';\nimport {WithRouterProps} from 'react-router';\n\nimport Access from 'app/components/acl/access';\nimport Link from 'app/components/links/link';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {Plugin, Project} from 'app/types';\nimport RouteError from 'app/views/routeError';\n\nimport ProjectPluginRow from './projectPluginRow';\n\ntype Props = {\n  plugins: Plugin[];\n  loading: boolean;\n  error: React.ComponentProps<typeof RouteError>['error'];\n  onChange: React.ComponentProps<typeof ProjectPluginRow>['onChange'];\n  project: Project;\n} & WithRouterProps<{orgId: string}>;\n\nclass ProjectPlugins extends Component<Props> {\n  render() {\n    const {plugins, loading, error, onChange, routes, params, project} = this.props;\n    const {orgId} = this.props.params;\n    const hasError = error;\n    const isLoading = !hasError && loading;\n\n    if (hasError) {\n      return <RouteError error={error} />;\n    }\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <Panel>\n        <PanelHeader>\n          <div>{t('Legacy Integration')}</div>\n          <div>{t('Enabled')}</div>\n        </PanelHeader>\n        <PanelBody>\n          <PanelAlert type=\"warning\">\n            <Access access={['org:integrations']}>\n              {({hasAccess}) =>\n                hasAccess\n                  ? tct(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available. Visit the [link:organization integrations] settings to manage them.\",\n                      {\n                        link: <Link to={`/settings/${orgId}/integrations`} />,\n                      }\n                    )\n                  : t(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available.\"\n                    )\n              }\n            </Access>\n          </PanelAlert>\n\n          {plugins\n            .filter(p => {\n              return !p.isHidden;\n            })\n            .map(plugin => (\n              <PanelItem key={plugin.id}>\n                <ProjectPluginRow\n                  params={params}\n                  routes={routes}\n                  project={project}\n                  {...plugin}\n                  onChange={onChange}\n                />\n              </PanelItem>\n            ))}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport default ProjectPlugins;\n","import * as React from 'react';\nimport {WithRouterProps} from 'react-router/lib/withRouter';\n\nimport {disablePlugin, enablePlugin, fetchPlugins} from 'app/actionCreators/plugins';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {Organization, Plugin, Project} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\nimport withPlugins from 'app/utils/withPlugins';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\n\nimport ProjectPlugins from './projectPlugins';\n\ntype Props = WithRouterProps<{orgId: string; projectId: string}> & {\n  plugins: {\n    plugins: Plugin[];\n    error: React.ComponentProps<typeof ProjectPlugins>['error'];\n    loading: boolean;\n  };\n  organization: Organization;\n  project: Project;\n};\n\nclass ProjectPluginsContainer extends React.Component<Props> {\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = async () => {\n    const plugins = await fetchPlugins(this.props.params);\n    const installCount = plugins.filter(\n      plugin => plugin.hasConfiguration && plugin.enabled\n    ).length;\n    trackIntegrationEvent(\n      'integrations.index_viewed',\n      {\n        integrations_installed: installCount,\n        view: 'legacy_integrations',\n      },\n      this.props.organization,\n      {startSession: true}\n    );\n  };\n\n  handleChange = (pluginId: string, shouldEnable: boolean) => {\n    const {projectId, orgId} = this.props.params;\n    const actionCreator = shouldEnable ? enablePlugin : disablePlugin;\n    actionCreator({projectId, orgId, pluginId});\n  };\n\n  render() {\n    const {loading, error, plugins} = this.props.plugins || {};\n    const {orgId} = this.props.params;\n\n    const title = t('Legacy Integrations');\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} orgSlug={orgId} />\n        <SettingsPageHeader title={title} />\n        <PermissionAlert />\n\n        <ProjectPlugins\n          {...this.props}\n          onChange={this.handleChange}\n          loading={loading}\n          error={error}\n          plugins={plugins}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withPlugins(ProjectPluginsContainer);\n"],"sourceRoot":""}