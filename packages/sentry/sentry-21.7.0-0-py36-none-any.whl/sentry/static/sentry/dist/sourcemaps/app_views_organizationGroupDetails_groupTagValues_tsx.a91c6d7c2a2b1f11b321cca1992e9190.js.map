{"version":3,"sources":["webpack:///./app/components/dataExport.tsx","webpack:///./app/components/deviceName.tsx","webpack:///./app/views/organizationGroupDetails/groupTagValues.tsx"],"names":["ExportQueryType","DataExport","initialState","setState","props","api","slug","organization","payload","queryType","queryInfo","inProgress","requestPromise","includeAllArgs","method","data","query_type","query_info","then","response","addSuccessMessage","status","t","catch","err","message","responseJSON","detail","addErrorMessage","prevPayload","this","isEqual","resetState","state","children","disabled","icon","features","size","priority","title","onClick","debounce","startDataExport","React","withApi","withOrganization","deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","loadDeviceListModule","DeviceName","_isMounted","value","deviceName","GroupTagValues","environment","environments","params","groupId","tagKey","query","group","orgId","tag","tagValueList","tagValueListPageLinks","sortedTagValueList","sortBy","property","reverse","length","heading","issuesPath","map","tagValue","tagValueIdx","pct","totalValues","percent","count","toFixed","key","className","ValueWrapper","to","pathname","user","id","identifier","avatarSize","hideEmail","name","email","StyledExternalLink","href","color","isUrl","date","lastSeen","Fragment","Header","HeaderTitle","HeaderButtons","gap","BrowserExportButton","project","StyledTable","TableHeader","width","pageLinks","AsyncComponent","p","theme","bodyBackground","ButtonBar","space","Button","ExternalLink"],"mappings":"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","file":"chunks/app_views_organizationGroupDetails_groupTagValues_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Feature from 'app/components/acl/feature';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\n// NOTE: Coordinate with other ExportQueryType (src/sentry/data_export/base.py)\nexport enum ExportQueryType {\n  IssuesByTag = 'Issues-by-Tag',\n  Discover = 'Discover',\n}\n\ntype DataExportPayload = {\n  queryType: ExportQueryType;\n  queryInfo: any; // TODO(ts): Formalize different possible payloads\n};\n\ntype Props = {\n  api: Client;\n  disabled?: boolean;\n  organization: Organization;\n  payload: DataExportPayload;\n  icon?: React.ReactNode;\n};\n\ntype State = {\n  inProgress: boolean;\n};\n\nclass DataExport extends React.Component<Props, State> {\n  state = this.initialState;\n\n  componentDidUpdate({payload: prevPayload}) {\n    const {payload} = this.props;\n    if (!isEqual(prevPayload, payload)) this.resetState();\n  }\n\n  get initialState(): State {\n    return {\n      inProgress: false,\n    };\n  }\n\n  resetState = () => {\n    this.setState(this.initialState);\n  };\n\n  startDataExport = () => {\n    const {\n      api,\n      organization: {slug},\n      payload: {queryType, queryInfo},\n    } = this.props;\n\n    this.setState({inProgress: true});\n\n    api\n      .requestPromise(`/organizations/${slug}/data-export/`, {\n        includeAllArgs: true,\n        method: 'POST',\n        data: {\n          query_type: queryType,\n          query_info: queryInfo,\n        },\n      })\n      .then(([_data, _, response]) => {\n        addSuccessMessage(\n          response?.status === 201\n            ? t(\n                \"Sit tight. We'll shoot you an email when your data is ready for download.\"\n              )\n            : t(\"It looks like we're already working on it. Sit tight, we'll email you.\")\n        );\n      })\n      .catch(err => {\n        const message =\n          err?.responseJSON?.detail ??\n          \"We tried our hardest, but we couldn't export your data. Give it another go.\";\n        addErrorMessage(t(message));\n        this.setState({inProgress: false});\n      });\n  };\n\n  render() {\n    const {inProgress} = this.state;\n    const {children, disabled, icon} = this.props;\n    return (\n      <Feature features={['organizations:discover-query']}>\n        {inProgress ? (\n          <Button\n            size=\"small\"\n            priority=\"default\"\n            title=\"You can get on with your life. We'll email you when your data's ready.\"\n            {...this.props}\n            disabled\n            icon={icon}\n          >\n            {t(\"We're working on it...\")}\n          </Button>\n        ) : (\n          <Button\n            onClick={debounce(this.startDataExport, 500)}\n            disabled={disabled || false}\n            size=\"small\"\n            priority=\"default\"\n            title=\"Put your data to work. Start your export and we'll email you when it's finished.\"\n            icon={icon}\n            {...this.props}\n          >\n            {children ? children : t('Export All to CSV')}\n          </Button>\n        )}\n      </Feature>\n    );\n  }\n}\n\nexport {DataExport};\nexport default withApi(withOrganization(DataExport));\n","import * as React from 'react';\n\nimport {IOSDeviceList} from 'app/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model.split(' ').splice(1).join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import('ios-device-list');\n}\n\ntype Props = {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted?: boolean;\n\n  render() {\n    const {value, children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // value can be undefined, need to return null or else react throws\n    if (!value) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return value;\n    }\n\n    const deviceName = deviceNameMapper(value, iOSDeviceList);\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {children ? children(deviceName) : deviceName}\n      </span>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport property from 'lodash/property';\nimport sortBy from 'lodash/sortBy';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport DataExport, {ExportQueryType} from 'app/components/dataExport';\nimport DeviceName from 'app/components/deviceName';\nimport DetailedError from 'app/components/errors/detailedError';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport UserBadge from 'app/components/idBadge/userBadge';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Pagination from 'app/components/pagination';\nimport TimeSince from 'app/components/timeSince';\nimport {IconMail, IconOpen} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Environment, Group, Tag, TagValue} from 'app/types';\nimport {isUrl, percent} from 'app/utils';\n\ntype RouteParams = {\n  groupId: string;\n  orgId: string;\n  tagKey: string;\n};\n\ntype Props = {\n  group: Group;\n  environments: Environment[];\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  tag: Tag;\n  tagValueList: TagValue[];\n  tagValueListPageLinks: string;\n};\n\nclass GroupTagValues extends AsyncComponent<\n  Props & AsyncComponent['props'],\n  State & AsyncComponent['state']\n> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {environments: environment} = this.props;\n    const {groupId, tagKey} = this.props.params;\n    return [\n      ['tag', `/issues/${groupId}/tags/${tagKey}/`],\n      [\n        'tagValueList',\n        `/issues/${groupId}/tags/${tagKey}/values/`,\n        {query: {environment}},\n      ],\n    ];\n  }\n\n  renderBody() {\n    const {\n      group,\n      params: {orgId, tagKey},\n      environments,\n    } = this.props;\n    const {tag, tagValueList, tagValueListPageLinks} = this.state;\n    const sortedTagValueList: TagValue[] = sortBy(\n      tagValueList,\n      property('count')\n    ).reverse();\n\n    if (sortedTagValueList.length === 0 && environments.length > 0) {\n      return (\n        <DetailedError\n          heading={t('Sorry, the tags for this issue could not be found.')}\n          message={t('No tags were found for the currently selected environments')}\n        />\n      );\n    }\n\n    const issuesPath = `/organizations/${orgId}/issues/`;\n\n    const children = sortedTagValueList.map((tagValue, tagValueIdx) => {\n      const pct = tag.totalValues\n        ? `${percent(tagValue.count, tag.totalValues).toFixed(2)}%`\n        : '--';\n      const query = tagValue.query || `${tag.key}:\"${tagValue.value}\"`;\n      return (\n        <tr key={tagValueIdx}>\n          <td className=\"bar-cell\">\n            <span className=\"label\">{pct}</span>\n          </td>\n          <td>\n            <ValueWrapper>\n              <GlobalSelectionLink\n                to={{\n                  pathname: issuesPath,\n                  query: {query},\n                }}\n              >\n                {tag.key === 'user' ? (\n                  <UserBadge\n                    user={{...tagValue, id: tagValue.identifier ?? ''}}\n                    avatarSize={20}\n                    hideEmail\n                  />\n                ) : (\n                  <DeviceName value={tagValue.name} />\n                )}\n              </GlobalSelectionLink>\n              {tagValue.email && (\n                <StyledExternalLink href={`mailto:${tagValue.email}`}>\n                  <IconMail size=\"xs\" color=\"gray300\" />\n                </StyledExternalLink>\n              )}\n              {isUrl(tagValue.value) && (\n                <StyledExternalLink href={tagValue.value}>\n                  <IconOpen size=\"xs\" color=\"gray300\" />\n                </StyledExternalLink>\n              )}\n            </ValueWrapper>\n          </td>\n          <td>\n            <TimeSince date={tagValue.lastSeen} />\n          </td>\n        </tr>\n      );\n    });\n\n    return (\n      <Fragment>\n        <Header>\n          <HeaderTitle>{tag.key === 'user' ? t('Affected Users') : tag.name}</HeaderTitle>\n          <HeaderButtons gap={1}>\n            <BrowserExportButton\n              size=\"small\"\n              priority=\"default\"\n              href={`/${orgId}/${group.project.slug}/issues/${group.id}/tags/${tagKey}/export/`}\n            >\n              {t('Export Page to CSV')}\n            </BrowserExportButton>\n            <DataExport\n              payload={{\n                queryType: ExportQueryType.IssuesByTag,\n                queryInfo: {\n                  project: group.project.id,\n                  group: group.id,\n                  key: tagKey,\n                },\n              }}\n            />\n          </HeaderButtons>\n        </Header>\n        <StyledTable className=\"table\">\n          <thead>\n            <tr>\n              <TableHeader width={20}>%</TableHeader>\n              <th />\n              <TableHeader width={300}>{t('Last Seen')}</TableHeader>\n            </tr>\n          </thead>\n          <tbody>{children}</tbody>\n        </StyledTable>\n        <Pagination pageLinks={tagValueListPageLinks} />\n        <p>\n          <small>\n            {t('Note: Percentage of issue is based on events seen in the last 7 days.')}\n          </small>\n        </p>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledTable = styled('table')`\n  > tbody > tr:nth-of-type(odd) {\n    background-color: ${p => p.theme.bodyBackground};\n  }\n`;\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px;\n`;\n\nconst HeaderTitle = styled('h3')`\n  margin: 0;\n`;\n\nconst HeaderButtons = styled(ButtonBar)`\n  align-items: stretch;\n  margin: 0px ${space(1.5)};\n`;\n\nconst BrowserExportButton = styled(Button)`\n  display: flex;\n  align-items: center;\n`;\n\nconst TableHeader = styled('th')<{width: number}>`\n  width: ${p => p.width}px;\n`;\nconst ValueWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst StyledExternalLink = styled(ExternalLink)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {GroupTagValues};\nexport default GroupTagValues;\n"],"sourceRoot":""}