from . import ID_PRIM as ID_PRIM, TIMESTAMP_PRIM as TIMESTAMP_PRIM
from .channel import Channel as Channel
from .channel_frame import ChannelFrame as ChannelFrame, time_to_int as time_to_int
from .channel_registry import ChannelRegistry as ChannelRegistry
from .event_queue import EventQueue as EventQueue
from .type_primitive import TypePrimitive as TypePrimitive
from .user_enum import UserEnum as UserEnum
from queue import Queue
from typing import Any, List, Tuple
from vtelem.enums.primitive import Primitive as Primitive, random_integer as random_integer

LOG: Any
FRAME_TYPES: Any

def basis_to_int(basis: float) -> int: ...
def create_app_id(basis: float = ...) -> TypePrimitive: ...

class ChannelFramer:
    mtu: Any
    registry: Any
    channels: Any
    timestamp: Any
    frame_types: Any
    timestamps: Any
    primitives: Any
    def __init__(self, mtu: int, registry: ChannelRegistry, channels: List[Channel], app_id_basis: float = ...) -> None: ...
    def get_types(self) -> UserEnum: ...
    def new_frame(self, frame_type: str, time: float, set_time: bool = ...) -> ChannelFrame: ...
    def new_event_frame(self, time: float, set_time: bool = ...) -> ChannelFrame: ...
    def new_data_frame(self, time: float, set_time: bool = ...) -> ChannelFrame: ...
    def add_channel(self, channel: Channel) -> None: ...
    def build_event_frames(self, time: float, event_queue: EventQueue, queue: Queue, write_crc: bool = ...) -> Tuple[int, int]: ...
    def build_data_frames(self, time: float, queue: Queue, write_crc: bool = ...) -> Tuple[int, int]: ...

def build_dummy_frame(overall_size: int, app_id_basis: float = ..., bad_crc: bool = ...) -> ChannelFrame: ...
