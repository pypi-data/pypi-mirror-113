{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/controls/textarea.tsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/views/settings/components/forms/textareaField.tsx","webpack:///./app/views/settings/organizationApiKeys/organizationApiKeyDetails.tsx"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","TextAreaControl","React","ref","autosize","rows","maxRows","p","async","displayName","TextArea","shouldForwardProp","includes","isPropValid","inputStyles","space","TextField","props","type","TextareaField","monospace","field","fieldProps","omit","API_CHOICES","API_ACCESS_SCOPES","s","OrganizationApiKeyDetails","addSuccessMessage","browserHistory","addErrorMessage","orgId","apiKey","routeTitleGen","t","organization","slug","apiMethod","apiEndpoint","initialData","state","onSubmitSuccess","handleSubmitSuccess","onSubmitError","handleSubmitError","onCancel","label","name","disabled","inline","required","value","onChange","choices","placeholder","help","withOrganization"],"mappings":"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","file":"chunks/app_views_settings_organizationApiKeys_organizationApiKeyDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\n\ntype InputProps = Omit<Parameters<typeof inputStyles>[0], 'theme'>;\ntype Props = Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'css'> &\n  InputProps & {\n    /**\n     * Enable autosizing of the textarea.\n     */\n    autosize?: boolean;\n    /**\n     * Number of rows to default to.\n     */\n    rows?: number;\n    /**\n     * Max number of rows to default to.\n     */\n    maxRows?: number;\n  };\n\nconst TextAreaControl = React.forwardRef(function TextAreaControl(\n  {autosize, rows, maxRows, ...p}: Props,\n  ref: React.Ref<HTMLTextAreaElement>\n) {\n  return autosize ? (\n    <TextareaAutosize {...p} async ref={ref} rows={rows ? rows : 2} maxRows={maxRows} />\n  ) : (\n    <textarea ref={ref} {...p} />\n  );\n});\n\nTextAreaControl.displayName = 'TextAreaControl';\n\nconst propFilter = (p: string) =>\n  ['autosize', 'rows', 'maxRows'].includes(p) || isPropValid(p);\n\nconst TextArea = styled(TextAreaControl, {shouldForwardProp: propFilter})`\n  ${inputStyles};\n  min-height: 40px;\n  padding: calc(${space(1)} - 1px) ${space(1)};\n  line-height: 1.5em;\n  ${p =>\n    p.autosize &&\n    `\n      height: auto;\n      padding: calc(${space(1)} - 2px) ${space(1)};\n      line-height: 1.6em;\n    `}\n`;\n\nexport default TextArea;\n","import InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n","import * as React from 'react';\nimport omit from 'lodash/omit';\n\nimport Textarea from 'app/views/settings/components/forms/controls/textarea';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = Omit<InputField['props'], 'field'> &\n  Pick<\n    React.ComponentProps<typeof Textarea>,\n    'monospace' | 'autosize' | 'rows' | 'maxRows'\n  >;\n\nexport default function TextareaField({monospace, rows, autosize, ...props}: Props) {\n  return (\n    <InputField\n      {...props}\n      field={fieldProps => (\n        <Textarea\n          {...{monospace, rows, autosize}}\n          {...omit(fieldProps, ['onKeyDown', 'children'])}\n        />\n      )}\n    />\n  );\n}\n","import {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {API_ACCESS_SCOPES} from 'app/constants';\nimport {t} from 'app/locale';\nimport {Choices, Organization} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport ApiForm from 'app/views/settings/components/forms/apiForm';\nimport MultipleCheckbox from 'app/views/settings/components/forms/controls/multipleCheckbox';\nimport FormField from 'app/views/settings/components/forms/formField';\nimport TextareaField from 'app/views/settings/components/forms/textareaField';\nimport TextField from 'app/views/settings/components/forms/textField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport {DeprecatedApiKey} from './types';\n\nconst API_CHOICES: Choices = API_ACCESS_SCOPES.map(s => [s, s]);\n\ntype RouteParams = {\n  orgId: string;\n  apiKey: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n};\n\ntype State = AsyncView['state'] & {\n  apiKey: DeprecatedApiKey;\n};\n\nclass OrganizationApiKeyDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [\n      [\n        'apiKey',\n        `/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`,\n      ],\n    ];\n  }\n\n  getTitle() {\n    return routeTitleGen(t('Edit API Key'), this.props.organization.slug, false);\n  }\n\n  handleSubmitSuccess = () => {\n    addSuccessMessage('Saved changes');\n\n    // Go back to API list\n    browserHistory.push(\n      recreateRoute('', {\n        stepBack: -1,\n        routes: this.props.routes,\n        params: this.props.params,\n      })\n    );\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Unable to save changes. Please try again.');\n  };\n\n  renderBody() {\n    return (\n      <div>\n        <SettingsPageHeader title={t('Edit API Key')} />\n\n        <Panel>\n          <PanelHeader>{t('API Key')}</PanelHeader>\n          <ApiForm\n            apiMethod=\"PUT\"\n            apiEndpoint={`/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`}\n            initialData={this.state.apiKey}\n            onSubmitSuccess={this.handleSubmitSuccess}\n            onSubmitError={this.handleSubmitError}\n            onCancel={() =>\n              browserHistory.push(\n                recreateRoute('', {\n                  stepBack: -1,\n                  routes: this.props.routes,\n                  params: this.props.params,\n                })\n              )\n            }\n          >\n            <PanelBody>\n              <TextField label={t('Label')} name=\"label\" />\n              <TextField label={t('API Key')} name=\"key\" disabled />\n\n              <FormField name=\"scope_list\" label={t('Scopes')} inline={false} required>\n                {({value, onChange}) => (\n                  <MultipleCheckbox\n                    value={value}\n                    onChange={onChange}\n                    choices={API_CHOICES}\n                  />\n                )}\n              </FormField>\n\n              <TextareaField\n                label={t('Allowed Domains')}\n                name=\"allowed_origins\"\n                placeholder=\"e.g. example.com or https://example.com\"\n                help=\"Separate multiple entries with a newline\"\n              />\n            </PanelBody>\n          </ApiForm>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationApiKeyDetails);\n"],"sourceRoot":""}