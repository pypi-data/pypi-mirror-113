{"version":3,"sources":["webpack:///./app/views/monitors/create.tsx"],"names":["CreateMonitor","data","browserHistory","props","params","orgId","id","this","Fragment","apiMethod","apiEndpoint","onSubmitSuccess","AsyncView"],"mappings":"siCAUqBA,E,moBAKD,SAACC,GACjBC,sBAAA,yBAAsC,EAAKC,MAAMC,OAAOC,MAAxD,qBAA0EJ,EAAKK,GAA/E,S,yCALF,WACE,2BAAqBC,KAAKJ,MAAMC,OAAOC,S,wBAOzC,WACE,OACE,QAAC,EAAAG,SAAD,YACE,wCACA,QAAC,IAAD,CACEC,UAAU,OACVC,YAAW,yBAAoBH,KAAKJ,MAAMC,OAAOC,MAAtC,cACXM,gBAAiBJ,KAAKI,yB,GAhBWC","file":"chunks/app_views_monitors_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport AsyncView from 'app/views/asyncView';\n\nimport MonitorForm from './monitorForm';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] & RouteComponentProps<{orgId: string}, {}>;\n\nexport default class CreateMonitor extends AsyncView<Props, AsyncView['state']> {\n  getTitle() {\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  onSubmitSuccess = (data: Monitor) => {\n    browserHistory.push(`/organizations/${this.props.params.orgId}/monitors/${data.id}/`);\n  };\n\n  renderBody() {\n    return (\n      <Fragment>\n        <h1>New Monitor</h1>\n        <MonitorForm\n          apiMethod=\"POST\"\n          apiEndpoint={`/organizations/${this.props.params.orgId}/monitors/`}\n          onSubmitSuccess={this.onSubmitSuccess}\n        />\n      </Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}