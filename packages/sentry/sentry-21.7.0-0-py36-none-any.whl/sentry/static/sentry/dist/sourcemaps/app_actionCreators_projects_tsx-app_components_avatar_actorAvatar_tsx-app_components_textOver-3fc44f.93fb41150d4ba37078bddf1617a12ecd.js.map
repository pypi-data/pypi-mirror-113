{"version":3,"sources":["webpack:///./app/actionCreators/projects.tsx","webpack:///./app/components/avatar/actorAvatar.tsx","webpack:///./app/components/textOverflow.tsx","webpack:///./app/styles/overflowEllipsisLeft.tsx","webpack:///./app/stores/projectsStatsStore.tsx"],"names":["update","api","params","ProjectActions","projectId","data","endpoint","orgId","requestPromise","method","then","err","loadStats","request","query","success","error","_projectStatsToFetch","Set","_debouncedLoadStats","debounce","projectSet","storedProjects","ProjectsStatsStore","existingProjectStats","Object","values","map","id","projects","Array","from","filter","project","includes","length","queries","chunk","chunkedProjects","additionalQuery","idQueryParams","join","statsPeriod","_queryForStats","Promise","all","results","reduce","acc","result","concat","catch","addErrorMessage","t","clear","loadStatsForProject","add","setActiveProject","removeProject","slug","addSuccessMessage","tct","transferProject","email","message","status","responseJSON","detail","addTeamToProject","orgSlug","projectSlug","team","addLoadingMessage","removeTeamFromProject","teamSlug","changeProjectSlug","prev","next","createProject","name","platform","options","default_rules","defaultRules","loadDocs","fetchProjectsCount","fetchAnyReleaseExistence","per_page","ActorAvatar","this","props","actor","type","user","MemberListStore","TeamStore","Sentry","scope","setExtra","Error","React","size","hasTooltip","TextOverflow","isParagraph","className","children","Component","p","ellipsisDirection","overflowEllipsis","defaultProps","projectsStatsStore","itemsBySlug","init","reset","listenTo","onStatsLoadSuccess","onUpdate","onUpdateError","getInitialState","updatingItems","Map","forEach","trigger","getBySlug","set","newProject","onUpdateSuccess","delete","_err","get","getAll","Reflux"],"mappings":"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","file":"chunks/app_actionCreators_projects_tsx-app_components_avatar_actorAvatar_tsx-app_components_textOver-3fc44f.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Query} from 'history';\nimport chunk from 'lodash/chunk';\nimport debounce from 'lodash/debounce';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport ProjectActions from 'app/actions/projectActions';\nimport {Client} from 'app/api';\nimport {PlatformKey} from 'app/data/platformCategories';\nimport {t, tct} from 'app/locale';\nimport ProjectsStatsStore from 'app/stores/projectsStatsStore';\nimport {Project, Team} from 'app/types';\n\ntype UpdateParams = {\n  orgId: string;\n  projectId: string;\n  data?: {[key: string]: any};\n  query?: Query;\n};\n\nexport function update(api: Client, params: UpdateParams) {\n  ProjectActions.update(params.projectId, params.data);\n\n  const endpoint = `/projects/${params.orgId}/${params.projectId}/`;\n  return api\n    .requestPromise(endpoint, {\n      method: 'PUT',\n      data: params.data,\n    })\n    .then(\n      data => {\n        ProjectActions.updateSuccess(data);\n        return data;\n      },\n      err => {\n        ProjectActions.updateError(err, params.projectId);\n        throw err;\n      }\n    );\n}\n\ntype StatsParams = Pick<UpdateParams, 'orgId' | 'data' | 'query'>;\n\nexport function loadStats(api: Client, params: StatsParams) {\n  ProjectActions.loadStats(params.orgId, params.data);\n\n  const endpoint = `/organizations/${params.orgId}/stats/`;\n  api.request(endpoint, {\n    query: params.query,\n    success: data => {\n      ProjectActions.loadStatsSuccess(data);\n    },\n    error: data => {\n      ProjectActions.loadStatsError(data);\n    },\n  });\n}\n\n// This is going to queue up a list of project ids we need to fetch stats for\n// Will be cleared when debounced function fires\nconst _projectStatsToFetch: Set<string> = new Set();\n\n// Max projects to query at a time, otherwise if we fetch too many in the same request\n// it can timeout\nconst MAX_PROJECTS_TO_FETCH = 10;\n\nconst _queryForStats = (\n  api: Client,\n  projects: string[],\n  orgId: string,\n  additionalQuery: Query | undefined\n) => {\n  const idQueryParams = projects.map(project => `id:${project}`).join(' ');\n  const endpoint = `/organizations/${orgId}/projects/`;\n\n  const query: Query = {\n    statsPeriod: '24h',\n    query: idQueryParams,\n    ...additionalQuery,\n  };\n\n  return api.requestPromise(endpoint, {\n    query,\n  });\n};\n\nexport const _debouncedLoadStats = debounce(\n  (api: Client, projectSet: Set<string>, params: UpdateParams) => {\n    const storedProjects: {[key: string]: Project} = ProjectsStatsStore.getAll();\n    const existingProjectStats = Object.values(storedProjects).map(({id}) => id);\n    const projects = Array.from(projectSet).filter(\n      project => !existingProjectStats.includes(project)\n    );\n\n    if (!projects.length) {\n      _projectStatsToFetch.clear();\n      return;\n    }\n\n    // Split projects into more manageable chunks to query, otherwise we can\n    // potentially face server timeouts\n    const queries = chunk(projects, MAX_PROJECTS_TO_FETCH).map(chunkedProjects =>\n      _queryForStats(api, chunkedProjects, params.orgId, params.query)\n    );\n\n    Promise.all(queries)\n      .then(results => {\n        ProjectActions.loadStatsForProjectSuccess(\n          results.reduce((acc, result) => acc.concat(result), [])\n        );\n      })\n      .catch(() => {\n        addErrorMessage(t('Unable to fetch all project stats'));\n      });\n\n    // Reset projects list\n    _projectStatsToFetch.clear();\n  },\n  50\n);\n\nexport function loadStatsForProject(api: Client, project: string, params: UpdateParams) {\n  // Queue up a list of projects that we need stats for\n  // and call a debounced function to fetch stats for list of projects\n  _projectStatsToFetch.add(project);\n  _debouncedLoadStats(api, _projectStatsToFetch, params);\n}\n\nexport function setActiveProject(project: Project | null) {\n  ProjectActions.setActive(project);\n}\n\nexport function removeProject(api: Client, orgId: string, project: Project) {\n  const endpoint = `/projects/${orgId}/${project.slug}/`;\n\n  ProjectActions.removeProject(project);\n  return api\n    .requestPromise(endpoint, {\n      method: 'DELETE',\n    })\n    .then(\n      () => {\n        ProjectActions.removeProjectSuccess(project);\n        addSuccessMessage(\n          tct('[project] was successfully removed', {project: project.slug})\n        );\n      },\n      err => {\n        ProjectActions.removeProjectError(project);\n        addErrorMessage(tct('Error removing [project]', {project: project.slug}));\n        throw err;\n      }\n    );\n}\n\nexport function transferProject(\n  api: Client,\n  orgId: string,\n  project: Project,\n  email: string\n) {\n  const endpoint = `/projects/${orgId}/${project.slug}/transfer/`;\n\n  return api\n    .requestPromise(endpoint, {\n      method: 'POST',\n      data: {\n        email,\n      },\n    })\n    .then(\n      () => {\n        addSuccessMessage(\n          tct('A request was sent to move [project] to a different organization', {\n            project: project.slug,\n          })\n        );\n      },\n      err => {\n        let message = '';\n        // Handle errors with known failures\n        if (err.status >= 400 && err.status < 500 && err.responseJSON) {\n          message = err.responseJSON?.detail;\n        }\n\n        if (message) {\n          addErrorMessage(\n            tct('Error transferring [project]. [message]', {\n              project: project.slug,\n              message,\n            })\n          );\n        } else {\n          addErrorMessage(\n            tct('Error transferring [project]', {\n              project: project.slug,\n            })\n          );\n        }\n\n        throw err;\n      }\n    );\n}\n\n/**\n * Associate a team with a project\n */\n\n/**\n *  Adds a team to a project\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param projectSlug Project Slug\n * @param team Team data object\n */\nexport function addTeamToProject(\n  api: Client,\n  orgSlug: string,\n  projectSlug: string,\n  team: Team\n) {\n  const endpoint = `/projects/${orgSlug}/${projectSlug}/teams/${team.slug}/`;\n\n  addLoadingMessage();\n  ProjectActions.addTeam(team);\n\n  return api\n    .requestPromise(endpoint, {\n      method: 'POST',\n    })\n    .then(\n      project => {\n        addSuccessMessage(\n          tct('[team] has been added to the [project] project', {\n            team: `#${team.slug}`,\n            project: projectSlug,\n          })\n        );\n        ProjectActions.addTeamSuccess(team, projectSlug);\n        ProjectActions.updateSuccess(project);\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to add [team] to the [project] project', {\n            team: `#${team.slug}`,\n            project: projectSlug,\n          })\n        );\n        ProjectActions.addTeamError();\n        throw err;\n      }\n    );\n}\n\n/**\n * Removes a team from a project\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param projectSlug Project Slug\n * @param teamSlug Team Slug\n */\nexport function removeTeamFromProject(\n  api: Client,\n  orgSlug: string,\n  projectSlug: string,\n  teamSlug: string\n) {\n  const endpoint = `/projects/${orgSlug}/${projectSlug}/teams/${teamSlug}/`;\n\n  addLoadingMessage();\n  ProjectActions.removeTeam(teamSlug);\n\n  return api\n    .requestPromise(endpoint, {\n      method: 'DELETE',\n    })\n    .then(\n      project => {\n        addSuccessMessage(\n          tct('[team] has been removed from the [project] project', {\n            team: `#${teamSlug}`,\n            project: projectSlug,\n          })\n        );\n        ProjectActions.removeTeamSuccess(teamSlug, projectSlug);\n        ProjectActions.updateSuccess(project);\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to remove [team] from the [project] project', {\n            team: `#${teamSlug}`,\n            project: projectSlug,\n          })\n        );\n        ProjectActions.removeTeamError(err);\n        throw err;\n      }\n    );\n}\n\n/**\n * Change a project's slug\n *\n * @param prev Previous slug\n * @param next New slug\n */\nexport function changeProjectSlug(prev: string, next: string) {\n  ProjectActions.changeSlug(prev, next);\n}\n\n/**\n * Send a sample event\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param projectSlug Project Slug\n */\nexport function sendSampleEvent(api: Client, orgSlug: string, projectSlug: string) {\n  const endpoint = `/projects/${orgSlug}/${projectSlug}/create-sample/`;\n\n  return api.requestPromise(endpoint, {\n    method: 'POST',\n  });\n}\n\n/**\n * Creates a project\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param team The team slug to assign the project to\n * @param name Name of the project\n * @param platform The platform key of the project\n * @param options Additional options such as creating default alert rules\n */\nexport function createProject(\n  api: Client,\n  orgSlug: string,\n  team: string,\n  name: string,\n  platform: string,\n  options: {defaultRules?: boolean} = {}\n) {\n  return api.requestPromise(`/teams/${orgSlug}/${team}/projects/`, {\n    method: 'POST',\n    data: {name, platform, default_rules: options.defaultRules},\n  });\n}\n\n/**\n * Load platform documentation specific to the project. The DSN and various\n * other project specific secrets will be included in the documentation.\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param projectSlug Project Slug\n * @param platform Project platform.\n */\nexport function loadDocs(\n  api: Client,\n  orgSlug: string,\n  projectSlug: string,\n  platform: PlatformKey\n) {\n  return api.requestPromise(`/projects/${orgSlug}/${projectSlug}/docs/${platform}/`);\n}\n\n/**\n * Load the counts of my projects and all projects for the current user\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n */\nexport function fetchProjectsCount(api: Client, orgSlug: string) {\n  return api.requestPromise(`/organizations/${orgSlug}/projects-count/`);\n}\n\n/**\n * Check if there are any releases in the last 90 days.\n * Used for checking if project is using releases.\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param projectId Project Id\n */\nexport async function fetchAnyReleaseExistence(\n  api: Client,\n  orgSlug: string,\n  projectId: number | string\n) {\n  const data = await api.requestPromise(`/organizations/${orgSlug}/releases/stats/`, {\n    method: 'GET',\n    query: {\n      statsPeriod: '90d',\n      project: projectId,\n      per_page: 1,\n    },\n  });\n\n  return data.length > 0;\n}\n","import * as React from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport TeamAvatar from 'app/components/avatar/teamAvatar';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport Tooltip from 'app/components/tooltip';\nimport MemberListStore from 'app/stores/memberListStore';\nimport TeamStore from 'app/stores/teamStore';\nimport {Actor} from 'app/types';\n\ntype DefaultProps = {\n  hasTooltip: boolean;\n  size: number;\n};\n\ntype Props = DefaultProps & {\n  actor: Actor;\n  default?: string;\n  title?: string;\n  gravatar?: boolean;\n  className?: string;\n  onClick?: () => void;\n  suggested?: boolean;\n  tooltip?: React.ReactNode;\n  tooltipOptions?: Omit<Tooltip['props'], 'children' | 'title'>;\n};\n\nclass ActorAvatar extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    size: 24,\n    hasTooltip: true,\n  };\n\n  render() {\n    const {actor, ...props} = this.props;\n\n    if (actor.type === 'user') {\n      const user = actor.id ? MemberListStore.getById(actor.id) ?? actor : actor;\n      return <UserAvatar user={user} {...props} />;\n    }\n\n    if (actor.type === 'team') {\n      const team = TeamStore.getById(actor.id);\n      return <TeamAvatar team={team} {...props} />;\n    }\n\n    Sentry.withScope(scope => {\n      scope.setExtra('actor', actor);\n      Sentry.captureException(new Error('Unknown avatar type'));\n    });\n\n    return null;\n  }\n}\n\nexport default ActorAvatar;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport overflowEllipsisLeft from 'app/styles/overflowEllipsisLeft';\n\ntype Props = {\n  children: React.ReactNode;\n  isParagraph?: boolean;\n  ellipsisDirection?: 'left' | 'right';\n  className?: string;\n};\n\nconst TextOverflow = styled(({isParagraph, className, children}: Props) => {\n  const Component = isParagraph ? 'p' : 'div';\n  return <Component className={className}>{children}</Component>;\n})`\n  ${p => (p.ellipsisDirection === 'right' ? overflowEllipsis : overflowEllipsisLeft)};\n  width: auto;\n  line-height: 1.1;\n`;\n\nTextOverflow.defaultProps = {\n  ellipsisDirection: 'right',\n  isParagraph: false,\n};\n\nexport default TextOverflow;\n","export default `\n  display: block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 100%;\n  direction: rtl;\n  text-align: left;\n`;\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport {Project} from 'app/types';\n\ntype ProjectsStatsStoreInterface = {\n  itemsBySlug: Record<string, Project>;\n\n  getInitialState(): ProjectsStatsStoreInterface['itemsBySlug'];\n  reset(): void;\n  getBySlug(slug: string): Project;\n  getAll(): ProjectsStatsStoreInterface['itemsBySlug'];\n};\n\n/**\n * This is a store specifically used by the dashboard, so that we can\n * clear the store when the Dashboard unmounts\n * (as to not disrupt ProjectsStore which a lot more components use)\n */\nconst projectsStatsStore: Reflux.StoreDefinition & ProjectsStatsStoreInterface = {\n  itemsBySlug: {},\n\n  init() {\n    this.reset();\n    this.listenTo(ProjectActions.loadStatsForProjectSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.update, this.onUpdate);\n    this.listenTo(ProjectActions.updateError, this.onUpdateError);\n  },\n\n  getInitialState() {\n    return this.itemsBySlug;\n  },\n\n  reset() {\n    this.itemsBySlug = {};\n    this.updatingItems = new Map();\n  },\n\n  onStatsLoadSuccess(projects: Project[]) {\n    projects.forEach(project => {\n      this.itemsBySlug[project.slug] = project;\n    });\n    this.trigger(this.itemsBySlug);\n  },\n\n  /**\n   * Optimistic updates\n   * @param projectSlug Project slug\n   * @param data Project data\n   */\n  onUpdate(projectSlug: string, data: Project) {\n    const project = this.getBySlug(projectSlug);\n    this.updatingItems.set(projectSlug, project);\n    if (!project) {\n      return;\n    }\n\n    const newProject: Project = {\n      ...project,\n      ...data,\n    };\n\n    this.itemsBySlug = {\n      ...this.itemsBySlug,\n      [project.slug]: newProject,\n    };\n    this.trigger(this.itemsBySlug);\n  },\n\n  onUpdateSuccess(data: Project) {\n    // Remove project from updating map\n    this.updatingItems.delete(data.slug);\n  },\n\n  /**\n   * Revert project data when there was an error updating project details\n   * @param err Error object\n   * @param data Previous project data\n   */\n  onUpdateError(_err: Error, projectSlug: string) {\n    const project = this.updatingItems.get(projectSlug);\n    if (!project) {\n      return;\n    }\n\n    this.updatingItems.delete(projectSlug);\n    // Restore old project\n    this.itemsBySlug = {\n      ...this.itemsBySlug,\n      [project.slug]: {...project},\n    };\n    this.trigger(this.itemsBySlug);\n  },\n\n  getAll() {\n    return this.itemsBySlug;\n  },\n\n  getBySlug(slug) {\n    return this.itemsBySlug[slug];\n  },\n};\n\ntype ProjectsStatsStore = Reflux.Store & ProjectsStatsStoreInterface;\n\nconst ProjectsStatsStore = Reflux.createStore(projectsStatsStore) as ProjectsStatsStore;\n\nexport default ProjectsStatsStore;\n"],"sourceRoot":""}