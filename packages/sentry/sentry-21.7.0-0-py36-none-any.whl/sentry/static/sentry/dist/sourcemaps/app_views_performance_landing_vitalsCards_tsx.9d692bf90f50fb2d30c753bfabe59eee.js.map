{"version":3,"sources":["webpack:///./app/utils/performance/vitals/vitalsCardsDiscoverQuery.tsx","webpack:///./app/components/sparklines/index.tsx","webpack:///./app/views/performance/vitalDetail/colorBar.tsx","webpack:///./app/views/performance/vitalDetail/vitalPercents.tsx","webpack:///./app/views/performance/landing/vitalsCards.tsx"],"names":["getRequestPayload","props","eventView","vitals","apiPayload","getEventsAPIPayload","location","vital","pick","Object","values","PERFORMANCE_URL_PARAM","VitalsCardsDiscoverQuery","route","tableData","rest","children","vitalsData","withApi","SparklinesWithCustomPropTypes","Sparklines","PropTypes","data","limit","width","height","svgWidth","svgHeight","preserveAspectRatio","margin","style","min","max","onMouseMove","ColorBar","VitalBar","fractions","colorStops","map","percent","colorStop","BarStatus","color","p","theme","gray100","f","join","space","getVitalStateText","vitalState","VitalState","Array","isArray","t","tct","threshold","webVitalPoor","webVitalMeh","VitalPercents","VitalSet","percents","pct","title","VitalStatus","vitalStateIcons","showVitalPercentNames","formatPercentage","fontSizeMedium","FrontendCards","organization","projects","frontendOnly","getDefaultDisplayFieldForPlatform","LandingDisplayField","WebVital","orgSlug","slug","isLoading","VitalsContainer","target","vitalDetailRouteWithQuery","query","generateQueryStringObject","vitalName","projectID","decodeList","project","value","getP75","chart","VitalBarContainer","to","vitalAbbreviations","VitalCard","vitalMap","tooltip","WEB_VITAL_DETAILS","description","minHeight","_BackendCards","api","baseEventView","functionNames","functions","fn","getBackendFunction","withColumns","globalSelection","getGlobalSelection","start","datetime","getUtcToLocalDateObject","undefined","end","referrer","isSummaryLoading","period","environment","environments","team","interval","getInterval","includePrevious","yAxis","getFields","partial","results","series","reduce","allSeries","oneSeries","seriesName","item","fields","i","name","backendCardDetails","formatter","alias","getAggregateAlias","rawValue","SparklineChart","horizontal","isNotInteractive","BackendCards","lineColor","SparklineContainer","SparklinesLine","stroke","fill","strokeWidth","breakpoints","showBar","showStates","showDurationDetail","emptyState","EmptyVitalBar","small","counts","poor","meh","good","total","forEach","c","keys","countKey","poorPercent","mehPercent","goodPercent","p75","vitalStateColors","getColorStopsFromPercents","BarDetail","EmptyStateWarning","StyledCard","interactive","OverflowEllipsis","size","position","CardContent","CardValue","Card","textColor","toFixed","overflowEllipsis"],"mappings":"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","file":"chunks/app_views_performance_landing_vitalsCards_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport pick from 'lodash/pick';\n\nimport {MetaType} from 'app/utils/discover/eventView';\nimport {WebVital} from 'app/utils/discover/fields';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'app/utils/discover/genericDiscoverQuery';\nimport {PERFORMANCE_URL_PARAM} from 'app/utils/performance/constants';\nimport withApi from 'app/utils/withApi';\n\nexport type TableDataRow = {\n  id: string;\n  [key: string]: React.ReactText;\n};\n\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\nexport type VitalData = {\n  poor: number;\n  meh: number;\n  good: number;\n  total: number;\n  p75: number | null;\n};\n\nexport type VitalsData = Record<string, VitalData>;\n\ntype VitalsProps = {\n  vitals: WebVital[];\n};\n\ntype RequestProps = DiscoverQueryProps & VitalsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<VitalsProps>, 'tableData'> & {\n  vitalsData: VitalsData | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getRequestPayload(props: RequestProps) {\n  const {eventView, vitals} = props;\n  const apiPayload = eventView?.getEventsAPIPayload(props.location);\n  return {\n    vital: vitals,\n    ...pick(apiPayload, ['query', ...Object.values(PERFORMANCE_URL_PARAM)]),\n  };\n}\n\nfunction VitalsCardsDiscoverQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<VitalsData, VitalsProps>\n      getRequestPayload={getRequestPayload}\n      route=\"events-vitals\"\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({vitalsData: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(VitalsCardsDiscoverQuery);\n","import {Sparklines} from 'react-sparklines';\nimport PropTypes from 'prop-types';\n\n/**\n * This is required because:\n *\n * - React.Suspense only works with default exports\n * - typescript complains that the library's `propTypes` does not\n * have `children defined.\n * - typescript also won't let us access `Sparklines.propTypes`\n */\nexport default class SparklinesWithCustomPropTypes extends Sparklines {\n  static propTypes = {\n    children: PropTypes.node,\n    data: PropTypes.array,\n    limit: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    svgWidth: PropTypes.number,\n    svgHeight: PropTypes.number,\n    preserveAspectRatio: PropTypes.string,\n    margin: PropTypes.number,\n    style: PropTypes.object,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    onMouseMove: PropTypes.func,\n  };\n}\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {Color} from 'app/utils/theme';\n\ntype ColorStop = {\n  percent: number;\n  color: Color;\n};\n\ntype Props = {\n  colorStops: ColorStop[];\n};\n\nconst ColorBar = (props: Props) => {\n  return (\n    <VitalBar fractions={props.colorStops.map(({percent}) => percent)}>\n      {props.colorStops.map(colorStop => {\n        return <BarStatus color={colorStop.color} key={colorStop.color} />;\n      })}\n    </VitalBar>\n  );\n};\n\ntype VitalBarProps = {\n  fractions: number[];\n};\n\nconst VitalBar = styled('div')<VitalBarProps>`\n  height: 16px;\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  background: ${p => p.theme.gray100};\n  display: grid;\n  grid-template-columns: ${p => p.fractions.map(f => `${f}fr`).join(' ')};\n  margin-bottom: ${space(1)};\n  border-radius: 2px;\n`;\n\ntype ColorProps = {\n  color: Color;\n};\n\nconst BarStatus = styled('div')<ColorProps>`\n  background-color: ${p => p.theme[p.color]};\n`;\n\nexport default ColorBar;\n","import styled from '@emotion/styled';\n\nimport Tooltip from 'app/components/tooltip';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {WebVital} from 'app/utils/discover/fields';\nimport {formatPercentage} from 'app/utils/formatters';\n\nimport {VitalState, vitalStateIcons, webVitalMeh, webVitalPoor} from './utils';\n\ntype Percent = {\n  vitalState: VitalState;\n  percent: number;\n};\n\ntype Props = {\n  vital: WebVital | WebVital[];\n  percents: Percent[];\n  showVitalPercentNames?: boolean;\n};\n\nfunction getVitalStateText(vital, vitalState) {\n  switch (vitalState) {\n    case VitalState.POOR:\n      return Array.isArray(vital)\n        ? t('Poor')\n        : tct('Poor: >[threshold]ms', {threshold: webVitalPoor[vital]});\n    case VitalState.MEH:\n      return Array.isArray(vital)\n        ? t('Meh')\n        : tct('Meh: >[threshold]ms', {threshold: webVitalMeh[vital]});\n    case VitalState.GOOD:\n      return Array.isArray(vital)\n        ? t('Good')\n        : tct('Good: <[threshold]ms', {threshold: webVitalMeh[vital]});\n    default:\n      return null;\n  }\n}\n\nexport default function VitalPercents(props: Props) {\n  return (\n    <VitalSet>\n      {props.percents.map(pct => {\n        return (\n          <Tooltip\n            key={pct.vitalState}\n            title={getVitalStateText(props.vital, pct.vitalState)}\n          >\n            <VitalStatus>\n              {vitalStateIcons[pct.vitalState]}\n              <span>\n                {props.showVitalPercentNames && t(`${pct.vitalState}`)}{' '}\n                {formatPercentage(pct.percent, 0)}\n              </span>\n            </VitalStatus>\n          </Tooltip>\n        );\n      })}\n    </VitalSet>\n  );\n}\n\nconst VitalSet = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n`;\n\nconst VitalStatus = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Client} from 'app/api';\nimport Card from 'app/components/card';\nimport EventsRequest from 'app/components/charts/eventsRequest';\nimport {HeaderTitle} from 'app/components/charts/styles';\nimport {getInterval} from 'app/components/charts/utils';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport Link from 'app/components/links/link';\nimport Placeholder from 'app/components/placeholder';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport Sparklines from 'app/components/sparklines';\nimport SparklinesLine from 'app/components/sparklines/line';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {getUtcToLocalDateObject} from 'app/utils/dates';\nimport DiscoverQuery from 'app/utils/discover/discoverQuery';\nimport EventView from 'app/utils/discover/eventView';\nimport {getAggregateAlias, WebVital} from 'app/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'app/utils/performance/vitals/constants';\nimport VitalsCardsDiscoverQuery, {\n  VitalData,\n  VitalsData,\n} from 'app/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeList} from 'app/utils/queryString';\nimport theme from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\n\nimport ColorBar from '../vitalDetail/colorBar';\nimport {\n  vitalAbbreviations,\n  vitalDetailRouteWithQuery,\n  vitalMap,\n  VitalState,\n  vitalStateColors,\n} from '../vitalDetail/utils';\nimport VitalPercents from '../vitalDetail/vitalPercents';\n\nimport {\n  backendCardDetails,\n  getBackendFunction,\n  getDefaultDisplayFieldForPlatform,\n  LandingDisplayField,\n} from './utils';\n\ntype FrontendCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  frontendOnly?: boolean;\n};\n\nexport function FrontendCards(props: FrontendCardsProps) {\n  const {eventView, location, organization, projects, frontendOnly = false} = props;\n\n  if (frontendOnly) {\n    const defaultDisplay = getDefaultDisplayFieldForPlatform(projects, eventView);\n    const isFrontend = defaultDisplay === LandingDisplayField.FRONTEND_PAGELOAD;\n\n    if (!isFrontend) {\n      return null;\n    }\n  }\n\n  const vitals = [WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS];\n\n  return (\n    <VitalsCardsDiscoverQuery\n      eventView={eventView}\n      location={location}\n      orgSlug={organization.slug}\n      vitals={vitals}\n    >\n      {({isLoading, vitalsData}) => {\n        return (\n          <VitalsContainer>\n            {vitals.map(vital => {\n              const target = vitalDetailRouteWithQuery({\n                orgSlug: organization.slug,\n                query: eventView.generateQueryStringObject(),\n                vitalName: vital,\n                projectID: decodeList(location.query.project),\n              });\n\n              const value = isLoading\n                ? '\\u2014'\n                : getP75(vitalsData?.[vital] ?? null, vital);\n              const chart = (\n                <VitalBarContainer>\n                  <VitalBar isLoading={isLoading} vital={vital} data={vitalsData} />\n                </VitalBarContainer>\n              );\n\n              return (\n                <Link\n                  key={vital}\n                  to={target}\n                  data-test-id={`vitals-linked-card-${vitalAbbreviations[vital]}`}\n                >\n                  <VitalCard\n                    title={vitalMap[vital] ?? ''}\n                    tooltip={WEB_VITAL_DETAILS[vital].description ?? ''}\n                    value={isLoading ? '\\u2014' : value}\n                    chart={chart}\n                    minHeight={150}\n                  />\n                </Link>\n              );\n            })}\n          </VitalsContainer>\n        );\n      }}\n    </VitalsCardsDiscoverQuery>\n  );\n}\n\nconst VitalBarContainer = styled('div')`\n  margin-top: ${space(1.5)};\n`;\n\ntype BackendCardsProps = {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nfunction _BackendCards(props: BackendCardsProps) {\n  const {api, eventView: baseEventView, location, organization} = props;\n  const functionNames = [\n    'p75' as const,\n    'tpm' as const,\n    'failure_rate' as const,\n    'apdex' as const,\n  ];\n  const functions = functionNames.map(fn => getBackendFunction(fn, organization));\n  const eventView = baseEventView.withColumns(functions);\n\n  // construct request parameters for fetching chart data\n  const globalSelection = eventView.getGlobalSelection();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : undefined;\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : undefined;\n  const apiPayload = eventView.getEventsAPIPayload(location);\n\n  return (\n    <DiscoverQuery\n      location={location}\n      eventView={eventView}\n      orgSlug={organization.slug}\n      limit={1}\n      referrer=\"api.performance.vitals-cards\"\n    >\n      {({isLoading: isSummaryLoading, tableData}) => (\n        <EventsRequest\n          api={api}\n          organization={organization}\n          period={globalSelection.datetime.period}\n          project={globalSelection.projects}\n          environment={globalSelection.environments}\n          team={apiPayload.team}\n          start={start}\n          end={end}\n          interval={getInterval({\n            start: start || null,\n            end: end || null,\n            period: globalSelection.datetime.period,\n          })}\n          query={apiPayload.query}\n          includePrevious={false}\n          yAxis={eventView.getFields()}\n          partial\n        >\n          {({results}) => {\n            const series = results?.reduce((allSeries, oneSeries) => {\n              allSeries[oneSeries.seriesName] = oneSeries.data.map(item => item.value);\n              return allSeries;\n            }, {});\n            const fields = eventView\n              .getFields()\n              .map((fn, i) => [functionNames[i], fn, series?.[fn]]);\n\n            return (\n              <VitalsContainer>\n                {fields.map(([name, fn, data]) => {\n                  const {title, tooltip, formatter} =\n                    backendCardDetails(organization)[name];\n                  const alias = getAggregateAlias(fn);\n                  const rawValue = tableData?.data?.[0]?.[alias];\n                  const value =\n                    isSummaryLoading || rawValue === undefined\n                      ? '\\u2014'\n                      : formatter(rawValue);\n                  const chart = <SparklineChart data={data} />;\n                  return (\n                    <VitalCard\n                      key={name}\n                      title={title}\n                      tooltip={tooltip}\n                      value={value}\n                      chart={chart}\n                      horizontal\n                      minHeight={96}\n                      isNotInteractive\n                    />\n                  );\n                })}\n              </VitalsContainer>\n            );\n          }}\n        </EventsRequest>\n      )}\n    </DiscoverQuery>\n  );\n}\n\nexport const BackendCards = withApi(_BackendCards);\n\ntype SparklineChartProps = {\n  data: number[];\n};\n\nfunction SparklineChart(props: SparklineChartProps) {\n  const {data} = props;\n  const width = 150;\n  const height = 24;\n  const lineColor = theme.charts.getColorPalette(1)[0];\n  return (\n    <SparklineContainer data-test-id=\"sparkline\" width={width} height={height}>\n      <Sparklines data={data} width={width} height={height}>\n        <SparklinesLine style={{stroke: lineColor, fill: 'none', strokeWidth: 3}} />\n      </Sparklines>\n    </SparklineContainer>\n  );\n}\n\ntype SparklineContainerProps = {\n  width: number;\n  height: number;\n};\n\nconst SparklineContainer = styled('div')<SparklineContainerProps>`\n  flex-grow: 4;\n  max-height: ${p => p.height}px;\n  max-width: ${p => p.width}px;\n  margin: ${space(1)} ${space(0)} ${space(0.5)} ${space(3)};\n`;\n\nconst VitalsContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  }\n`;\n\ntype VitalBarProps = {\n  isLoading: boolean;\n  data: VitalsData | null;\n  vital: WebVital | WebVital[];\n  value?: string;\n  showBar?: boolean;\n  showStates?: boolean;\n  showDurationDetail?: boolean;\n  showVitalPercentNames?: boolean;\n};\n\nexport function VitalBar(props: VitalBarProps) {\n  const {\n    isLoading,\n    data,\n    vital,\n    value,\n    showBar = true,\n    showStates = false,\n    showDurationDetail = false,\n    showVitalPercentNames = false,\n  } = props;\n\n  if (isLoading) {\n    return showStates ? <Placeholder height=\"48px\" /> : null;\n  }\n\n  const emptyState = showStates ? (\n    <EmptyVitalBar small>{t('No vitals found')}</EmptyVitalBar>\n  ) : null;\n\n  if (!data) {\n    return emptyState;\n  }\n\n  const counts: Pick<VitalData, 'poor' | 'meh' | 'good' | 'total'> = {\n    poor: 0,\n    meh: 0,\n    good: 0,\n    total: 0,\n  };\n  const vitals = Array.isArray(vital) ? vital : [vital];\n  vitals.forEach(vitalName => {\n    const c = data?.[vitalName] ?? {};\n    Object.keys(counts).forEach(countKey => (counts[countKey] += c[countKey]));\n  });\n\n  if (!counts.total) {\n    return emptyState;\n  }\n\n  const p75: React.ReactNode = Array.isArray(vital)\n    ? null\n    : value ?? getP75(data?.[vital] ?? null, vital);\n  const percents = getPercentsFromCounts(counts);\n  const colorStops = getColorStopsFromPercents(percents);\n\n  return (\n    <React.Fragment>\n      {showBar && <ColorBar colorStops={colorStops} />}\n      <BarDetail>\n        {showDurationDetail && p75 && (\n          <div data-test-id=\"vital-bar-p75\">\n            {t('The p75 for all transactions is ')}\n            <strong>{p75}</strong>\n          </div>\n        )}\n        <VitalPercents\n          vital={vital}\n          percents={percents}\n          showVitalPercentNames={showVitalPercentNames}\n        />\n      </BarDetail>\n    </React.Fragment>\n  );\n}\n\nconst EmptyVitalBar = styled(EmptyStateWarning)`\n  height: 48px;\n  padding: ${space(1.5)} 15%;\n`;\n\ntype VitalCardProps = {\n  title: string;\n  tooltip: string;\n  value: string;\n  chart: React.ReactNode;\n  minHeight?: number;\n  horizontal?: boolean;\n  isNotInteractive?: boolean;\n};\n\nfunction VitalCard(props: VitalCardProps) {\n  const {chart, minHeight, horizontal, title, tooltip, value, isNotInteractive} = props;\n  return (\n    <StyledCard interactive={!isNotInteractive} minHeight={minHeight}>\n      <HeaderTitle>\n        <OverflowEllipsis>{t(title)}</OverflowEllipsis>\n        <QuestionTooltip size=\"sm\" position=\"top\" title={tooltip} />\n      </HeaderTitle>\n      <CardContent horizontal={horizontal}>\n        <CardValue>{value}</CardValue>\n        {chart}\n      </CardContent>\n    </StyledCard>\n  );\n}\n\nconst CardContent = styled('div')<{horizontal?: boolean}>`\n  width: 100%;\n  display: flex;\n  flex-direction: ${p => (p.horizontal ? 'row' : 'column')};\n  justify-content: space-between;\n`;\n\nconst StyledCard = styled(Card)<{minHeight?: number}>`\n  color: ${p => p.theme.textColor};\n  padding: ${space(2)} ${space(3)};\n  align-items: flex-start;\n  margin-bottom: ${space(2)};\n  ${p => p.minHeight && `min-height: ${p.minHeight}px`};\n`;\n\nfunction getP75(data: VitalData | null, vitalName: WebVital): string {\n  const p75 = data?.p75 ?? null;\n  if (p75 === null) {\n    return '\\u2014';\n  } else {\n    return vitalName === WebVital.CLS ? p75.toFixed(2) : `${p75.toFixed(0)}ms`;\n  }\n}\n\ntype Percent = {\n  vitalState: VitalState;\n  percent: number;\n};\n\nfunction getPercentsFromCounts({poor, meh, good, total}) {\n  const poorPercent = poor / total;\n  const mehPercent = meh / total;\n  const goodPercent = good / total;\n\n  const percents: Percent[] = [\n    {\n      vitalState: VitalState.GOOD,\n      percent: goodPercent,\n    },\n    {\n      vitalState: VitalState.MEH,\n      percent: mehPercent,\n    },\n    {\n      vitalState: VitalState.POOR,\n      percent: poorPercent,\n    },\n  ];\n\n  return percents;\n}\n\nfunction getColorStopsFromPercents(percents: Percent[]) {\n  return percents.map(({percent, vitalState}) => ({\n    percent,\n    color: vitalStateColors[vitalState],\n  }));\n}\n\nconst BarDetail = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst CardValue = styled('div')`\n  font-size: 32px;\n  margin-top: ${space(1)};\n`;\n\nconst OverflowEllipsis = styled('div')`\n  ${overflowEllipsis};\n`;\n"],"sourceRoot":""}