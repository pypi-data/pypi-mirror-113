{"version":3,"sources":["webpack:///./app/views/userFeedback/utils.tsx","webpack:///./app/views/userFeedback/index.tsx"],"names":["getQuery","search","query","qs","status","pick","Object","values","URL_PARAM","OrganizationUserFeedback","this","props","organization","location","slug","t","project","Array","isArray","orgId","params","className","state","reportList","map","item","issue","id","data","eventId","eventID","StyledEventUserFeedback","report","issueId","projectIds","renderBody","loading","length","renderResults","renderEmpty","pathname","reportListPageLinks","unresolvedQuery","omit","allIssuesQuery","Header","active","merged","size","barId","to","renderStreamBody","pageLinks","AsyncView","withOrganization","withProfiler","space","EventUserFeedback"],"mappings":"mlFAUO,SAASA,EAASC,GACvB,IAAMC,EAAQC,QAASF,GASvB,O,qWALoB,CAAH,CACfG,YAHqC,IAAjBF,EAAME,OAAyBF,EAAME,OARtC,cAYhBC,IAAKH,EAAD,CAAS,UAAT,eAAsBI,OAAOC,OAAOC,U,6qBCgBzCC,E,8iBACJ,WACE,MAGIC,KAAKC,MAFPC,EADF,EACEA,aACWX,EAFb,EAEEY,SAAWZ,OAGb,MAAO,CACL,CACE,aADF,yBAEoBW,EAAaE,KAFjC,mBAGE,CACEZ,MAAOF,EAASC,Q,sBAMxB,WACE,iBAAUc,OAAE,iBAAZ,cAAkCL,KAAKC,MAAMC,aAAaE,Q,sBAG5D,WACE,IAAOE,EAAWN,KAAKC,MAAME,SAASX,MAA/Bc,QAEP,OAAOC,MAAMC,QAAQF,GACjBA,EACmB,iBAAZA,EACP,CAACA,GACD,K,2BAGN,WACE,IAAOG,EAAST,KAAKC,MAAMS,OAApBD,MAEP,OACE,QAAC,KAAD,CAAOE,UAAU,aAAa,eAAa,qBAA3C,SACGX,KAAKY,MAAMC,WAAWC,KAAI,SAAAC,GACzB,IAAMC,EAAQD,EAAKC,MACnB,OACE,QAAC,IAAD,CAA4BC,GAAID,EAAMC,GAAIC,KAAMF,EAAOG,QAASJ,EAAKK,QAArE,UACE,QAACC,EAAD,CAAyBC,OAAQP,EAAMN,MAAOA,EAAOc,QAASP,EAAMC,MADnDF,EAAKE,W,yBASlC,WACE,OAAO,QAAC,IAAD,CAAmBO,WAAYxB,KAAKwB,e,2BAG7C,WACE,OAAOxB,KAAKyB,e,8BAGd,WACE,MAA8BzB,KAAKY,MAA5Bc,EAAP,EAAOA,QAASb,EAAhB,EAAgBA,WAEhB,OAAIa,GAEA,QAAC,KAAD,WACE,QAAC,IAAD,MAKDb,EAAWc,OAIT3B,KAAK4B,gBAHH5B,KAAK6B,gB,wBAMhB,WACE,IAAO3B,EAAgBF,KAAKC,MAArBC,aACAC,EAAYH,KAAKC,MAAjBE,SACA2B,EAA2B3B,EAA3B2B,SAAUvC,EAAiBY,EAAjBZ,OAAQC,EAASW,EAATX,MAClBE,EAAUJ,EAASC,GAAnBG,OACAqC,EAAuB/B,KAAKY,MAA5BmB,oBAEDC,EAAkBC,IAAKzC,EAAO,UAC9B0C,EAAiB,OAAI1C,GAAP,IAAcE,OAAQ,KAE1C,OACE,QAAC,IAAD,WACE,QAAC,KAAD,WACE,QAAC,IAAD,CAA6BQ,aAAcA,EAA3C,UACE,eAAK,eAAa,gBAAlB,WACE,QAACiC,EAAD,YACE,QAAC,IAAD,WAAc9B,OAAE,oBAChB,QAAC,KAAD,CAAW+B,OAAS7B,MAAMC,QAAQd,GAAyB,GAAfA,GAAU,GAAS2C,QAAM,EAArE,WACE,QAAC,KAAD,CACEC,KAAK,QACLC,MAAM,aACNC,GAAI,CAACV,WAAUtC,MAAOwC,GAHxB,UAKG3B,OAAE,iBAEL,QAAC,KAAD,CAAQiC,KAAK,QAAQC,MAAM,GAAGC,GAAI,CAACV,WAAUtC,MAAO0C,GAApD,UACG7B,OAAE,sBAIRL,KAAKyC,oBACN,QAAC,IAAD,CAAYC,UAAWX,iB,GA1GEY,KAmHvC,GAAeC,QAAiBC,QAAa9C,IAEvCoC,GAAS,OAAO,MAAP,qBAAH,gFAIOW,OAAM,GAJb,KAONzB,GAA0B,OAAO0B,IAAP,qBAAH,WACjBD,OAAM,GADW","file":"chunks/app_views_userFeedback_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import pick from 'lodash/pick';\nimport * as qs from 'query-string';\n\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\n\nconst DEFAULT_STATUS = 'unresolved';\n\n/**\n * Get query for API given the current location.search string\n */\nexport function getQuery(search: string) {\n  const query = qs.parse(search);\n\n  const status = typeof query.status !== 'undefined' ? query.status : DEFAULT_STATUS;\n\n  const queryParams = {\n    status,\n    ...pick(query, ['cursor', ...Object.values(URL_PARAM)]),\n  };\n\n  return queryParams;\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {withProfiler} from '@sentry/react';\nimport omit from 'lodash/omit';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport EventUserFeedback from 'app/components/events/userFeedback';\nimport CompactIssue from 'app/components/issues/compactIssue';\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport PageHeading from 'app/components/pageHeading';\nimport Pagination from 'app/components/pagination';\nimport {Panel} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {Organization, UserReport} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\n\nimport UserFeedbackEmpty from './userFeedbackEmpty';\nimport {getQuery} from './utils';\n\ntype State = AsyncView['state'] & {\n  reportList: UserReport[];\n};\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\nclass OrganizationUserFeedback extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      organization,\n      location: {search},\n    } = this.props;\n\n    return [\n      [\n        'reportList',\n        `/organizations/${organization.slug}/user-feedback/`,\n        {\n          query: getQuery(search),\n        },\n      ],\n    ];\n  }\n\n  getTitle() {\n    return `${t('User Feedback')} - ${this.props.organization.slug}`;\n  }\n\n  get projectIds() {\n    const {project} = this.props.location.query;\n\n    return Array.isArray(project)\n      ? project\n      : typeof project === 'string'\n      ? [project]\n      : [];\n  }\n\n  renderResults() {\n    const {orgId} = this.props.params;\n\n    return (\n      <Panel className=\"issue-list\" data-test-id=\"user-feedback-list\">\n        {this.state.reportList.map(item => {\n          const issue = item.issue;\n          return (\n            <CompactIssue key={item.id} id={issue.id} data={issue} eventId={item.eventID}>\n              <StyledEventUserFeedback report={item} orgId={orgId} issueId={issue.id} />\n            </CompactIssue>\n          );\n        })}\n      </Panel>\n    );\n  }\n\n  renderEmpty() {\n    return <UserFeedbackEmpty projectIds={this.projectIds} />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderStreamBody() {\n    const {loading, reportList} = this.state;\n\n    if (loading) {\n      return (\n        <Panel>\n          <LoadingIndicator />\n        </Panel>\n      );\n    }\n\n    if (!reportList.length) {\n      return this.renderEmpty();\n    }\n\n    return this.renderResults();\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const {location} = this.props;\n    const {pathname, search, query} = location;\n    const {status} = getQuery(search);\n    const {reportListPageLinks} = this.state;\n\n    const unresolvedQuery = omit(query, 'status');\n    const allIssuesQuery = {...query, status: ''};\n\n    return (\n      <GlobalSelectionHeader>\n        <PageContent>\n          <LightWeightNoProjectMessage organization={organization}>\n            <div data-test-id=\"user-feedback\">\n              <Header>\n                <PageHeading>{t('User Feedback')}</PageHeading>\n                <ButtonBar active={!Array.isArray(status) ? status || '' : ''} merged>\n                  <Button\n                    size=\"small\"\n                    barId=\"unresolved\"\n                    to={{pathname, query: unresolvedQuery}}\n                  >\n                    {t('Unresolved')}\n                  </Button>\n                  <Button size=\"small\" barId=\"\" to={{pathname, query: allIssuesQuery}}>\n                    {t('All Issues')}\n                  </Button>\n                </ButtonBar>\n              </Header>\n              {this.renderStreamBody()}\n              <Pagination pageLinks={reportListPageLinks} />\n            </div>\n          </LightWeightNoProjectMessage>\n        </PageContent>\n      </GlobalSelectionHeader>\n    );\n  }\n}\n\nexport default withOrganization(withProfiler(OrganizationUserFeedback));\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledEventUserFeedback = styled(EventUserFeedback)`\n  margin: ${space(2)} 0 0;\n`;\n"],"sourceRoot":""}