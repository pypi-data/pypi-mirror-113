{"version":3,"sources":["webpack:///./app/components/projects/appStoreConnectContext/index.tsx","webpack:///./app/components/projects/appStoreConnectContext/utils.tsx","webpack:///./app/views/projects/projectContext.tsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.tsx"],"names":["AppStoreConnectContext","createContext","undefined","Provider","withApi","api","children","project","organization","useState","projectDetails","setProjectDetails","appStoreConnectValidationData","setAppStoreConnectValidationData","orgSlug","slug","hasAppConnectStoreFeatureFlag","features","includes","symbolSources","requestPromise","response","getAppStoreConnectSymbolSourceId","JSON","parse","find","symbolSource","type","toLowerCase","id","appStoreConnectSymbolSourceId","useEffect","fetchProjectDetails","fetchAppStoreConnectValidationData","value","updateAlertMessage","getAppConnectStoreUpdateAlertMessage","Consumer","appStoreConnectAlertMessage","iTunesSessionInvalid","t","appStoreCredentialsInvalid","isTodayAfterItunesSessionRefreshAt","appConnectValidationData","itunesSessionValid","appstoreCredentialsValid","itunesSessionRefreshAt","moment","isAfter","ErrorTypes","ProjectContext","createReactClass","displayName","childContextTypes","SentryTypes","mixins","Reflux","MemberListStore","ProjectsStore","getInitialState","loading","error","errorType","memberList","getChildContext","this","state","componentWillMount","fetchData","componentWillReceiveProps","nextProps","projectId","props","skipReload","remountComponent","componentDidUpdate","prevProps","prevState","projects","length","docTitle","docTitleRef","forceUpdate","setState","getTitle","onProjectChange","projectIds","has","identifyProject","projectSlug","orgId","activeProject","hasAccess","setActiveProject","projectRequest","UNKNOWN","fetchOrgMembers","isMember","MISSING_MEMBERSHIP","PROJECT_NOT_FOUND","renderBody","className","style","margin","ErrorWrapper","onRetry","render","ref","title","withOrganization","withProjects","space","ProjectSettingsNavigation","appStoreConnectContext","useContext","debugFilesNeedsReview","navigationObjects","getConfiguration","access","Set","withProject","ProjectSettingsLayout","params","routes","renderNavigation","React"],"mappings":"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","file":"chunks/app_views_settings_project_projectSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {createContext, useEffect, useState} from 'react';\n\nimport {Client} from 'app/api';\nimport {Organization, Project} from 'app/types';\nimport {AppStoreConnectValidationData} from 'app/types/debugFiles';\nimport withApi from 'app/utils/withApi';\n\nexport type AppStoreConnectContextProps = AppStoreConnectValidationData | undefined;\n\nconst AppStoreConnectContext = createContext<AppStoreConnectContextProps>(undefined);\n\nimport {getAppConnectStoreUpdateAlertMessage} from './utils';\n\ntype ProviderProps = {\n  children: React.ReactNode;\n  organization: Organization;\n  api: Client;\n  project?: Project;\n};\n\nconst Provider = withApi(({api, children, project, organization}: ProviderProps) => {\n  const [projectDetails, setProjectDetails] = useState<undefined | Project>();\n  const [appStoreConnectValidationData, setAppStoreConnectValidationData] =\n    useState<AppStoreConnectContextProps>(undefined);\n\n  const orgSlug = organization.slug;\n  const hasAppConnectStoreFeatureFlag =\n    !!organization.features?.includes('app-store-connect');\n\n  useEffect(() => {\n    fetchProjectDetails();\n  }, [project]);\n\n  useEffect(() => {\n    fetchAppStoreConnectValidationData();\n  }, [projectDetails]);\n\n  async function fetchProjectDetails() {\n    if (!hasAppConnectStoreFeatureFlag || !project || projectDetails) {\n      return;\n    }\n\n    if (project.symbolSources) {\n      setProjectDetails(project);\n      return;\n    }\n\n    try {\n      const response = await api.requestPromise(`/projects/${orgSlug}/${project.slug}/`);\n      setProjectDetails(response);\n    } catch {\n      // do nothing\n    }\n  }\n\n  function getAppStoreConnectSymbolSourceId(symbolSources?: string) {\n    return (symbolSources ? JSON.parse(symbolSources) : []).find(\n      symbolSource => symbolSource.type.toLowerCase() === 'appstoreconnect'\n    )?.id;\n  }\n\n  async function fetchAppStoreConnectValidationData() {\n    if (!projectDetails) {\n      return;\n    }\n\n    const appStoreConnectSymbolSourceId = getAppStoreConnectSymbolSourceId(\n      projectDetails.symbolSources\n    );\n\n    if (!appStoreConnectSymbolSourceId) {\n      return;\n    }\n\n    try {\n      const response = await api.requestPromise(\n        `/projects/${orgSlug}/${projectDetails.slug}/appstoreconnect/validate/${appStoreConnectSymbolSourceId}/`\n      );\n      setAppStoreConnectValidationData({\n        id: appStoreConnectSymbolSourceId,\n        ...response,\n      });\n    } catch {\n      // do nothing\n    }\n  }\n\n  return (\n    <AppStoreConnectContext.Provider\n      value={\n        appStoreConnectValidationData\n          ? {\n              ...appStoreConnectValidationData,\n              updateAlertMessage: getAppConnectStoreUpdateAlertMessage(\n                appStoreConnectValidationData\n              ),\n            }\n          : undefined\n      }\n    >\n      {children}\n    </AppStoreConnectContext.Provider>\n  );\n});\n\nconst Consumer = AppStoreConnectContext.Consumer;\n\nexport {Provider, Consumer};\n\nexport default AppStoreConnectContext;\n","import moment from 'moment';\n\nimport {t} from 'app/locale';\nimport {AppStoreConnectValidationData} from 'app/types/debugFiles';\n\nexport const appStoreConnectAlertMessage = {\n  iTunesSessionInvalid: t(\n    'The iTunes session of your configured App Store Connect has expired.'\n  ),\n  appStoreCredentialsInvalid: t(\n    'The credentials of your configured App Store Connect are invalid.'\n  ),\n  isTodayAfterItunesSessionRefreshAt: t(\n    'The iTunes session of your configured App Store Connect will likely expire soon.'\n  ),\n};\n\nexport function getAppConnectStoreUpdateAlertMessage(\n  appConnectValidationData: AppStoreConnectValidationData\n) {\n  if (appConnectValidationData.itunesSessionValid === false) {\n    return appStoreConnectAlertMessage.iTunesSessionInvalid;\n  }\n\n  if (appConnectValidationData.appstoreCredentialsValid === false) {\n    return appStoreConnectAlertMessage.appStoreCredentialsInvalid;\n  }\n\n  const itunesSessionRefreshAt = appConnectValidationData.itunesSessionRefreshAt;\n\n  if (!itunesSessionRefreshAt) {\n    return undefined;\n  }\n\n  const isTodayAfterItunesSessionRefreshAt = moment().isAfter(\n    moment(itunesSessionRefreshAt)\n  );\n\n  if (!isTodayAfterItunesSessionRefreshAt) {\n    return undefined;\n  }\n\n  return appStoreConnectAlertMessage.isTodayAfterItunesSessionRefreshAt;\n}\n","import DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {fetchOrgMembers} from 'app/actionCreators/members';\nimport {setActiveProject} from 'app/actionCreators/projects';\nimport {Client} from 'app/api';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MissingProjectMembership from 'app/components/projects/missingProjectMembership';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport MemberListStore from 'app/stores/memberListStore';\nimport ProjectsStore from 'app/stores/projectsStore';\nimport space from 'app/styles/space';\nimport {Member, Organization, Project} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProjects from 'app/utils/withProjects';\n\nenum ErrorTypes {\n  MISSING_MEMBERSHIP = 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype ChildFuncProps = {\n  project: Project;\n};\n\ntype Props = {\n  api: Client;\n  /**\n   * If true, this will not change `state.loading` during `fetchData` phase\n   */\n  skipReload?: boolean;\n  organization: Organization;\n  projects: Project[];\n  projectId: string;\n  orgId: string;\n  children: ((props: ChildFuncProps) => React.ReactNode) | React.ReactNode;\n};\n\ntype State = {\n  memberList: Member[];\n  project: Project | null;\n  loading: boolean;\n  error: boolean;\n  errorType: ErrorTypes | null;\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nconst ProjectContext = createReactClass<Props, State>({\n  displayName: 'ProjectContext',\n\n  childContextTypes: {\n    project: SentryTypes.Project,\n  },\n\n  mixins: [\n    Reflux.connect(MemberListStore, 'memberList') as any,\n    Reflux.listenTo(ProjectsStore, 'onProjectChange') as any,\n  ],\n\n  getInitialState() {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n    };\n  },\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  },\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n\n    // Call forceUpdate() on <DocumentTitle/> if either project or organization\n    // state has changed. This is because <DocumentTitle/>'s shouldComponentUpdate()\n    // returns false unless props differ; meaning context changes for project/org\n    // do NOT trigger renders for <DocumentTitle/> OR any subchildren. The end result\n    // being that child elements that listen for context changes on project/org will\n    // NOT update (without this hack).\n    // See: https://github.com/gaearon/react-document-title/issues/35\n\n    // intentionally shallow comparing references\n    if (prevState.project !== this.state.project) {\n      if (!this.docTitle) {\n        return;\n      }\n      const docTitle = this.docTitleRef.docTitle;\n      if (docTitle) {\n        docTitle.forceUpdate();\n      }\n    }\n  },\n\n  remountComponent() {\n    this.setState(this.getInitialState!());\n  },\n\n  getTitle() {\n    return this.state.project?.slug ?? 'Sentry';\n  },\n\n  onProjectChange(projectIds: Set<string>) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)},\n    });\n  },\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  },\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState((state: State) => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ErrorTypes.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, activeProject.id);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.PROJECT_NOT_FOUND,\n      });\n    }\n  },\n\n  renderBody() {\n    if (this.state.loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    }\n\n    if (!this.state.error) {\n      const {children} = this.props;\n\n      return typeof children === 'function'\n        ? children({project: this.state.project})\n        : children;\n    }\n\n    switch (this.state.errorType) {\n      case ErrorTypes.PROJECT_NOT_FOUND:\n        // TODO(chrissy): use scale for margin values\n        return (\n          <div className=\"container\">\n            <div className=\"alert alert-block\" style={{margin: '30px 0 10px'}}>\n              {t('The project you were looking for was not found.')}\n            </div>\n          </div>\n        );\n      case ErrorTypes.MISSING_MEMBERSHIP:\n        // TODO(dcramer): add various controls to improve this flow and break it\n        // out into a reusable missing access error component\n        return (\n          <ErrorWrapper>\n            <MissingProjectMembership\n              organization={this.props.organization}\n              projectSlug={this.state.project.slug}\n            />\n          </ErrorWrapper>\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  },\n\n  render() {\n    return (\n      <DocumentTitle ref={ref => (this.docTitleRef = ref)} title={this.getTitle()}>\n        {this.renderBody()}\n      </DocumentTitle>\n    );\n  },\n});\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(ProjectContext)));\n\nconst ErrorWrapper = styled('div')`\n  width: 100%;\n  margin: ${space(2)} ${space(4)};\n`;\n","import {useContext} from 'react';\n\nimport AppStoreConnectContext from 'app/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'app/types';\nimport withProject from 'app/utils/withProject';\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport getConfiguration from 'app/views/settings/project/navigationConfiguration';\n\ntype Props = {\n  organization: Organization;\n  project?: Project;\n};\n\nconst ProjectSettingsNavigation = ({organization, project}: Props) => {\n  const appStoreConnectContext = useContext(AppStoreConnectContext);\n\n  const debugFilesNeedsReview = !!appStoreConnectContext?.updateAlertMessage;\n\n  return (\n    <SettingsNavigation\n      navigationObjects={getConfiguration({project, organization, debugFilesNeedsReview})}\n      access={new Set(organization.access)}\n      features={new Set(organization.features)}\n      organization={organization}\n      project={project}\n    />\n  );\n};\n\nexport default withProject(ProjectSettingsNavigation);\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport * as AppStoreConnectContext from 'app/components/projects/appStoreConnectContext';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport ProjectContext from 'app/views/projects/projectContext';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport ProjectSettingsNavigation from 'app/views/settings/project/projectSettingsNavigation';\n\ntype Props = {\n  organization: Organization;\n  children: React.ReactNode;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nfunction ProjectSettingsLayout({\n  params,\n  organization,\n  children,\n  routes,\n  ...props\n}: Props) {\n  const {orgId, projectId} = params;\n\n  return (\n    <ProjectContext orgId={orgId} projectId={projectId}>\n      {({project}) => (\n        <AppStoreConnectContext.Provider project={project} organization={organization}>\n          <SettingsLayout\n            params={params}\n            routes={routes}\n            {...props}\n            renderNavigation={() => (\n              <ProjectSettingsNavigation organization={organization} />\n            )}\n          >\n            {children && React.isValidElement(children)\n              ? React.cloneElement(children, {\n                  organization,\n                })\n              : children}\n          </SettingsLayout>\n        </AppStoreConnectContext.Provider>\n      )}\n    </ProjectContext>\n  );\n}\n\nexport default withOrganization(ProjectSettingsLayout);\n"],"sourceRoot":""}