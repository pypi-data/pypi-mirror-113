{"version":3,"sources":["webpack:///./app/views/onboarding/components/firstEventIndicator.tsx","webpack:///./app/views/onboarding/components/firstEventFooter.tsx","webpack:///./app/views/onboarding/components/integrations/addInstallationInstructions.tsx","webpack:///./app/views/onboarding/components/integrations/postInstallCodeSnippet.tsx","webpack:///./app/views/onboarding/createSampleEventButton.tsx","webpack:///./app/views/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/organizationIntegrations/addIntegrationButton.tsx"],"names":["FirstEventIndicator","children","props","firstIssue","indicator","Indicator","firstEventButton","title","t","tooltipProps","disabled","priority","onClick","trackAdvancedAnalyticsEvent","organization","to","slug","id","Container","AnimatePresence","Success","Waiting","StatusWrapper","motion","space","p","theme","fontSizeMedium","defaultProps","initial","animate","exit","variants","opacity","y","transition","testableTransition","when","staggerChildren","AnimatedText","WaitingIndicator","ReceivedIndicator","indicatorAnimation","pulsingIndicatorStyles","IconCheckmark","green300","size","FirstEventFooter","project","docsLink","docsOnClick","Fragment","eventType","CTAFooter","Actions","gap","external","href","CTASecondary","tct","sample","source","subText","ButtonBar","AddInstallationInstructions","learnMore","addInstallation","manualSetup","PostInstallCodeSnippet","provider","platform","isOnboarding","token_punctuation","name","CodeWrapper","TokenFunction","TokenPunctuation","EVENT_POLL_INTERVAL","latestEventAvailable","api","groupID","retries","eventCreated","Promise","resolve","setTimeout","requestPromise","CreateSampleEventButton","creating","addLoadingMessage","duration","EVENT_POLL_RETRIES","setState","url","method","eventData","Sentry","scope","setExtra","Error","clearIndicators","addErrorMessage","t0","performance","now","t1","Math","ceil","recordAnalytics","setTag","toString","setLevel","browserHistory","this","trackAdhocEvent","eventKey","org_id","project_id","eventName","trackAnalyticsEvent","organization_id","interval","state","createSampleGroup","React","withApi","withOrganization","AddIntegration","urlParams","trackIntegrationEvent","integration","key","integration_type","analyticsParams","setupDialog","width","height","computeCenteredWindow","left","top","query","account","modalParams","installUrl","queryString","opts","dialog","window","open","focus","message","origin","document","location","data","success","addSuccessMessage","onInstall","error","addEventListener","didReceiveMessage","removeEventListener","close","screenLeft","undefined","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","openDialog","AddIntegrationButton","buttonText","onAddIntegration","reinstall","buttonProps","label","metadata","noun","canAdd"],"mappings":"0pEA0BA,IAAMA,EAAsB,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAaC,GAAf,mBAC1B,QAAC,IAAD,OAAiBA,GAAjB,aACG,gBAAEC,EAAF,EAAEA,WAAF,OACCF,EAAS,CACPG,WAAW,QAACC,EAAD,GAAWF,WAAYA,GAAgBD,IAClDI,kBACE,QAAC,KAAD,CACEC,OAAOC,OAAE,oDACTC,aAAc,CAACC,WAAYP,GAC3BO,UAAWP,EACXQ,SAAS,UACTC,QAAS,kBACPC,QACE,kCACA,GACAX,EAAMY,eAGVC,GAAE,yBAAoBb,EAAMY,aAAaE,KAAvC,oBACe,IAAfb,GAAsC,OAAfA,EAAvB,UAAgDA,EAAWc,GAA3D,KAAmE,IAbvE,UAgBGT,OAAE,gCAtBTR,E,kCA8BN,IAAMK,EAAY,SAAC,GAAD,IAAEF,EAAF,EAAEA,WAAF,OAChB,QAACe,EAAD,WACE,QAACC,EAAA,EAAD,UACIhB,GAAyC,QAACiB,EAAD,GAAa,aAAzC,QAACC,EAAD,GAAa,gBAH5BhB,E,wBAQN,IAAMa,GAAY,OAAO,MAAP,oBAAH,uFAMTI,GAAgB,OAAOC,QAAP,oBAAH,gEAGLC,OAAM,GAHD,kCAKJ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,iBALT,8BAWnBL,EAAcM,aAAe,CAC3BC,QAAS,UACTC,QAAS,UACTC,KAAM,OACNC,SAAU,CACRH,QAAS,CAACI,QAAS,EAAGC,GAAI,IAC1BJ,QAAS,CACPG,QAAS,EACTC,EAAG,EACHC,YAAYC,OAAmB,CAACC,KAAM,iBAAkBC,gBAAiB,OAE3EP,KAAM,CAACE,QAAS,EAAGC,EAAG,MAI1B,IAAMb,EAAU,SAACnB,GAAD,OACd,QAACoB,EAAD,OAAmBpB,GAAnB,eACE,QAACqC,EAAD,WAAe/B,OAAE,iDACjB,QAACgC,EAAD,SAHEnB,E,sBAON,IAAMD,EAAU,SAAClB,GAAD,OACd,QAACoB,EAAD,OAAmBpB,GAAnB,eACE,QAACqC,EAAD,WAAe/B,OAAE,0BACjB,QAACiC,EAAD,SAHErB,E,sBAON,IAAMsB,EAA+B,CACnCb,QAAS,CAACI,QAAS,EAAGC,GAAI,IAC1BJ,QAAS,CAACG,QAAS,EAAGC,EAAG,GACzBH,KAAM,CAACE,QAAS,EAAGC,EAAG,KAGlBK,GAAe,OAAOhB,QAAP,oBAAH,IAElBgB,EAAaX,aAAe,CAC1BI,SAAUU,EACVP,YAAYC,UAGd,IAAMI,GAAmB,OAAOjB,QAAP,oBAAH,gBAElBoB,IAFkB,KAKtBH,EAAiBZ,aAAe,CAC9BI,SAAUU,EACVP,YAAYC,UAGd,IAAMK,GAAoB,OAAOG,KAAP,oBAAH,0BAEP,SAAAnB,GAAC,OAAIA,EAAEC,MAAMmB,WAFN,4CAKTrB,OAAM,KALG,KAQvBiB,EAAkBb,aAAe,CAC/BkB,KAAM,MAKR,QChIe,SAASC,EAAT,GAKL,IAJRjC,EAIQ,EAJRA,aACAkC,EAGQ,EAHRA,QACAC,EAEQ,EAFRA,SACAC,EACQ,EADRA,YAEA,OACE,QAAC,EAAAC,SAAD,YACE,QAAC,EAAD,CACErC,aAAcA,EACdkC,QAASA,EACTI,UAAU,QAHZ,SAKG,gBAAEhD,EAAF,EAAEA,UAAWE,EAAb,EAAaA,iBAAb,OACC,QAAC+C,EAAD,YACE,QAACC,EAAD,CAASC,IAAK,EAAd,UACGjD,GACD,QAAC,KAAD,CAAQkD,UAAQ,EAACC,KAAMR,EAAUrC,QAASsC,EAA1C,UACG1C,OAAE,gCAGNJ,SAIP,QAACsD,EAAD,WACGC,QACC,mIACA,CACEC,QACE,QAAC,IAAD,CACEZ,QAASA,EACTa,OAAO,aACPlD,SAAS,gBAjCDoC,E,+BA2CxB,IAAMM,GAAY,OAAO,MAAP,sBAAH,sDAGH7B,OAAM,GAHH,kBAICA,OAAM,GAJP,KAOTkC,GAAe,OAAO,IAAP,sBAAH,UACP,SAAAjC,GAAC,OAAIA,EAAEC,MAAMoC,UADN,eAEH,SAAArC,GAAC,OAAIA,EAAEC,MAAMC,iBAFV,8BAOZ2B,GAAU,OAAOS,KAAP,sBAAH,mE,+VCtEE,SAASC,IACtB,OACE,QAAC,EAAAb,SAAD,YACE,uBACGQ,QACC,6PACA,CACEM,WACE,QAAC,IAAD,CAAcR,KAAK,yCAAnB,UACGjD,OAAE,0CAMb,uBACGmD,QACC,gGACA,CAACO,iBAAiB,4BAAS1D,OAAE,2BAGjC,uBACGmD,QACC,iHACA,CAACQ,aAAa,4BAAS3D,OAAE,yBAxBXwD,E,qeCOT,SAASI,EAAT,GAIL,IAHRC,EAGQ,EAHRA,SACAC,EAEQ,EAFRA,SACAC,EACQ,EADRA,aAGMC,EAAyC,qBAAbF,EAAkC,KAAO,MAC3E,OACE,0BACE,uBACG9D,OACC,6IACA6D,EAASI,SAGb,uBACGjE,OACC,uHAGJ,yBACE,QAACkE,EAAD,WACE,2BACE,QAACC,EAAD,mCACA,QAACC,EAAD,UAAmBJ,IAFrB,WAMHD,IACC,QAAC,EAAApB,SAAD,YACE,uBACG3C,OACC,uGAGJ,uBACGA,OACC,8FArCU4D,E,qCA8CxB,IAAMM,GAAc,OAAO,MAAP,qBAAH,uFAOXC,GAAgB,OAAO,OAAP,qBAAH,uCAIbC,GAAmB,OAAO,OAAP,qBAAH,yC,6jFCzCtB,IACMC,EAAsB,I,SAEbC,E,4EAAf,WACEC,EACAC,GAFF,uEAIMC,EAAU,EAJhB,YAQQA,EAXmB,IAG3B,yCASa,CAACC,cAAc,EAAOD,QAASA,EAAU,IATtD,uBAWU,IAAIE,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASP,MAXrD,gCAaYE,EAAIO,eAAJ,kBAA8BN,EAA9B,oBAbZ,gCAca,CAACE,cAAc,EAAMD,YAdlC,oCAgBQA,EAhBR,kF,0BAqBMM,E,wnBACW,CACbC,UAAU,K,wDAyCQ,+GAEmB,EAAKtF,MAAnC6E,EAFW,EAEXA,IAAKjE,EAFM,EAENA,aAAckC,EAFR,EAEQA,QAFR,wDASlBnC,QACE,sCACA,CAACyD,SAAUtB,EAAQsB,UACnBxD,IAGF2E,SAAkBjF,OAAE,8BAA+B,CACjDkF,SAAUC,OAEZ,EAAKC,SAAS,CAACJ,UAAU,IAlBP,SAqBVK,EArBU,oBAqBS/E,EAAaE,KArBtB,YAqB8BgC,EAAQhC,KArBtC,6BAsBE+D,EAAIO,eAAeO,EAAK,CAACC,OAAQ,SAtBnC,QAsBhBC,EAtBgB,gEAwBhBC,MAAiB,SAAAC,GACfA,EAAMC,SAAS,QAAf,MACAF,KAAwB,IAAIG,MAAM,qCAEpC,EAAKP,SAAS,CAACJ,UAAU,KACzBY,WACAC,SAAgB7F,OAAE,wCA9BF,kCAoCZ8F,EAAKC,YAAYC,MApCL,UAqCoB1B,EAAqBC,EAAKgB,EAAUf,SArCxD,oBAqCXE,EArCW,EAqCXA,aAAcD,EArCH,EAqCGA,QACfwB,EAAKF,YAAYC,OAEvBJ,UACA,EAAKR,SAAS,CAACJ,UAAU,IAEnBE,EAAWgB,KAAKC,KAAKF,EAAKH,GAChC,EAAKM,gBAAgB,CAAC1B,eAAcD,UAASS,aAExCR,EA9Ca,wBA+ChBmB,SAAgB7F,OAAE,gCAElBwF,MAAiB,SAAAC,GACfA,EAAMY,OAAO,UAAWd,EAAUf,SAClCiB,EAAMY,OAAO,WAAY7D,EAAQsB,UAAY,IAC7C2B,EAAMY,OAAO,WAAYhC,EAAoBiC,YAC7Cb,EAAMY,OAAO,UAAW5B,EAAQ6B,YAChCb,EAAMY,OAAO,WAAYnB,EAASoB,YAElCb,EAAMc,SAASf,aACfA,KAAsB,kCAzDR,2BA8DlBgB,sBAAA,yBACoBlG,EAAaE,KADjC,mBACgD+E,EAAUf,QAD1D,MA9DkB,2D,kDAtCpB,WACE,MAAwCiC,KAAK/G,MAAtCY,EAAP,EAAOA,aAAckC,EAArB,EAAqBA,QAASa,EAA9B,EAA8BA,OAEzBb,IAILkE,QAAgB,CACdC,SAAU,6BACVC,OAAQtG,EAAaG,GACrBoG,WAAYrE,EAAQ/B,GACpB4C,a,6BAIJ,YAAmD,IAAlCqB,EAAkC,EAAlCA,aAAcD,EAAoB,EAApBA,QAASS,EAAW,EAAXA,SACtC,EAAwCuB,KAAK/G,MAAtCY,EAAP,EAAOA,aAAckC,EAArB,EAAqBA,QAASa,EAA9B,EAA8BA,OAE9B,GAAKb,EAAL,CAIA,IAAMmE,EAAW,gBAAH,OAAmBjC,EAAe,UAAY,UACtDoC,EAAY,gBAAH,OAAmBpC,EAAe,UAAY,WAE7DqC,QAAoB,CAClBJ,WACAG,YACAE,gBAAiB1G,EAAaG,GAC9BoG,WAAYrE,EAAQ/B,GACpBqD,SAAUtB,EAAQsB,UAAY,GAC9BmD,SAAU5C,EACVI,UACAS,WACA7B,c,oBAuEJ,WACE,MAMIoD,KAAK/G,MADJA,GALL,EACE6E,IADF,EAEEjE,aAFF,EAGEkC,QAHF,EAIEa,QAJF,aAOO2B,EAAYyB,KAAKS,MAAjBlC,SAEP,OACE,QAAC,KAAD,OACMtF,GADN,IAEE,eAAa,sBACbQ,SAAUR,EAAMQ,UAAY8E,EAC5B5E,QAASqG,KAAKU,yB,GA7HgBC,aAAhCrC,E,sCAmIN,KAAesC,QAAQC,OAAiBvC,K,w5DC7JnBwC,E,ynBAUK,O,gCA2BX,SAACC,IACZC,QACE,kCADmB,GAGjBC,YAAa,EAAKhI,MAAMmE,SAAS8D,IACjCC,iBAAkB,eACf,EAAKlI,MAAMmI,iBAEhB,EAAKnI,MAAMY,cAEb,IACA,EAA6B,EAAKZ,MAAMmE,SAASiE,YAA1CzC,EAAP,EAAOA,IAAK0C,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,OACnB,EAAoB,EAAKC,sBAAsBF,EAAOC,GAA/CE,EAAP,EAAOA,KAAMC,EAAb,EAAaA,IAETC,EAAiC,EAAH,GAAOZ,GAErC,EAAK9H,MAAM2I,UACbD,EAAMC,QAAU,EAAK3I,MAAM2I,SAGzB,EAAK3I,MAAM4I,cACbF,EAAQ,EAAH,KAAOA,GAAU,EAAK1I,MAAM4I,cAGnC,IAAMC,EAAa,GAAH,OAAMlD,EAAN,YAAamD,YAAsBJ,IAC7CK,EAAO,wBAAH,OAA2BV,EAA3B,mBAA2CC,EAA3C,gBAAyDG,EAAzD,iBAAqED,GAE/E,EAAKQ,OAASC,OAAOC,KAAKL,EAjBb,uBAiB+BE,GAC5C,EAAKC,QAAU,EAAKA,OAAOG,Y,uCAGT,SAACC,GACnB,GAAIA,EAAQC,SAAWC,SAASC,SAASF,QAIrCD,EAAQzF,SAAW,EAAKqF,OAA5B,CAIA,MAAwBI,EAAQI,KAAzBC,EAAP,EAAOA,QAASD,EAAhB,EAAgBA,KAChB,EAAKR,OAAS,KAETS,EAKAD,KAGLzB,QACE,qCADmB,GAGjBC,YAAa,EAAKhI,MAAMmE,SAAS8D,IACjCC,iBAAkB,eACf,EAAKlI,MAAMmI,iBAEhB,EAAKnI,MAAMY,eAEb8I,SAAkBpJ,OAAE,WAAY,EAAKN,MAAMmE,SAASI,OACpD,EAAKvE,MAAM2J,UAAUH,KAjBnBrD,QAAgBqD,EAAKI,W,kDAhFzB,WACEX,OAAOY,iBAAiB,UAAW9C,KAAK+C,qB,kCAG1C,WACEb,OAAOc,oBAAoB,UAAWhD,KAAK+C,mBAC3C/C,KAAKiC,QAAUjC,KAAKiC,OAAOgB,U,mCAK7B,SAAsB3B,EAAeC,GAEnC,IAAM2B,OACkBC,IAAtBjB,OAAOgB,WAA2BhB,OAAOgB,WAAahB,OAAOkB,QAEzDC,OAAiCF,IAArBjB,OAAOmB,UAA0BnB,OAAOmB,UAAYnB,OAAOoB,QAiB7E,MAAO,CAAC7B,MAfWS,OAAOqB,WACtBrB,OAAOqB,WACPhB,SAASiB,gBAAgBC,YACzBlB,SAASiB,gBAAgBC,YACzBC,OAAOpC,OAQe,EAAIA,EAAQ,EAAI4B,EAG5BxB,KATMQ,OAAOyB,YACvBzB,OAAOyB,YACPpB,SAASiB,gBAAgBI,aACzBrB,SAASiB,gBAAgBI,aACzBF,OAAOnC,QAGe,EAAIA,EAAS,EAAI8B,K,oBAqE7C,WACE,OAAOrD,KAAK/G,MAAMD,SAASgH,KAAK6D,gB,GAtGQlD,aAAvBG,E,wlECRAgD,E,wiBACnB,WACE,MASI9D,KAAK/G,MARPmE,EADF,EACEA,SACA2G,EAFF,EAEEA,WACAC,EAHF,EAGEA,iBACAnK,EAJF,EAIEA,aACAoK,EALF,EAKEA,UACA7C,EANF,EAMEA,gBACAS,EAPF,EAOEA,YACGqC,GARL,YAWMC,EACJJ,IAAcxK,OAAE0K,EAAY,SAAW,SAAU7G,EAASgH,SAASC,MAErE,OACE,QAAC,IAAD,CACE5K,SAAU2D,EAASkH,OACnBhL,MAAK,iFAA4E8D,EAASI,KAArF,cAFP,UAIE,QAAC,IAAD,CACEJ,SAAUA,EACVwF,UAAWoB,EACXnK,aAAcA,EACduH,gBAAiBA,EACjBS,YAAaA,EALf,SAOG,SAAAlI,GAAO,OACN,QAAC,KAAD,KACEF,UAAW2D,EAASkH,QAChBJ,GAFN,IAGEvK,QAAS,kBAAMA,KAHjB,SAKGwK,c,GAlCmCxD,aAA7BmD,E","file":"chunks/app_views_onboarding_components_firstEventFooter_tsx-app_views_onboarding_components_integrat-7d5132.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {AnimatePresence, motion, Variants} from 'framer-motion';\n\nimport Button from 'app/components/button';\nimport {IconCheckmark} from 'app/icons';\nimport {t} from 'app/locale';\nimport pulsingIndicatorStyles from 'app/styles/pulsingIndicator';\nimport space from 'app/styles/space';\nimport {Group} from 'app/types';\nimport {trackAdvancedAnalyticsEvent} from 'app/utils/advancedAnalytics';\nimport EventWaiter from 'app/utils/eventWaiter';\nimport testableTransition from 'app/utils/testableTransition';\n\ntype EventWaiterProps = Omit<React.ComponentProps<typeof EventWaiter>, 'children'>;\ntype FirstIssue = null | true | Group;\n\ntype RenderProps = {\n  indicator: React.ReactNode;\n  firstEventButton: React.ReactNode;\n};\n\ntype Props = EventWaiterProps & {\n  children: (props: RenderProps) => React.ReactNode;\n};\n\nconst FirstEventIndicator = ({children, ...props}: Props) => (\n  <EventWaiter {...props}>\n    {({firstIssue}) =>\n      children({\n        indicator: <Indicator firstIssue={firstIssue} {...props} />,\n        firstEventButton: (\n          <Button\n            title={t(\"You'll need to send your first error to continue\")}\n            tooltipProps={{disabled: !!firstIssue}}\n            disabled={!firstIssue}\n            priority=\"primary\"\n            onClick={() =>\n              trackAdvancedAnalyticsEvent(\n                'growth.onboarding_take_to_error',\n                {},\n                props.organization\n              )\n            }\n            to={`/organizations/${props.organization.slug}/issues/${\n              firstIssue !== true && firstIssue !== null ? `${firstIssue.id}/` : ''\n            }`}\n          >\n            {t('Take me to my error')}\n          </Button>\n        ),\n      })\n    }\n  </EventWaiter>\n);\n\nconst Indicator = ({firstIssue}: EventWaiterProps & {firstIssue: FirstIssue}) => (\n  <Container>\n    <AnimatePresence>\n      {!firstIssue ? <Waiting key=\"waiting\" /> : <Success key=\"received\" />}\n    </AnimatePresence>\n  </Container>\n);\n\nconst Container = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: right;\n`;\n\nconst StatusWrapper = styled(motion.div)`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  grid-gap: ${space(1)};\n  align-items: center;\n  font-size: ${p => p.theme.fontSizeMedium};\n  /* Keep the wrapper in the parent grids first cell for transitions */\n  grid-column: 1;\n  grid-row: 1;\n`;\n\nStatusWrapper.defaultProps = {\n  initial: 'initial',\n  animate: 'animate',\n  exit: 'exit',\n  variants: {\n    initial: {opacity: 0, y: -10},\n    animate: {\n      opacity: 1,\n      y: 0,\n      transition: testableTransition({when: 'beforeChildren', staggerChildren: 0.35}),\n    },\n    exit: {opacity: 0, y: 10},\n  },\n};\n\nconst Waiting = (props: React.ComponentProps<typeof StatusWrapper>) => (\n  <StatusWrapper {...props}>\n    <AnimatedText>{t('Waiting to receive first event to continue')}</AnimatedText>\n    <WaitingIndicator />\n  </StatusWrapper>\n);\n\nconst Success = (props: React.ComponentProps<typeof StatusWrapper>) => (\n  <StatusWrapper {...props}>\n    <AnimatedText>{t('Event was received!')}</AnimatedText>\n    <ReceivedIndicator />\n  </StatusWrapper>\n);\n\nconst indicatorAnimation: Variants = {\n  initial: {opacity: 0, y: -10},\n  animate: {opacity: 1, y: 0},\n  exit: {opacity: 0, y: 10},\n};\n\nconst AnimatedText = styled(motion.div)``;\n\nAnimatedText.defaultProps = {\n  variants: indicatorAnimation,\n  transition: testableTransition(),\n};\n\nconst WaitingIndicator = styled(motion.div)`\n  margin: 0 6px;\n  ${pulsingIndicatorStyles};\n`;\n\nWaitingIndicator.defaultProps = {\n  variants: indicatorAnimation,\n  transition: testableTransition(),\n};\n\nconst ReceivedIndicator = styled(IconCheckmark)`\n  color: #fff;\n  background: ${p => p.theme.green300};\n  border-radius: 50%;\n  padding: 3px;\n  margin: 0 ${space(0.25)};\n`;\n\nReceivedIndicator.defaultProps = {\n  size: 'sm',\n};\n\nexport {Indicator};\n\nexport default FirstEventIndicator;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport CreateSampleEventButton from 'app/views/onboarding/createSampleEventButton';\n\nimport FirstEventIndicator from './firstEventIndicator';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  docsLink?: string;\n  docsOnClick?: () => void;\n};\n\nexport default function FirstEventFooter({\n  organization,\n  project,\n  docsLink,\n  docsOnClick,\n}: Props) {\n  return (\n    <Fragment>\n      <FirstEventIndicator\n        organization={organization}\n        project={project}\n        eventType=\"error\"\n      >\n        {({indicator, firstEventButton}) => (\n          <CTAFooter>\n            <Actions gap={2}>\n              {firstEventButton}\n              <Button external href={docsLink} onClick={docsOnClick}>\n                {t('View full documentation')}\n              </Button>\n            </Actions>\n            {indicator}\n          </CTAFooter>\n        )}\n      </FirstEventIndicator>\n      <CTASecondary>\n        {tct(\n          'Just want to poke around before getting too cozy with the SDK? [sample:View a sample event for this SDK] and finish setup later.',\n          {\n            sample: (\n              <CreateSampleEventButton\n                project={project}\n                source=\"onboarding\"\n                priority=\"link\"\n              />\n            ),\n          }\n        )}\n      </CTASecondary>\n    </Fragment>\n  );\n}\n\nconst CTAFooter = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin: ${space(2)} 0;\n  margin-top: ${space(4)};\n`;\n\nconst CTASecondary = styled('p')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  max-width: 500px;\n`;\n\nconst Actions = styled(ButtonBar)`\n  display: inline-grid;\n  justify-self: start;\n`;\n","import {Fragment} from 'react';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport {t, tct} from 'app/locale';\n\n// TODO: Make dyanmic for other platforms/integrations\nexport default function AddInstallationInstructions() {\n  return (\n    <Fragment>\n      <p>\n        {tct(\n          'The automated AWS Lambda setup will instrument your Lambda functions with Sentry error and performance monitoring without any code changes. We use CloudFormation Stack ([learnMore]) to create the Sentry role which gives us access to your AWS account.',\n          {\n            learnMore: (\n              <ExternalLink href=\"https://aws.amazon.com/cloudformation/\">\n                {t('Learn more about CloudFormation')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </p>\n      <p>\n        {tct(\n          'Just press the [addInstallation] button below and complete the steps in the popup that opens.',\n          {addInstallation: <strong>{t('Add Installation')}</strong>}\n        )}\n      </p>\n      <p>\n        {tct(\n          'If you don’t want to add CloudFormation stack to your AWS environment, press the [manualSetup] button instead.',\n          {manualSetup: <strong>{t('Manual Setup')}</strong>}\n        )}\n      </p>\n    </Fragment>\n  );\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {PlatformKey} from 'app/data/platformCategories';\nimport {t} from 'app/locale';\nimport {IntegrationProvider} from 'app/types';\n\ntype Props = {\n  provider: IntegrationProvider;\n  isOnboarding?: boolean;\n  platform?: PlatformKey;\n};\n\nexport default function PostInstallCodeSnippet({\n  provider,\n  platform,\n  isOnboarding,\n}: Props) {\n  // currently supporting both Python and Node\n  const token_punctuation: string = platform === 'python-awslambda' ? '()' : '();';\n  return (\n    <div>\n      <p>\n        {t(\n          \"Congrats, you just installed the %s integration! Now that it's is installed, the next time you trigger an error it will go to your Sentry.\",\n          provider.name\n        )}\n      </p>\n      <p>\n        {t(\n          'This snippet includes an intentional error, so you can test that everything is working as soon as you set it up:'\n        )}\n      </p>\n      <div>\n        <CodeWrapper>\n          <code>\n            <TokenFunction>myUndefinedFunction</TokenFunction>\n            <TokenPunctuation>{token_punctuation}</TokenPunctuation>)\n          </code>\n        </CodeWrapper>\n      </div>\n      {isOnboarding && (\n        <Fragment>\n          <p>\n            {t(\n              \"If you're new to Sentry, use the email alert to access your account and complete a product tour.\"\n            )}\n          </p>\n          <p>\n            {t(\n              \"If you're an existing user and have disabled alerts, you won't receive this email.\"\n            )}\n          </p>\n        </Fragment>\n      )}\n    </div>\n  );\n}\n\nconst CodeWrapper = styled('pre')`\n  padding: 1em;\n  overflow: auto;\n  background: #251f3d;\n  font-size: 15px;\n`;\n\nconst TokenFunction = styled('span')`\n  color: #7cc5c4;\n`;\n\nconst TokenPunctuation = styled('span')`\n  color: #b3acc1;\n`;\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport {trackAdvancedAnalyticsEvent} from 'app/utils/advancedAnalytics';\nimport {trackAdhocEvent, trackAnalyticsEvent} from 'app/utils/analytics';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = React.ComponentProps<typeof Button> & {\n  api: Client;\n  organization: Organization;\n  project?: Project;\n  source: string;\n};\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 15;\nconst EVENT_POLL_INTERVAL = 1000;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n    await new Promise(resolve => setTimeout(resolve, EVENT_POLL_INTERVAL));\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends React.Component<Props, State> {\n  state: State = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdhocEvent({\n      eventKey: 'sample_event.button_viewed',\n      org_id: organization.id,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}`;\n    const eventName = `Sample Event ${eventCreated ? 'Created' : 'Failed'}`;\n\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent(\n      'growth.onboarding_view_sample_event',\n      {platform: project.platform},\n      organization\n    );\n\n    addLoadingMessage(t('Processing sample event...'), {\n      duration: EVENT_POLL_RETRIES * EVENT_POLL_INTERVAL,\n    });\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      clearIndicators();\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel(Sentry.Severity.Warning);\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    browserHistory.push(\n      `/organizations/${organization.slug}/issues/${eventData.groupID}/`\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        data-test-id=\"create-sample-event\"\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n","import * as React from 'react';\nimport * as queryString from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  provider: IntegrationProvider;\n  onInstall: (data: IntegrationWithConfig) => void;\n  account?: string;\n  organization: Organization; // for analytics\n  analyticsParams?: {\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n    already_installed: boolean;\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends React.Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    trackIntegrationEvent(\n      'integrations.installation_start',\n      {\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = this.props.provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (this.props.account) {\n      query.account = this.props.account;\n    }\n\n    if (this.props.modalParams) {\n      query = {...query, ...this.props.modalParams};\n    }\n\n    const installUrl = `${url}?${queryString.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationEvent(\n      'integrations.installation_complete',\n      {\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    addSuccessMessage(t('%s added', this.props.provider.name));\n    this.props.onInstall(data);\n  };\n\n  render() {\n    return this.props.children(this.openDialog);\n  }\n}\n","import * as React from 'react';\n\nimport Button from 'app/components/button';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport {IntegrationWithConfig} from 'app/types';\n\nimport AddIntegration from './addIntegration';\n\ntype Props = {\n  onAddIntegration: (data: IntegrationWithConfig) => void;\n  buttonText?: string;\n  reinstall?: boolean;\n} & React.ComponentProps<typeof Button> &\n  Pick<\n    React.ComponentProps<typeof AddIntegration>,\n    'provider' | 'organization' | 'analyticsParams' | 'modalParams'\n  >;\n\nexport default class AddIntegrationButton extends React.Component<Props> {\n  render() {\n    const {\n      provider,\n      buttonText,\n      onAddIntegration,\n      organization,\n      reinstall,\n      analyticsParams,\n      modalParams,\n      ...buttonProps\n    } = this.props;\n\n    const label =\n      buttonText || t(reinstall ? 'Enable' : 'Add %s', provider.metadata.noun);\n\n    return (\n      <Tooltip\n        disabled={provider.canAdd}\n        title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}\n      >\n        <AddIntegration\n          provider={provider}\n          onInstall={onAddIntegration}\n          organization={organization}\n          analyticsParams={analyticsParams}\n          modalParams={modalParams}\n        >\n          {onClick => (\n            <Button\n              disabled={!provider.canAdd}\n              {...buttonProps}\n              onClick={() => onClick()}\n            >\n              {label}\n            </Button>\n          )}\n        </AddIntegration>\n      </Tooltip>\n    );\n  }\n}\n"],"sourceRoot":""}