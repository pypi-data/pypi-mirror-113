{"version":3,"sources":["webpack:///./app/views/settings/components/settingsProjectItem.tsx","webpack:///./app/views/settings/organizationTeams/teamProjects.tsx"],"names":["ProjectItem","isBookmarked","props","project","setState","this","organization","Wrapper","BookmarkLink","state","onToggle","handleToggleBookmark","to","slug","avatarSize","Component","BookmarkStar","space","TeamProjects","error","loading","pageLinks","unlinkedProjects","linkedProjects","fetchTeamProjects","fetchUnlinkedProjects","action","params","orgId","teamId","api","request","method","success","resp","fetchAll","ProjectActions","addSuccessMessage","t","addErrorMessage","selection","find","p","id","value","handleLinkProject","evt","target","prevProps","location","requestPromise","query","cursor","includeAllArgs","then","jqXHR","getResponseHeader","catch","projects","canWrite","Set","access","has","length","sortProjects","map","StyledPanelItem","disabled","title","size","icon","isCircled","onClick","onRetry","otherProjects","searchKey","label","ProjectListElement","hasButtons","style","textTransform","items","onChange","handleQueryUpdate","onSelect","handleProjectSelected","emptyMessage","alignMenu","isOpen","projectPanelContents","React","PanelItem","withApi","withOrganization"],"mappings":"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","file":"chunks/app_views_settings_organizationTeams_teamProjects_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport BookmarkStar from 'app/components/projects/bookmarkStar';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\n\ntype Props = {\n  project: Project;\n  organization: Organization;\n};\n\ntype State = {\n  isBookmarked: boolean;\n};\n\nclass ProjectItem extends Component<Props, State> {\n  state: State = {\n    isBookmarked: this.props.project.isBookmarked,\n  };\n\n  handleToggleBookmark = (isBookmarked: State['isBookmarked']) => {\n    this.setState({isBookmarked});\n  };\n\n  render() {\n    const {project, organization} = this.props;\n\n    return (\n      <Wrapper>\n        <BookmarkLink\n          organization={organization}\n          project={project}\n          isBookmarked={this.state.isBookmarked}\n          onToggle={this.handleToggleBookmark}\n        />\n        <ProjectBadge\n          to={`/settings/${organization.slug}/projects/${project.slug}/`}\n          avatarSize={18}\n          project={project}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst BookmarkLink = styled(BookmarkStar)`\n  margin-right: ${space(1)};\n  margin-top: -${space(0.25)};\n`;\n\nexport default ProjectItem;\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport ProjectActions from 'app/actions/projectActions';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tooltip from 'app/components/tooltip';\nimport {IconFlag, IconSubtract} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {sortProjects} from 'app/utils';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport ProjectListItem from 'app/views/settings/components/settingsProjectItem';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  pageLinks: null | string;\n  unlinkedProjects: Project[];\n  linkedProjects: Project[];\n};\n\ntype DropdownAutoCompleteProps = React.ComponentProps<typeof DropdownAutoComplete>;\ntype Item = Parameters<NonNullable<DropdownAutoCompleteProps['onSelect']>>[0];\n\nclass TeamProjects extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    pageLinks: null,\n    unlinkedProjects: [],\n    linkedProjects: [],\n  };\n\n  componentDidMount() {\n    this.fetchAll();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.params.orgId !== this.props.params.orgId ||\n      prevProps.params.teamId !== this.props.params.teamId\n    ) {\n      this.fetchAll();\n    }\n\n    if (prevProps.location !== this.props.location) {\n      this.fetchTeamProjects();\n    }\n  }\n\n  fetchAll = () => {\n    this.fetchTeamProjects();\n    this.fetchUnlinkedProjects();\n  };\n\n  fetchTeamProjects() {\n    const {\n      location,\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.setState({loading: true});\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: `team:${teamId}`,\n          cursor: location.query.cursor || '',\n        },\n        includeAllArgs: true,\n      })\n      .then(([linkedProjects, _, jqXHR]) => {\n        this.setState({\n          loading: false,\n          error: false,\n          linkedProjects,\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? null,\n        });\n      })\n      .catch(() => {\n        this.setState({loading: false, error: true});\n      });\n  }\n\n  fetchUnlinkedProjects(query = '') {\n    const {\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: query ? `!team:${teamId} ${query}` : `!team:${teamId}`,\n        },\n      })\n      .then(unlinkedProjects => {\n        this.setState({unlinkedProjects});\n      });\n  }\n\n  handleLinkProject = (project: Project, action: string) => {\n    const {orgId, teamId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${project.slug}/teams/${teamId}/`, {\n      method: action === 'add' ? 'POST' : 'DELETE',\n      success: resp => {\n        this.fetchAll();\n        ProjectActions.updateSuccess(resp);\n        addSuccessMessage(\n          action === 'add'\n            ? t('Successfully added project to team.')\n            : t('Successfully removed project from team')\n        );\n      },\n      error: () => {\n        addErrorMessage(t(\"Wasn't able to change project association.\"));\n      },\n    });\n  };\n\n  handleProjectSelected = (selection: Item) => {\n    const project = this.state.unlinkedProjects.find(p => p.id === selection.value);\n    if (project) {\n      this.handleLinkProject(project, 'add');\n    }\n  };\n\n  handleQueryUpdate = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.fetchUnlinkedProjects(evt.target.value);\n  };\n\n  projectPanelContents(projects: Project[]) {\n    const {organization} = this.props;\n    const access = new Set(organization.access);\n    const canWrite = access.has('org:write');\n\n    return projects.length ? (\n      sortProjects(projects).map(project => (\n        <StyledPanelItem key={project.id}>\n          <ProjectListItem project={project} organization={organization} />\n          <Tooltip\n            disabled={canWrite}\n            title={t('You do not have enough permission to change project association.')}\n          >\n            <Button\n              size=\"small\"\n              disabled={!canWrite}\n              icon={<IconSubtract isCircled size=\"xs\" />}\n              onClick={() => {\n                this.handleLinkProject(project, 'remove');\n              }}\n            >\n              {t('Remove')}\n            </Button>\n          </Tooltip>\n        </StyledPanelItem>\n      ))\n    ) : (\n      <EmptyMessage size=\"large\" icon={<IconFlag size=\"xl\" />}>\n        {t(\"This team doesn't have access to any projects.\")}\n      </EmptyMessage>\n    );\n  }\n\n  render() {\n    const {linkedProjects, unlinkedProjects, error, loading} = this.state;\n\n    if (error) {\n      return <LoadingError onRetry={() => this.fetchAll()} />;\n    }\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    const access = new Set(this.props.organization.access);\n\n    const otherProjects = unlinkedProjects.map(p => ({\n      value: p.id,\n      searchKey: p.slug,\n      label: <ProjectListElement>{p.slug}</ProjectListElement>,\n    }));\n\n    return (\n      <React.Fragment>\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Projects')}</div>\n            <div style={{textTransform: 'none'}}>\n              {!access.has('org:write') ? (\n                <DropdownButton\n                  disabled\n                  title={t('You do not have enough permission to associate a project.')}\n                  size=\"xsmall\"\n                >\n                  {t('Add Project')}\n                </DropdownButton>\n              ) : (\n                <DropdownAutoComplete\n                  items={otherProjects}\n                  onChange={this.handleQueryUpdate}\n                  onSelect={this.handleProjectSelected}\n                  emptyMessage={t('No projects')}\n                  alignMenu=\"right\"\n                >\n                  {({isOpen}) => (\n                    <DropdownButton isOpen={isOpen} size=\"xsmall\">\n                      {t('Add Project')}\n                    </DropdownButton>\n                  )}\n                </DropdownAutoComplete>\n              )}\n            </div>\n          </PanelHeader>\n          <PanelBody>{this.projectPanelContents(linkedProjects)}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${space(2)};\n`;\n\nconst ProjectListElement = styled('div')`\n  padding: ${space(0.25)} 0;\n`;\n\nexport {TeamProjects};\n\nexport default withApi(withOrganization(TeamProjects));\n"],"sourceRoot":""}