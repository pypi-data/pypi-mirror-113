from .channel_group import ChannelGroup as ChannelGroup
from .registry import Registry as Registry
from .telemetry_environment import TelemetryEnvironment as TelemetryEnvironment
from typing import Any, Dict, Iterator
from vtelem.enums.primitive import Primitive as Primitive

class ChannelGroupRegistry(Registry[ChannelGroup]):
    env: Any
    def __init__(self, env: TelemetryEnvironment) -> None: ...
    def create_group(self, name: str) -> int: ...
    def add_channel(self, group: int, name: str, instance: Primitive, rate: float, track_change: bool = ...) -> None: ...
    def add_enum_channel(self, group: int, name: str, enum_name: str, rate: float, track_change: bool = ...) -> None: ...
    def group(self, group: int) -> Iterator[Dict[str, Any]]: ...
