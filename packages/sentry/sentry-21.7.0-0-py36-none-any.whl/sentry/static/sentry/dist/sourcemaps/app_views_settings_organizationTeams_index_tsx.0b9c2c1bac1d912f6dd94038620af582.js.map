{"version":3,"sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/organizationTeams/allTeamsRow.tsx","webpack:///./app/views/settings/organizationTeams/allTeamsList.tsx","webpack:///./app/views/settings/organizationTeams/organizationTeams.tsx","webpack:///./app/views/settings/organizationTeams/index.tsx"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","teamId","request","orgId","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","recreateRoute","to","lastRootIndex","routeIndex","routes","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","AllTeamsRow","loading","props","successMessage","errorMessage","_err","setState","Promise","resolve","reject","Error","this","urlPrefix","openMembership","display","avatarSize","description","tn","memberCount","canViewTeam","hasAccess","TeamPanelItem","TeamNameWrapper","TeamLink","Spacer","state","size","disabled","isMember","onClick","handleLeaveTeam","t","isPending","handleJoinTeam","handleRequestAccess","React","Link","space","withApi","PanelItem","AllTeamsList","teamList","access","teamNodes","length","canCreateTeam","has","root","noMargin","teamCreate","link","StyledButton","priority","openCreateTeamModal","Fragment","Button","p","theme","fontSizeLarge","OrganizationTeams","allTeams","activeTeams","features","canCreateTeams","action","undefined","icon","isCircled","teamRoute","find","activeTeamIds","Set","otherTeams","filter","OrganizationTeamsContainer","fetchStats","loadStats","query","since","Date","getTime","toString","stat","group","teams","sortArray","Component","withOrganization","withTeams"],"mappings":"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","file":"chunks/app_views_settings_organizationTeams_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import * as React from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {joinTeam, leaveTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport IdBadge from 'app/components/idBadge';\nimport {PanelItem} from 'app/components/panels';\nimport {t, tct, tn} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Team} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  urlPrefix: string;\n  organization: Organization;\n  team: Team;\n  openMembership: boolean;\n};\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n};\n\nclass AllTeamsRow extends React.Component<Props, State> {\n  state: State = {\n    loading: false,\n    error: false,\n  };\n\n  handleRequestAccess = async () => {\n    const {team} = this.props;\n\n    try {\n      this.joinTeam({\n        successMessage: tct('You have requested access to [team]', {\n          team: `#${team.slug}`,\n        }),\n\n        errorMessage: tct('Unable to request access to [team]', {\n          team: `#${team.slug}`,\n        }),\n      });\n\n      // TODO: Ideally we would update team so that `isPending` is true\n    } catch (_err) {\n      // No need to do anything\n    }\n  };\n\n  handleJoinTeam = () => {\n    const {team} = this.props;\n\n    this.joinTeam({\n      successMessage: tct('You have joined [team]', {\n        team: `#${team.slug}`,\n      }),\n      errorMessage: tct('Unable to join [team]', {\n        team: `#${team.slug}`,\n      }),\n    });\n  };\n\n  joinTeam = ({\n    successMessage,\n    errorMessage,\n  }: {\n    successMessage: React.ReactNode;\n    errorMessage: React.ReactNode;\n  }) => {\n    const {api, organization, team} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    return new Promise<void>((resolve, reject) =>\n      joinTeam(\n        api,\n        {\n          orgId: organization.slug,\n          teamId: team.slug,\n        },\n        {\n          success: () => {\n            this.setState({\n              loading: false,\n              error: false,\n            });\n            addSuccessMessage(successMessage);\n            resolve();\n          },\n          error: () => {\n            this.setState({\n              loading: false,\n              error: true,\n            });\n            addErrorMessage(errorMessage);\n            reject(new Error('Unable to join team'));\n          },\n        }\n      )\n    );\n  };\n\n  handleLeaveTeam = () => {\n    const {api, organization, team} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    leaveTeam(\n      api,\n      {\n        orgId: organization.slug,\n        teamId: team.slug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n          addSuccessMessage(\n            tct('You have left [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(\n            tct('Unable to leave [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n        },\n      }\n    );\n  };\n\n  render() {\n    const {team, urlPrefix, openMembership} = this.props;\n    const display = (\n      <IdBadge\n        team={team}\n        avatarSize={36}\n        description={tn('%s Member', '%s Members', team.memberCount)}\n      />\n    );\n\n    // You can only view team details if you have access to team -- this should account\n    // for your role + org open membership\n    const canViewTeam = team.hasAccess;\n\n    return (\n      <TeamPanelItem>\n        <TeamNameWrapper>\n          {canViewTeam ? (\n            <TeamLink to={`${urlPrefix}teams/${team.slug}/`}>{display}</TeamLink>\n          ) : (\n            display\n          )}\n        </TeamNameWrapper>\n        <Spacer>\n          {this.state.loading ? (\n            <Button size=\"small\" disabled>\n              ...\n            </Button>\n          ) : team.isMember ? (\n            <Button size=\"small\" onClick={this.handleLeaveTeam}>\n              {t('Leave Team')}\n            </Button>\n          ) : team.isPending ? (\n            <Button size=\"small\" disabled>\n              {t('Request Pending')}\n            </Button>\n          ) : openMembership ? (\n            <Button size=\"small\" onClick={this.handleJoinTeam}>\n              {t('Join Team')}\n            </Button>\n          ) : (\n            <Button size=\"small\" onClick={this.handleRequestAccess}>\n              {t('Request Access')}\n            </Button>\n          )}\n        </Spacer>\n      </TeamPanelItem>\n    );\n  }\n}\n\nconst TeamLink = styled(Link)`\n  display: inline-block;\n\n  &.focus-visible {\n    margin: -${space(1)};\n    padding: ${space(1)};\n    background: #f2eff5;\n    border-radius: 3px;\n    outline: none;\n  }\n`;\n\nexport {AllTeamsRow};\nexport default withApi(AllTeamsRow);\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: 0;\n  align-items: center;\n`;\n\nconst Spacer = styled('div')`\n  padding: ${space(2)};\n`;\n\nconst TeamNameWrapper = styled(Spacer)`\n  flex: 1;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {openCreateTeamModal} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport {tct} from 'app/locale';\nimport {Organization, Team} from 'app/types';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport AllTeamsRow from './allTeamsRow';\n\ntype Props = {\n  urlPrefix: string;\n  access: Record<string, any>;\n  organization: Organization;\n  teamList: Array<Team>;\n  openMembership: boolean;\n};\n\nfunction AllTeamsList({\n  organization,\n  urlPrefix,\n  openMembership,\n  teamList,\n  access,\n}: Props) {\n  const teamNodes = teamList.map(team => (\n    <AllTeamsRow\n      urlPrefix={urlPrefix}\n      team={team}\n      organization={organization}\n      openMembership={openMembership}\n      key={team.slug}\n    />\n  ));\n\n  if (!teamNodes.length) {\n    const canCreateTeam = access.has('project:admin');\n\n    return (\n      <EmptyMessage>\n        {tct('No teams here. [teamCreate]', {\n          root: <TextBlock noMargin />,\n          teamCreate: canCreateTeam\n            ? tct('You can always [link:create one].', {\n                link: (\n                  <StyledButton\n                    priority=\"link\"\n                    onClick={() =>\n                      openCreateTeamModal({\n                        organization,\n                      })\n                    }\n                  />\n                ),\n              })\n            : null,\n        })}\n      </EmptyMessage>\n    );\n  }\n\n  return <Fragment>{teamNodes}</Fragment>;\n}\n\nexport default AllTeamsList;\n\nconst StyledButton = styled(Button)`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n","import {RouteComponentProps} from 'react-router';\n\nimport {openCreateTeamModal} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {IconAdd} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, Team} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport AllTeamsList from './allTeamsList';\n\ntype Props = {\n  access: Set<string>;\n  features: Set<string>;\n  allTeams: Team[];\n  activeTeams: Team[];\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\nfunction OrganizationTeams({\n  allTeams,\n  activeTeams,\n  organization,\n  access,\n  features,\n  routes,\n  params,\n}: Props) {\n  if (!organization) {\n    return null;\n  }\n  const canCreateTeams = access.has('project:admin');\n\n  const action = (\n    <Button\n      priority=\"primary\"\n      size=\"small\"\n      disabled={!canCreateTeams}\n      title={\n        !canCreateTeams ? t('You do not have permission to create teams') : undefined\n      }\n      onClick={() =>\n        openCreateTeamModal({\n          organization,\n        })\n      }\n      icon={<IconAdd size=\"xs\" isCircled />}\n    >\n      {t('Create Team')}\n    </Button>\n  );\n\n  const teamRoute = routes.find(({path}) => path === 'teams/');\n  const urlPrefix = teamRoute\n    ? recreateRoute(teamRoute, {routes, params, stepBack: -2})\n    : '';\n\n  const activeTeamIds = new Set(activeTeams.map(team => team.id));\n  const otherTeams = allTeams.filter(team => !activeTeamIds.has(team.id));\n  const title = t('Teams');\n\n  return (\n    <div data-test-id=\"team-list\">\n      <SentryDocumentTitle title={title} orgSlug={organization.slug} />\n      <SettingsPageHeader title={title} action={action} />\n      <Panel>\n        <PanelHeader>{t('Your Teams')}</PanelHeader>\n        <PanelBody>\n          <AllTeamsList\n            urlPrefix={urlPrefix}\n            organization={organization}\n            teamList={activeTeams}\n            access={access}\n            openMembership={false}\n          />\n        </PanelBody>\n      </Panel>\n      <Panel>\n        <PanelHeader>{t('Other Teams')}</PanelHeader>\n        <PanelBody>\n          <AllTeamsList\n            urlPrefix={urlPrefix}\n            organization={organization}\n            teamList={otherTeams}\n            access={access}\n            openMembership={\n              !!(features.has('open-membership') || access.has('org:write'))\n            }\n          />\n        </PanelBody>\n      </Panel>\n    </div>\n  );\n}\n\nexport default OrganizationTeams;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {loadStats} from 'app/actionCreators/projects';\nimport {Client} from 'app/api';\nimport {Organization, Team} from 'app/types';\nimport {sortArray} from 'app/utils';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\n\nimport OrganizationTeams from './organizationTeams';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  teams: Team[];\n} & RouteComponentProps<{orgId: string}, {}>;\n\nclass OrganizationTeamsContainer extends Component<Props> {\n  componentDidMount() {\n    this.fetchStats();\n  }\n\n  fetchStats() {\n    loadStats(this.props.api, {\n      orgId: this.props.params.orgId,\n      query: {\n        since: (new Date().getTime() / 1000 - 3600 * 24).toString(),\n        stat: 'generated',\n        group: 'project',\n      },\n    });\n  }\n\n  render() {\n    const {organization, teams} = this.props;\n\n    if (!organization) {\n      return null;\n    }\n    const allTeams = sortArray(teams, team => team.name);\n    const activeTeams = allTeams.filter(team => team.isMember);\n\n    return (\n      <OrganizationTeams\n        {...this.props}\n        access={new Set(organization.access)}\n        features={new Set(organization.features)}\n        organization={organization}\n        allTeams={allTeams}\n        activeTeams={activeTeams}\n      />\n    );\n  }\n}\n\nexport {OrganizationTeamsContainer};\n\nexport default withApi(withOrganization(withTeams(OrganizationTeamsContainer)));\n"],"sourceRoot":""}