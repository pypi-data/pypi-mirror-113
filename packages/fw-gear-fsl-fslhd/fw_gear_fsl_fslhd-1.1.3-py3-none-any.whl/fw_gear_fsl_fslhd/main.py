"""Main module."""
import datetime
import json
import logging
import os
from pathlib import Path

from fw_gear_fsl_fslhd.interfaces import FSLHD, _get_descrip_fields, get_nifti_header

v0_output = Path(".")

log = logging.getLogger(__name__)


def run(
    nifti_file_path,
    nifti_file_name,
    output_json,
    parse_descrip,
    exsting_info,
    outbase=None,
):

    """Run flshd and write nifti metadata

    Args:
        nifti file path
        nifti file name
        output_json
        parse_descrip
        exsting_info
        outbase=None (default)

    Returns:
        (.metadata.json): file including metadata extracted by fslhd form nifti file
        nifti_header, nifti_file_descrip, nifti_existing_info
    """

    """
       Extracts metadata from nifti file header and writes to .metadata.json.
       """
    log.info("This is the beginning of the run file")
    log.info("  start: %s" % datetime.datetime.utcnow())

    # FSLHD.help()
    in_file = nifti_file_path

    # interface
    hd_obj = FSLHD()

    # get xml file generated by fslhd
    hd_obj.inputs.in_file = in_file
    hd_obj.inputs.x_param = True
    hd_obj.inputs.out_file = "/tmp/flhd_interface_xml.xml"

    log.info(hd_obj.cmdline)  # shows command line ran

    hdr_out = hd_obj.run()
    fslhd_xml = hdr_out.outputs.out_file

    # get txt file generated by fslhd
    hd_obj.inputs.x_param = False
    hd_obj.inputs.out_file = "/tmp/fslhd_interface_xml.txt"

    log.info(hd_obj.cmdline)  # shows command line ran

    hdr_out = hd_obj.run()
    fslhd_txt = hdr_out.outputs.out_file

    nifti_header = get_nifti_header(fslhd_xml, fslhd_txt)

    nifti_file_descrip = {}
    if parse_descrip:
        nifti_file_descrip = _get_descrip_fields(nifti_header)

    nifti_existing_info = {}
    if exsting_info:
        nifti_existing_info = exsting_info

    # Write out the fslhd data as a jsonfile
    if output_json:
        outname = (
            os.path.join(outbase, os.path.basename(nifti_file_name).split(".nii")[0])
            + "_fslhd.json"
        )
        with open(outname, "w") as f:
            json.dump(nifti_header, f)

    return nifti_header, nifti_file_descrip, nifti_existing_info
