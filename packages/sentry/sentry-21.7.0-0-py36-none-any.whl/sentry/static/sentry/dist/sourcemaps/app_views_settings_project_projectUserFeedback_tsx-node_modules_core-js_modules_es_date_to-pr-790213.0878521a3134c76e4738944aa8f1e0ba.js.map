{"version":3,"sources":["webpack:///./app/data/forms/userFeedback.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/project/projectUserFeedback.tsx","webpack:///../node_modules/core-js/internals/date-to-primitive.js","webpack:///../node_modules/core-js/modules/es.date.to-primitive.js","webpack:///../node_modules/core-js/modules/es.symbol.to-primitive.js"],"names":["route","title","fields","name","type","label","placeholder","help","getData","data","options","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","this","getTitle","renderComponent","AsyncComponent","FormPanel","props","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","highlighted","React","JsonForm","location","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","state","formGroup","i","renderForm","withRouter","ProjectUserFeedbackSettings","eventId","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","params","orgId","projectId","routeTitleGen","t","ButtonList","external","href","priority","onClick","handleClick","saveOnBlur","apiMethod","apiEndpoint","initialData","project","hasAccess","formGroups","space","anObject","toPrimitive","module","exports","hint","TypeError","createNonEnumerableProperty","dateToPrimitive","TO_PRIMITIVE","wellKnownSymbol","DatePrototype","Date","prototype","defineWellKnownSymbol"],"mappings":"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","file":"chunks/app_views_settings_project_projectUserFeedback_tsx-node_modules_core-js_modules_es_date_to-pr-790213.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/user-feedback/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Settings',\n    fields: [\n      {\n        name: 'feedback:branding',\n        type: 'boolean',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Show Sentry Branding',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Show \"powered by Sentry within the feedback dialog. We appreciate you helping get the word out about Sentry! <3',\n        getData: data => ({options: data}),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport Access from 'app/components/acl/access';\nimport Button from 'app/components/button';\nimport formGroups from 'app/data/forms/userFeedback';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\ntype Props = RouteComponentProps<RouteParams, {}>;\n\nclass ProjectUserFeedbackSettings extends AsyncView<Props> {\n  componentDidMount() {\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [\n      ['keyList', `/projects/${orgId}/${projectId}/keys/`],\n      ['project', `/projects/${orgId}/${projectId}/`],\n    ];\n  }\n\n  getTitle(): string {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('User Feedback'), projectId, false);\n  }\n\n  handleClick = () => {\n    Sentry.showReportDialog({\n      // should never make it to the Sentry API, but just in case, use throwaway id\n      eventId: '00000000000000000000000000000000',\n    });\n  };\n\n  renderBody() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('User Feedback')} />\n        <TextBlock>\n          {t(\n            `Don't rely on stack traces and graphs alone to understand\n            the cause and impact of errors. Enable User Feedback to collect\n            your users' comments when they encounter a crash or bug.`\n          )}\n        </TextBlock>\n        <TextBlock>\n          {t(\n            `When configured, your users will be presented with a dialog prompting\n            them for additional information. That information will get attached to\n            the issue in Sentry.`\n          )}\n        </TextBlock>\n        <ButtonList>\n          <Button external href=\"https://docs.sentry.io/product/user-feedback/\">\n            {t('Read the docs')}\n          </Button>\n          <Button priority=\"primary\" onClick={this.handleClick}>\n            {t('Open the report dialog')}\n          </Button>\n        </ButtonList>\n\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint={`/projects/${orgId}/${projectId}/`}\n          initialData={this.state.project.options}\n        >\n          <Access access={['project:write']}>\n            {({hasAccess}) => <JsonForm disabled={!hasAccess} forms={formGroups} />}\n          </Access>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst ButtonList = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n\nexport default ProjectUserFeedbackSettings;\n","'use strict';\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\n// `Date.prototype[@@toPrimitive](hint)` method implementation\n// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {\n    throw TypeError('Incorrect hint');\n  } return toPrimitive(anObject(this), hint !== 'number');\n};\n","var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar dateToPrimitive = require('../internals/date-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar DatePrototype = Date.prototype;\n\n// `Date.prototype[@@toPrimitive]` method\n// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive\nif (!(TO_PRIMITIVE in DatePrototype)) {\n  createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);\n}\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toPrimitive` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.toprimitive\ndefineWellKnownSymbol('toPrimitive');\n"],"sourceRoot":""}