{"version":3,"sources":["webpack:///./app/components/tagDistributionMeter.tsx"],"names":["TagDistributionMeter","this","props","segments","totalValues","title","isLoading","hasError","showReleasePackage","Array","isArray","length","Title","TitleType","largestSegment","pct","percent","count","pctLabel","Math","floor","TitleDescription","Label","version","name","anchor","tooltipRawVersion","withPackage","truncate","t","renderLabel","Percent","onTagClick","renderLoading","renderError","renderEmpty","SegmentBar","map","value","index","tooltipHtml","className","renderTooltipValue","segmentProps","to","url","onClick","style","width","containerDisplayMode","isOther","OtherSegment","Segment","totalVisible","reduce","sum","push","TagSummary","renderTitle","renderSegments","React","COLORS","space","p","theme","fontSizeSmall","textColor","overflowEllipsis","gray300","Link","shouldForwardProp","isPropValid"],"mappings":"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","file":"chunks/app_components_tagDistributionMeter_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport {Link} from 'react-router';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport {TagSegment} from 'app/actionCreators/events';\nimport Tooltip from 'app/components/tooltip';\nimport Version from 'app/components/version';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {percent} from 'app/utils';\n\ntype DefaultProps = {\n  isLoading: boolean;\n  showReleasePackage: boolean;\n  hasError: boolean;\n  renderLoading: () => React.ReactNode;\n  renderEmpty: () => React.ReactNode;\n  renderError: () => React.ReactNode;\n};\n\ntype Props = DefaultProps & {\n  title: string;\n  segments: TagSegment[];\n  totalValues: number;\n  onTagClick?: (title: string, value: TagSegment) => void;\n};\n\ntype SegmentValue = {\n  to: LocationDescriptor;\n  onClick: () => void;\n  index: number;\n};\n\nexport default class TagDistributionMeter extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    isLoading: false,\n    hasError: false,\n    renderLoading: () => null,\n    renderEmpty: () => <p>{t('No recent data.')}</p>,\n    renderError: () => null,\n    showReleasePackage: false,\n  };\n\n  renderTitle() {\n    const {segments, totalValues, title, isLoading, hasError, showReleasePackage} =\n      this.props;\n\n    if (!Array.isArray(segments) || segments.length <= 0) {\n      return (\n        <Title>\n          <TitleType>{title}</TitleType>\n        </Title>\n      );\n    }\n\n    const largestSegment = segments[0];\n    const pct = percent(largestSegment.count, totalValues);\n    const pctLabel = Math.floor(pct);\n    const renderLabel = () => {\n      switch (title) {\n        case 'release':\n          return (\n            <Label>\n              <Version\n                version={largestSegment.name}\n                anchor={false}\n                tooltipRawVersion\n                withPackage={showReleasePackage}\n                truncate\n              />\n            </Label>\n          );\n        default:\n          return <Label>{largestSegment.name || t('n/a')}</Label>;\n      }\n    };\n\n    return (\n      <Title>\n        <TitleType>{title}</TitleType>\n        <TitleDescription>\n          {renderLabel()}\n          {isLoading || hasError ? null : <Percent>{pctLabel}%</Percent>}\n        </TitleDescription>\n      </Title>\n    );\n  }\n\n  renderSegments() {\n    const {\n      segments,\n      onTagClick,\n      title,\n      isLoading,\n      hasError,\n      totalValues,\n      renderLoading,\n      renderError,\n      renderEmpty,\n      showReleasePackage,\n    } = this.props;\n\n    if (isLoading) {\n      return renderLoading();\n    }\n\n    if (hasError) {\n      return <SegmentBar>{renderError()}</SegmentBar>;\n    }\n\n    if (totalValues === 0) {\n      return <SegmentBar>{renderEmpty()}</SegmentBar>;\n    }\n\n    return (\n      <SegmentBar>\n        {segments.map((value, index) => {\n          const pct = percent(value.count, totalValues);\n          const pctLabel = Math.floor(pct);\n          const renderTooltipValue = () => {\n            switch (title) {\n              case 'release':\n                return (\n                  <Version\n                    version={value.name}\n                    anchor={false}\n                    withPackage={showReleasePackage}\n                  />\n                );\n              default:\n                return value.name || t('n/a');\n            }\n          };\n\n          const tooltipHtml = (\n            <React.Fragment>\n              <div className=\"truncate\">{renderTooltipValue()}</div>\n              {pctLabel}%\n            </React.Fragment>\n          );\n\n          const segmentProps: SegmentValue = {\n            index,\n            to: value.url,\n            onClick: () => {\n              if (onTagClick) {\n                onTagClick(title, value);\n              }\n            },\n          };\n\n          return (\n            <div key={value.value} style={{width: pct + '%'}}>\n              <Tooltip title={tooltipHtml} containerDisplayMode=\"block\">\n                {value.isOther ? <OtherSegment /> : <Segment {...segmentProps} />}\n              </Tooltip>\n            </div>\n          );\n        })}\n      </SegmentBar>\n    );\n  }\n\n  render() {\n    const {segments, totalValues} = this.props;\n\n    const totalVisible = segments.reduce((sum, value) => sum + value.count, 0);\n    const hasOther = totalVisible < totalValues;\n\n    if (hasOther) {\n      segments.push({\n        isOther: true,\n        name: t('Other'),\n        value: 'other',\n        count: totalValues - totalVisible,\n        url: '',\n      });\n    }\n\n    return (\n      <TagSummary>\n        {this.renderTitle()}\n        {this.renderSegments()}\n      </TagSummary>\n    );\n  }\n}\n\nconst COLORS = [\n  '#3A3387',\n  '#5F40A3',\n  '#8C4FBD',\n  '#B961D3',\n  '#DE76E4',\n  '#EF91E8',\n  '#F7B2EC',\n  '#FCD8F4',\n  '#FEEBF9',\n];\n\nconst TagSummary = styled('div')`\n  margin-bottom: ${space(1)};\n`;\n\nconst SegmentBar = styled('div')`\n  display: flex;\n  overflow: hidden;\n  border-radius: 2px;\n`;\n\nconst Title = styled('div')`\n  display: flex;\n  font-size: ${p => p.theme.fontSizeSmall};\n  justify-content: space-between;\n`;\n\nconst TitleType = styled('div')`\n  color: ${p => p.theme.textColor};\n  font-weight: bold;\n  ${overflowEllipsis};\n`;\n\nconst TitleDescription = styled('div')`\n  display: flex;\n  color: ${p => p.theme.gray300};\n  text-align: right;\n`;\n\nconst Label = styled('div')`\n  ${overflowEllipsis};\n  max-width: 150px;\n`;\n\nconst Percent = styled('div')`\n  font-weight: bold;\n  padding-left: ${space(0.5)};\n  color: ${p => p.theme.textColor};\n`;\n\nconst OtherSegment = styled('span')`\n  display: block;\n  width: 100%;\n  height: 16px;\n  color: inherit;\n  outline: none;\n  background-color: ${COLORS[COLORS.length - 1]};\n`;\n\nconst Segment = styled(Link, {shouldForwardProp: isPropValid})<SegmentValue>`\n  display: block;\n  width: 100%;\n  height: 16px;\n  color: inherit;\n  outline: none;\n  background-color: ${p => COLORS[p.index]};\n`;\n"],"sourceRoot":""}