{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/apiTokenRow.tsx","webpack:///./app/views/settings/account/apiTokens.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","ApiTokenRow","token","onRemove","StyledPanelItem","Controls","InputWrapper","getDynamicText","value","fixed","size","onClick","icon","isCircled","t","Details","ScopesWrapper","Heading","ScopeList","scopes","join","Time","date","dateCreated","Date","PanelItem","space","p","theme","fontSizeRelativeSmall","fontSizeMedium","subText","ApiTokens","addLoadingMessage","oldTokenList","state","tokenList","setState","filter","tk","api","requestPromise","method","data","addSuccessMessage","addErrorMessage","organization","props","isEmpty","Array","isArray","length","action","priority","to","slug","tct","link","href","map","handleRemoveToken","withOrganization"],"mappings":"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","file":"chunks/app_views_settings_account_apiTokens_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport DateTime from 'app/components/dateTime';\nimport {PanelItem} from 'app/components/panels';\nimport {IconSubtract} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {InternalAppApiToken} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\n\ntype Props = {\n  token: InternalAppApiToken;\n  onRemove: (token: InternalAppApiToken) => void;\n};\n\nfunction ApiTokenRow({token, onRemove}: Props) {\n  return (\n    <StyledPanelItem>\n      <Controls>\n        <InputWrapper>\n          <TextCopyInput>\n            {getDynamicText({value: token.token, fixed: 'CI_AUTH_TOKEN'})}\n          </TextCopyInput>\n        </InputWrapper>\n        <Button\n          size=\"small\"\n          onClick={() => onRemove(token)}\n          icon={<IconSubtract isCircled size=\"xs\" />}\n        >\n          {t('Remove')}\n        </Button>\n      </Controls>\n\n      <Details>\n        <ScopesWrapper>\n          <Heading>{t('Scopes')}</Heading>\n          <ScopeList>{token.scopes.join(', ')}</ScopeList>\n        </ScopesWrapper>\n        <div>\n          <Heading>{t('Created')}</Heading>\n          <Time>\n            <DateTime\n              date={getDynamicText({\n                value: token.dateCreated,\n                fixed: new Date(1508208080000), // National Pasta Day\n              })}\n            />\n          </Time>\n        </div>\n      </Details>\n    </StyledPanelItem>\n  );\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  flex-direction: column;\n  padding: ${space(2)};\n`;\n\nconst Controls = styled('div')`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${space(1)};\n`;\n\nconst InputWrapper = styled('div')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  flex: 1;\n  margin-right: ${space(1)};\n`;\n\nconst Details = styled('div')`\n  display: flex;\n  margin-top: ${space(1)};\n`;\n\nconst ScopesWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst ScopeList = styled('div')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  line-height: 1.4;\n`;\n\nconst Time = styled('time')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  line-height: 1.4;\n`;\n\nconst Heading = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: uppercase;\n  color: ${p => p.theme.subText};\n  margin-bottom: ${space(1)};\n`;\n\nexport default ApiTokenRow;\n","import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport AlertLink from 'app/components/alertLink';\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {InternalAppApiToken, Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport ApiTokenRow from 'app/views/settings/account/apiTokenRow';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = {\n  organization: Organization;\n} & AsyncView['props'];\n\ntype State = {\n  tokenList: InternalAppApiToken[] | null;\n} & AsyncView['state'];\n\nexport class ApiTokens extends AsyncView<Props, State> {\n  getTitle() {\n    return t('API Tokens');\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      tokenList: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['tokenList', '/api-tokens/']];\n  }\n\n  handleRemoveToken = (token: InternalAppApiToken) => {\n    addLoadingMessage();\n    const oldTokenList = this.state.tokenList;\n\n    this.setState(\n      state => ({\n        tokenList: state.tokenList?.filter(tk => tk.token !== token.token) ?? [],\n      }),\n      async () => {\n        try {\n          await this.api.requestPromise('/api-tokens/', {\n            method: 'DELETE',\n            data: {token: token.token},\n          });\n\n          addSuccessMessage(t('Removed token'));\n        } catch (_err) {\n          addErrorMessage(t('Unable to remove token. Please try again.'));\n          this.setState({\n            tokenList: oldTokenList,\n          });\n        }\n      }\n    );\n  };\n\n  renderBody() {\n    const {organization} = this.props;\n    const {tokenList} = this.state;\n\n    const isEmpty = !Array.isArray(tokenList) || tokenList.length === 0;\n\n    const action = (\n      <Button\n        priority=\"primary\"\n        size=\"small\"\n        to=\"/settings/account/api/auth-tokens/new-token/\"\n        data-test-id=\"create-token\"\n      >\n        {t('Create New Token')}\n      </Button>\n    );\n\n    return (\n      <div>\n        <SettingsPageHeader title=\"Auth Tokens\" action={action} />\n        <AlertLink\n          to={`/settings/${organization?.slug ?? ''}/developer-settings/new-internal`}\n        >\n          {t(\n            \"Auth Tokens are tied to the logged in user, meaning they'll stop working if the user leaves the organization! We suggest using internal integrations to create/manage tokens tied to the organization instead.\"\n          )}\n        </AlertLink>\n        <TextBlock>\n          {t(\n            \"Authentication tokens allow you to perform actions against the Sentry API on behalf of your account. They're the easiest way to get started using the API.\"\n          )}\n        </TextBlock>\n        <TextBlock>\n          {tct(\n            'For more information on how to use the web API, see our [link:documentation].',\n            {\n              link: <a href=\"https://docs.sentry.io/api/\" />,\n            }\n          )}\n        </TextBlock>\n        <Panel>\n          <PanelHeader>{t('Auth Token')}</PanelHeader>\n\n          <PanelBody>\n            {isEmpty && (\n              <EmptyMessage>\n                {t(\"You haven't created any authentication tokens yet.\")}\n              </EmptyMessage>\n            )}\n\n            {tokenList?.map(token => (\n              <ApiTokenRow\n                key={token.token}\n                token={token}\n                onRemove={this.handleRemoveToken}\n              />\n            ))}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(ApiTokens);\n"],"sourceRoot":""}