{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/projectInstall/overview.tsx"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","ProjectInstallOverview","platform","props","orgId","projectId","installUrl","isGettingStarted","browserHistory","setState","state","showDsn","window","href","this","keyList","issueStreamLink","t","DsnInfo","DsnContainer","DsnValue","dsn","public","priority","tct","link","onClick","toggleDsn","setPlatform","redirectToDocs","showOther","organization","docLink","AsyncComponent","p","space","withOrganization"],"mappings":"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","file":"chunks/app_views_projectInstall_overview_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport AutoSelectText from 'app/components/autoSelectText';\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport PlatformPicker from 'app/components/platformPicker';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {PlatformKey} from 'app/data/platformCategories';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withOrganization from 'app/utils/withOrganization';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport {ProjectKey} from 'app/views/settings/project/projectKeys/types';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n} & AsyncComponent['props'];\n\ntype State = {\n  keyList: Array<ProjectKey> | null;\n} & AsyncComponent['state'];\n\nclass ProjectInstallOverview extends AsyncComponent<Props, State> {\n  get isGettingStarted() {\n    return window.location.href.indexOf('getting-started') > 0;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  redirectToDocs = (platform: PlatformKey | null) => {\n    const {orgId, projectId} = this.props.params;\n\n    const installUrl = this.isGettingStarted\n      ? `/organizations/${orgId}/projects/${projectId}/getting-started/${platform}/`\n      : recreateRoute(`install/${platform}/`, {\n          ...this.props,\n          stepBack: -3,\n        });\n\n    browserHistory.push(installUrl);\n  };\n\n  toggleDsn = () => {\n    this.setState(state => ({showDsn: !state.showDsn}));\n  };\n\n  render() {\n    const {orgId, projectId} = this.props.params;\n    const {keyList, showDsn} = this.state;\n\n    const issueStreamLink = `/organizations/${orgId}/issues/#welcome`;\n\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Instrumentation')} projectSlug={projectId} />\n        <SettingsPageHeader title={t('Configure your application')} />\n        <TextBlock>\n          {t(\n            'Get started by selecting the platform or language that powers your application.'\n          )}\n        </TextBlock>\n\n        {showDsn ? (\n          <DsnInfo>\n            <DsnContainer>\n              <strong>{t('DSN')}</strong>\n              <DsnValue>{keyList?.[0].dsn.public}</DsnValue>\n            </DsnContainer>\n\n            <Button priority=\"primary\" to={issueStreamLink}>\n              {t('Got it! Take me to the Issue Stream.')}\n            </Button>\n          </DsnInfo>\n        ) : (\n          <p>\n            <small>\n              {tct('Already have things setup? [link:Get your DSN]', {\n                link: <Button priority=\"link\" onClick={this.toggleDsn} />,\n              })}\n              .\n            </small>\n          </p>\n        )}\n        <PlatformPicker\n          setPlatform={this.redirectToDocs}\n          showOther={false}\n          organization={this.props.organization}\n        />\n        <p>\n          {tct(\n            `For a complete list of client integrations, please see\n             [docLink:our in-depth documentation].`,\n            {docLink: <ExternalLink href=\"https://docs.sentry.io\" />}\n          )}\n        </p>\n      </div>\n    );\n  }\n}\n\nconst DsnValue = styled(p => (\n  <code {...p}>\n    <AutoSelectText>{p.children}</AutoSelectText>\n  </code>\n))`\n  overflow: hidden;\n`;\n\nconst DsnInfo = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst DsnContainer = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-gap: ${space(1.5)} ${space(2)};\n  align-items: center;\n  margin-bottom: ${space(2)};\n`;\n\nexport default withOrganization(ProjectInstallOverview);\n"],"sourceRoot":""}